{"ast":null,"code":"var AWS = require('./core');\n\nvar util = require('./util');\n\nvar endpointDiscoveryEnabledEnvs = ['AWS_ENABLE_ENDPOINT_DISCOVERY', 'AWS_ENDPOINT_DISCOVERY_ENABLED'];\n/**\r\n * Generate key (except resources and operation part) to index the endpoints in the cache\r\n * If input shape has endpointdiscoveryid trait then use\r\n *   accessKey + operation + resources + region + service as cache key\r\n * If input shape doesn't have endpointdiscoveryid trait then use\r\n *   accessKey + region + service as cache key\r\n * @return [map<String,String>] object with keys to index endpoints.\r\n * @api private\r\n */\n\nfunction getCacheKey(request) {\n  var service = request.service;\n  var api = service.api || {};\n  var operations = api.operations;\n  var identifiers = {};\n\n  if (service.config.region) {\n    identifiers.region = service.config.region;\n  }\n\n  if (api.serviceId) {\n    identifiers.serviceId = api.serviceId;\n  }\n\n  if (service.config.credentials.accessKeyId) {\n    identifiers.accessKeyId = service.config.credentials.accessKeyId;\n  }\n\n  return identifiers;\n}\n/**\r\n * Recursive helper for marshallCustomIdentifiers().\r\n * Looks for required string input members that have 'endpointdiscoveryid' trait.\r\n * @api private\r\n */\n\n\nfunction marshallCustomIdentifiersHelper(result, params, shape) {\n  if (!shape || params === undefined || params === null) return;\n\n  if (shape.type === 'structure' && shape.required && shape.required.length > 0) {\n    util.arrayEach(shape.required, function (name) {\n      var memberShape = shape.members[name];\n\n      if (memberShape.endpointDiscoveryId === true) {\n        var locationName = memberShape.isLocationName ? memberShape.name : name;\n        result[locationName] = String(params[name]);\n      } else {\n        marshallCustomIdentifiersHelper(result, params[name], memberShape);\n      }\n    });\n  }\n}\n/**\r\n * Get custom identifiers for cache key.\r\n * Identifies custom identifiers by checking each shape's `endpointDiscoveryId` trait.\r\n * @param [object] request object\r\n * @param [object] input shape of the given operation's api\r\n * @api private\r\n */\n\n\nfunction marshallCustomIdentifiers(request, shape) {\n  var identifiers = {};\n  marshallCustomIdentifiersHelper(identifiers, request.params, shape);\n  return identifiers;\n}\n/**\r\n * Call endpoint discovery operation when it's optional.\r\n * When endpoint is available in cache then use the cached endpoints. If endpoints\r\n * are unavailable then use regional endpoints and call endpoint discovery operation\r\n * asynchronously. This is turned off by default.\r\n * @param [object] request object\r\n * @api private\r\n */\n\n\nfunction optionalDiscoverEndpoint(request) {\n  var service = request.service;\n  var api = service.api;\n  var operationModel = api.operations ? api.operations[request.operation] : undefined;\n  var inputShape = operationModel ? operationModel.input : undefined;\n  var identifiers = marshallCustomIdentifiers(request, inputShape);\n  var cacheKey = getCacheKey(request);\n\n  if (Object.keys(identifiers).length > 0) {\n    cacheKey = util.update(cacheKey, identifiers);\n    if (operationModel) cacheKey.operation = operationModel.name;\n  }\n\n  var endpoints = AWS.endpointCache.get(cacheKey);\n\n  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {\n    //endpoint operation is being made but response not yet received\n    //or endpoint operation just failed in 1 minute\n    return;\n  } else if (endpoints && endpoints.length > 0) {\n    //found endpoint record from cache\n    request.httpRequest.updateEndpoint(endpoints[0].Address);\n  } else {\n    //endpoint record not in cache or outdated. make discovery operation\n    var endpointRequest = service.makeRequest(api.endpointOperation, {\n      Operation: operationModel.name,\n      Identifiers: identifiers\n    });\n    addApiVersionHeader(endpointRequest);\n    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n    endpointRequest.removeListener('retry', AWS.EventListeners.Core.RETRY_CHECK); //put in a placeholder for endpoints already requested, prevent\n    //too much in-flight calls\n\n    AWS.endpointCache.put(cacheKey, [{\n      Address: '',\n      CachePeriodInMinutes: 1\n    }]);\n    endpointRequest.send(function (err, data) {\n      if (data && data.Endpoints) {\n        AWS.endpointCache.put(cacheKey, data.Endpoints);\n      } else if (err) {\n        AWS.endpointCache.put(cacheKey, [{\n          Address: '',\n          CachePeriodInMinutes: 1 //not to make more endpoint operation in next 1 minute\n\n        }]);\n      }\n    });\n  }\n}\n\nvar requestQueue = {};\n/**\r\n * Call endpoint discovery operation when it's required.\r\n * When endpoint is available in cache then use cached ones. If endpoints are\r\n * unavailable then SDK should call endpoint operation then use returned new\r\n * endpoint for the api call. SDK will automatically attempt to do endpoint\r\n * discovery. This is turned off by default\r\n * @param [object] request object\r\n * @api private\r\n */\n\nfunction requiredDiscoverEndpoint(request, done) {\n  var service = request.service;\n  var api = service.api;\n  var operationModel = api.operations ? api.operations[request.operation] : undefined;\n  var inputShape = operationModel ? operationModel.input : undefined;\n  var identifiers = marshallCustomIdentifiers(request, inputShape);\n  var cacheKey = getCacheKey(request);\n\n  if (Object.keys(identifiers).length > 0) {\n    cacheKey = util.update(cacheKey, identifiers);\n    if (operationModel) cacheKey.operation = operationModel.name;\n  }\n\n  var cacheKeyStr = AWS.EndpointCache.getKeyString(cacheKey);\n  var endpoints = AWS.endpointCache.get(cacheKeyStr); //endpoint cache also accepts string keys\n\n  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {\n    //endpoint operation is being made but response not yet received\n    //push request object to a pending queue\n    if (!requestQueue[cacheKeyStr]) requestQueue[cacheKeyStr] = [];\n    requestQueue[cacheKeyStr].push({\n      request: request,\n      callback: done\n    });\n    return;\n  } else if (endpoints && endpoints.length > 0) {\n    request.httpRequest.updateEndpoint(endpoints[0].Address);\n    done();\n  } else {\n    var endpointRequest = service.makeRequest(api.endpointOperation, {\n      Operation: operationModel.name,\n      Identifiers: identifiers\n    });\n    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n    addApiVersionHeader(endpointRequest); //put in a placeholder for endpoints already requested, prevent\n    //too much in-flight calls\n\n    AWS.endpointCache.put(cacheKeyStr, [{\n      Address: '',\n      CachePeriodInMinutes: 60 //long-live cache\n\n    }]);\n    endpointRequest.send(function (err, data) {\n      if (err) {\n        var errorParams = {\n          code: 'EndpointDiscoveryException',\n          message: 'Request cannot be fulfilled without specifying an endpoint',\n          retryable: false\n        };\n        request.response.error = util.error(err, errorParams);\n        AWS.endpointCache.remove(cacheKey); //fail all the pending requests in batch\n\n        if (requestQueue[cacheKeyStr]) {\n          var pendingRequests = requestQueue[cacheKeyStr];\n          util.arrayEach(pendingRequests, function (requestContext) {\n            requestContext.request.response.error = util.error(err, errorParams);\n            requestContext.callback();\n          });\n          delete requestQueue[cacheKeyStr];\n        }\n      } else if (data) {\n        AWS.endpointCache.put(cacheKeyStr, data.Endpoints);\n        request.httpRequest.updateEndpoint(data.Endpoints[0].Address); //update the endpoint for all the pending requests in batch\n\n        if (requestQueue[cacheKeyStr]) {\n          var pendingRequests = requestQueue[cacheKeyStr];\n          util.arrayEach(pendingRequests, function (requestContext) {\n            requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);\n            requestContext.callback();\n          });\n          delete requestQueue[cacheKeyStr];\n        }\n      }\n\n      done();\n    });\n  }\n}\n/**\r\n * add api version header to endpoint operation\r\n * @api private\r\n */\n\n\nfunction addApiVersionHeader(endpointRequest) {\n  var api = endpointRequest.service.api;\n  var apiVersion = api.apiVersion;\n\n  if (apiVersion && !endpointRequest.httpRequest.headers['x-amz-api-version']) {\n    endpointRequest.httpRequest.headers['x-amz-api-version'] = apiVersion;\n  }\n}\n/**\r\n * If api call gets invalid endpoint exception, SDK should attempt to remove the invalid\r\n * endpoint from cache.\r\n * @api private\r\n */\n\n\nfunction invalidateCachedEndpoints(response) {\n  var error = response.error;\n  var httpResponse = response.httpResponse;\n\n  if (error && (error.code === 'InvalidEndpointException' || httpResponse.statusCode === 421)) {\n    var request = response.request;\n    var operations = request.service.api.operations || {};\n    var inputShape = operations[request.operation] ? operations[request.operation].input : undefined;\n    var identifiers = marshallCustomIdentifiers(request, inputShape);\n    var cacheKey = getCacheKey(request);\n\n    if (Object.keys(identifiers).length > 0) {\n      cacheKey = util.update(cacheKey, identifiers);\n      if (operations[request.operation]) cacheKey.operation = operations[request.operation].name;\n    }\n\n    AWS.endpointCache.remove(cacheKey);\n  }\n}\n/**\r\n * If endpoint is explicitly configured, SDK should not do endpoint discovery in anytime.\r\n * @param [object] client Service client object.\r\n * @api private\r\n */\n\n\nfunction hasCustomEndpoint(client) {\n  //if set endpoint is set for specific client, enable endpoint discovery will raise an error.\n  if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {\n    throw util.error(new Error(), {\n      code: 'ConfigurationException',\n      message: 'Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.'\n    });\n  }\n\n  ;\n  var svcConfig = AWS.config[client.serviceIdentifier] || {};\n  return Boolean(AWS.config.endpoint || svcConfig.endpoint || client._originalConfig && client._originalConfig.endpoint);\n}\n/**\r\n * @api private\r\n */\n\n\nfunction isFalsy(value) {\n  return ['false', '0'].indexOf(value) >= 0;\n}\n/**\r\n * If endpoint discovery should perform for this request when endpoint discovery is optional.\r\n * SDK performs config resolution in order like below:\r\n * 1. If turned on client configuration(default to off) then turn on endpoint discovery.\r\n * 2. If turned on in env AWS_ENABLE_ENDPOINT_DISCOVERY then turn on endpoint discovery.\r\n * 3. If turned on in shared ini config file with key 'endpoint_discovery_enabled', then\r\n *   turn on endpoint discovery.\r\n * @param [object] request request object.\r\n * @api private\r\n */\n\n\nfunction isEndpointDiscoveryApplicable(request) {\n  var service = request.service || {};\n  if (service.config.endpointDiscoveryEnabled === true) return true; //shared ini file is only available in Node\n  //not to check env in browser\n\n  if (util.isBrowser()) return false;\n\n  for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {\n    var env = endpointDiscoveryEnabledEnvs[i];\n\n    if (Object.prototype.hasOwnProperty.call(process.env, env)) {\n      if (process.env[env] === '' || process.env[env] === undefined) {\n        throw util.error(new Error(), {\n          code: 'ConfigurationException',\n          message: 'environmental variable ' + env + ' cannot be set to nothing'\n        });\n      }\n\n      if (!isFalsy(process.env[env])) return true;\n    }\n  }\n\n  var configFile = {};\n\n  try {\n    configFile = AWS.util.iniLoader ? AWS.util.iniLoader.loadFrom({\n      isConfig: true,\n      filename: process.env[AWS.util.sharedConfigFileEnv]\n    }) : {};\n  } catch (e) {}\n\n  var sharedFileConfig = configFile[process.env.AWS_PROFILE || AWS.util.defaultProfile] || {};\n\n  if (Object.prototype.hasOwnProperty.call(sharedFileConfig, 'endpoint_discovery_enabled')) {\n    if (sharedFileConfig.endpoint_discovery_enabled === undefined) {\n      throw util.error(new Error(), {\n        code: 'ConfigurationException',\n        message: 'config file entry \\'endpoint_discovery_enabled\\' cannot be set to nothing'\n      });\n    }\n\n    if (!isFalsy(sharedFileConfig.endpoint_discovery_enabled)) return true;\n  }\n\n  return false;\n}\n/**\r\n * attach endpoint discovery logic to request object\r\n * @param [object] request\r\n * @api private\r\n */\n\n\nfunction discoverEndpoint(request, done) {\n  var service = request.service || {};\n  if (hasCustomEndpoint(service) || request.isPresigned()) return done();\n  if (!isEndpointDiscoveryApplicable(request)) return done();\n  request.httpRequest.appendToUserAgent('endpoint-discovery');\n  var operations = service.api.operations || {};\n  var operationModel = operations[request.operation];\n  var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : 'NULL';\n\n  switch (isEndpointDiscoveryRequired) {\n    case 'OPTIONAL':\n      optionalDiscoverEndpoint(request);\n      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);\n      done();\n      break;\n\n    case 'REQUIRED':\n      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);\n      requiredDiscoverEndpoint(request, done);\n      break;\n\n    case 'NULL':\n    default:\n      done();\n      break;\n  }\n}\n\nmodule.exports = {\n  discoverEndpoint: discoverEndpoint,\n  requiredDiscoverEndpoint: requiredDiscoverEndpoint,\n  optionalDiscoverEndpoint: optionalDiscoverEndpoint,\n  marshallCustomIdentifiers: marshallCustomIdentifiers,\n  getCacheKey: getCacheKey,\n  invalidateCachedEndpoint: invalidateCachedEndpoints\n};","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/discover_endpoint.js"],"names":["AWS","require","util","endpointDiscoveryEnabledEnvs","getCacheKey","request","service","api","operations","identifiers","config","region","serviceId","credentials","accessKeyId","marshallCustomIdentifiersHelper","result","params","shape","undefined","type","required","length","arrayEach","name","memberShape","members","endpointDiscoveryId","locationName","isLocationName","String","marshallCustomIdentifiers","optionalDiscoverEndpoint","operationModel","operation","inputShape","input","cacheKey","Object","keys","update","endpoints","endpointCache","get","Address","httpRequest","updateEndpoint","endpointRequest","makeRequest","endpointOperation","Operation","Identifiers","addApiVersionHeader","removeListener","EventListeners","Core","VALIDATE_PARAMETERS","RETRY_CHECK","put","CachePeriodInMinutes","send","err","data","Endpoints","requestQueue","requiredDiscoverEndpoint","done","cacheKeyStr","EndpointCache","getKeyString","push","callback","errorParams","code","message","retryable","response","error","remove","pendingRequests","requestContext","apiVersion","headers","invalidateCachedEndpoints","httpResponse","statusCode","hasCustomEndpoint","client","_originalConfig","endpoint","endpointDiscoveryEnabled","Error","svcConfig","serviceIdentifier","Boolean","isFalsy","value","indexOf","isEndpointDiscoveryApplicable","isBrowser","i","env","prototype","hasOwnProperty","call","process","configFile","iniLoader","loadFrom","isConfig","filename","sharedConfigFileEnv","e","sharedFileConfig","AWS_PROFILE","defaultProfile","endpoint_discovery_enabled","discoverEndpoint","isPresigned","appendToUserAgent","isEndpointDiscoveryRequired","endpointDiscoveryRequired","addNamedListener","module","exports","invalidateCachedEndpoint"],"mappings":"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","sourcesContent":["var AWS = require('./core');\r\nvar util = require('./util');\r\nvar endpointDiscoveryEnabledEnvs = ['AWS_ENABLE_ENDPOINT_DISCOVERY', 'AWS_ENDPOINT_DISCOVERY_ENABLED'];\r\n\r\n/**\r\n * Generate key (except resources and operation part) to index the endpoints in the cache\r\n * If input shape has endpointdiscoveryid trait then use\r\n *   accessKey + operation + resources + region + service as cache key\r\n * If input shape doesn't have endpointdiscoveryid trait then use\r\n *   accessKey + region + service as cache key\r\n * @return [map<String,String>] object with keys to index endpoints.\r\n * @api private\r\n */\r\nfunction getCacheKey(request) {\r\n  var service = request.service;\r\n  var api = service.api || {};\r\n  var operations = api.operations;\r\n  var identifiers = {};\r\n  if (service.config.region) {\r\n    identifiers.region = service.config.region;\r\n  }\r\n  if (api.serviceId) {\r\n    identifiers.serviceId = api.serviceId;\r\n  }\r\n  if (service.config.credentials.accessKeyId) {\r\n    identifiers.accessKeyId = service.config.credentials.accessKeyId;\r\n  }\r\n  return identifiers;\r\n}\r\n\r\n/**\r\n * Recursive helper for marshallCustomIdentifiers().\r\n * Looks for required string input members that have 'endpointdiscoveryid' trait.\r\n * @api private\r\n */\r\nfunction marshallCustomIdentifiersHelper(result, params, shape) {\r\n  if (!shape || params === undefined || params === null) return;\r\n  if (shape.type === 'structure' && shape.required && shape.required.length > 0) {\r\n    util.arrayEach(shape.required, function(name) {\r\n      var memberShape = shape.members[name];\r\n      if (memberShape.endpointDiscoveryId === true) {\r\n        var locationName = memberShape.isLocationName ? memberShape.name : name;\r\n        result[locationName] = String(params[name]);\r\n      } else {\r\n        marshallCustomIdentifiersHelper(result, params[name], memberShape);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Get custom identifiers for cache key.\r\n * Identifies custom identifiers by checking each shape's `endpointDiscoveryId` trait.\r\n * @param [object] request object\r\n * @param [object] input shape of the given operation's api\r\n * @api private\r\n */\r\nfunction marshallCustomIdentifiers(request, shape) {\r\n  var identifiers = {};\r\n  marshallCustomIdentifiersHelper(identifiers, request.params, shape);\r\n  return identifiers;\r\n}\r\n\r\n/**\r\n * Call endpoint discovery operation when it's optional.\r\n * When endpoint is available in cache then use the cached endpoints. If endpoints\r\n * are unavailable then use regional endpoints and call endpoint discovery operation\r\n * asynchronously. This is turned off by default.\r\n * @param [object] request object\r\n * @api private\r\n */\r\nfunction optionalDiscoverEndpoint(request) {\r\n  var service = request.service;\r\n  var api = service.api;\r\n  var operationModel = api.operations ? api.operations[request.operation] : undefined;\r\n  var inputShape = operationModel ? operationModel.input : undefined;\r\n\r\n  var identifiers = marshallCustomIdentifiers(request, inputShape);\r\n  var cacheKey = getCacheKey(request);\r\n  if (Object.keys(identifiers).length > 0) {\r\n    cacheKey = util.update(cacheKey, identifiers);\r\n    if (operationModel) cacheKey.operation = operationModel.name;\r\n  }\r\n  var endpoints = AWS.endpointCache.get(cacheKey);\r\n  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {\r\n    //endpoint operation is being made but response not yet received\r\n    //or endpoint operation just failed in 1 minute\r\n    return;\r\n  } else if (endpoints && endpoints.length > 0) {\r\n    //found endpoint record from cache\r\n    request.httpRequest.updateEndpoint(endpoints[0].Address);\r\n  } else {\r\n    //endpoint record not in cache or outdated. make discovery operation\r\n    var endpointRequest = service.makeRequest(api.endpointOperation, {\r\n      Operation: operationModel.name,\r\n      Identifiers: identifiers,\r\n    });\r\n    addApiVersionHeader(endpointRequest);\r\n    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\r\n    endpointRequest.removeListener('retry', AWS.EventListeners.Core.RETRY_CHECK);\r\n    //put in a placeholder for endpoints already requested, prevent\r\n    //too much in-flight calls\r\n    AWS.endpointCache.put(cacheKey, [{\r\n      Address: '',\r\n      CachePeriodInMinutes: 1\r\n    }]);\r\n    endpointRequest.send(function(err, data) {\r\n      if (data && data.Endpoints) {\r\n        AWS.endpointCache.put(cacheKey, data.Endpoints);\r\n      } else if (err) {\r\n        AWS.endpointCache.put(cacheKey, [{\r\n          Address: '',\r\n          CachePeriodInMinutes: 1 //not to make more endpoint operation in next 1 minute\r\n        }]);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nvar requestQueue = {};\r\n\r\n/**\r\n * Call endpoint discovery operation when it's required.\r\n * When endpoint is available in cache then use cached ones. If endpoints are\r\n * unavailable then SDK should call endpoint operation then use returned new\r\n * endpoint for the api call. SDK will automatically attempt to do endpoint\r\n * discovery. This is turned off by default\r\n * @param [object] request object\r\n * @api private\r\n */\r\nfunction requiredDiscoverEndpoint(request, done) {\r\n  var service = request.service;\r\n  var api = service.api;\r\n  var operationModel = api.operations ? api.operations[request.operation] : undefined;\r\n  var inputShape = operationModel ? operationModel.input : undefined;\r\n\r\n  var identifiers = marshallCustomIdentifiers(request, inputShape);\r\n  var cacheKey = getCacheKey(request);\r\n  if (Object.keys(identifiers).length > 0) {\r\n    cacheKey = util.update(cacheKey, identifiers);\r\n    if (operationModel) cacheKey.operation = operationModel.name;\r\n  }\r\n  var cacheKeyStr = AWS.EndpointCache.getKeyString(cacheKey);\r\n  var endpoints = AWS.endpointCache.get(cacheKeyStr); //endpoint cache also accepts string keys\r\n  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {\r\n    //endpoint operation is being made but response not yet received\r\n    //push request object to a pending queue\r\n    if (!requestQueue[cacheKeyStr]) requestQueue[cacheKeyStr] = [];\r\n    requestQueue[cacheKeyStr].push({request: request, callback: done});\r\n    return;\r\n  } else if (endpoints && endpoints.length > 0) {\r\n    request.httpRequest.updateEndpoint(endpoints[0].Address);\r\n    done();\r\n  } else {\r\n    var endpointRequest = service.makeRequest(api.endpointOperation, {\r\n      Operation: operationModel.name,\r\n      Identifiers: identifiers,\r\n    });\r\n    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\r\n    addApiVersionHeader(endpointRequest);\r\n\r\n    //put in a placeholder for endpoints already requested, prevent\r\n    //too much in-flight calls\r\n    AWS.endpointCache.put(cacheKeyStr, [{\r\n      Address: '',\r\n      CachePeriodInMinutes: 60 //long-live cache\r\n    }]);\r\n    endpointRequest.send(function(err, data) {\r\n      if (err) {\r\n        var errorParams = {\r\n          code: 'EndpointDiscoveryException',\r\n          message: 'Request cannot be fulfilled without specifying an endpoint',\r\n          retryable: false\r\n        };\r\n        request.response.error = util.error(err, errorParams);\r\n        AWS.endpointCache.remove(cacheKey);\r\n\r\n        //fail all the pending requests in batch\r\n        if (requestQueue[cacheKeyStr]) {\r\n          var pendingRequests = requestQueue[cacheKeyStr];\r\n          util.arrayEach(pendingRequests, function(requestContext) {\r\n            requestContext.request.response.error = util.error(err, errorParams);\r\n            requestContext.callback();\r\n          });\r\n          delete requestQueue[cacheKeyStr];\r\n        }\r\n      } else if (data) {\r\n        AWS.endpointCache.put(cacheKeyStr, data.Endpoints);\r\n        request.httpRequest.updateEndpoint(data.Endpoints[0].Address);\r\n\r\n        //update the endpoint for all the pending requests in batch\r\n        if (requestQueue[cacheKeyStr]) {\r\n          var pendingRequests = requestQueue[cacheKeyStr];\r\n          util.arrayEach(pendingRequests, function(requestContext) {\r\n            requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);\r\n            requestContext.callback();\r\n          });\r\n          delete requestQueue[cacheKeyStr];\r\n        }\r\n      }\r\n      done();\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * add api version header to endpoint operation\r\n * @api private\r\n */\r\nfunction addApiVersionHeader(endpointRequest) {\r\n  var api = endpointRequest.service.api;\r\n  var apiVersion = api.apiVersion;\r\n  if (apiVersion && !endpointRequest.httpRequest.headers['x-amz-api-version']) {\r\n    endpointRequest.httpRequest.headers['x-amz-api-version'] = apiVersion;\r\n  }\r\n}\r\n\r\n/**\r\n * If api call gets invalid endpoint exception, SDK should attempt to remove the invalid\r\n * endpoint from cache.\r\n * @api private\r\n */\r\nfunction invalidateCachedEndpoints(response) {\r\n  var error = response.error;\r\n  var httpResponse = response.httpResponse;\r\n  if (error &&\r\n    (error.code === 'InvalidEndpointException' || httpResponse.statusCode === 421)\r\n  ) {\r\n    var request = response.request;\r\n    var operations = request.service.api.operations || {};\r\n    var inputShape = operations[request.operation] ? operations[request.operation].input : undefined;\r\n    var identifiers = marshallCustomIdentifiers(request, inputShape);\r\n    var cacheKey = getCacheKey(request);\r\n    if (Object.keys(identifiers).length > 0) {\r\n      cacheKey = util.update(cacheKey, identifiers);\r\n      if (operations[request.operation]) cacheKey.operation = operations[request.operation].name;\r\n    }\r\n    AWS.endpointCache.remove(cacheKey);\r\n  }\r\n}\r\n\r\n/**\r\n * If endpoint is explicitly configured, SDK should not do endpoint discovery in anytime.\r\n * @param [object] client Service client object.\r\n * @api private\r\n */\r\nfunction hasCustomEndpoint(client) {\r\n  //if set endpoint is set for specific client, enable endpoint discovery will raise an error.\r\n  if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {\r\n    throw util.error(new Error(), {\r\n      code: 'ConfigurationException',\r\n      message: 'Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.'\r\n    });\r\n  };\r\n  var svcConfig = AWS.config[client.serviceIdentifier] || {};\r\n  return Boolean(AWS.config.endpoint || svcConfig.endpoint || (client._originalConfig && client._originalConfig.endpoint));\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nfunction isFalsy(value) {\r\n  return ['false', '0'].indexOf(value) >= 0;\r\n}\r\n\r\n/**\r\n * If endpoint discovery should perform for this request when endpoint discovery is optional.\r\n * SDK performs config resolution in order like below:\r\n * 1. If turned on client configuration(default to off) then turn on endpoint discovery.\r\n * 2. If turned on in env AWS_ENABLE_ENDPOINT_DISCOVERY then turn on endpoint discovery.\r\n * 3. If turned on in shared ini config file with key 'endpoint_discovery_enabled', then\r\n *   turn on endpoint discovery.\r\n * @param [object] request request object.\r\n * @api private\r\n */\r\nfunction isEndpointDiscoveryApplicable(request) {\r\n  var service = request.service || {};\r\n  if (service.config.endpointDiscoveryEnabled === true) return true;\r\n\r\n  //shared ini file is only available in Node\r\n  //not to check env in browser\r\n  if (util.isBrowser()) return false;\r\n\r\n  for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {\r\n    var env = endpointDiscoveryEnabledEnvs[i];\r\n    if (Object.prototype.hasOwnProperty.call(process.env, env)) {\r\n      if (process.env[env] === '' || process.env[env] === undefined) {\r\n        throw util.error(new Error(), {\r\n          code: 'ConfigurationException',\r\n          message: 'environmental variable ' + env + ' cannot be set to nothing'\r\n        });\r\n      }\r\n      if (!isFalsy(process.env[env])) return true;\r\n    }\r\n  }\r\n\r\n  var configFile = {};\r\n  try {\r\n    configFile = AWS.util.iniLoader ? AWS.util.iniLoader.loadFrom({\r\n      isConfig: true,\r\n      filename: process.env[AWS.util.sharedConfigFileEnv]\r\n    }) : {};\r\n  } catch (e) {}\r\n  var sharedFileConfig = configFile[\r\n    process.env.AWS_PROFILE || AWS.util.defaultProfile\r\n  ] || {};\r\n  if (Object.prototype.hasOwnProperty.call(sharedFileConfig, 'endpoint_discovery_enabled')) {\r\n    if (sharedFileConfig.endpoint_discovery_enabled === undefined) {\r\n      throw util.error(new Error(), {\r\n        code: 'ConfigurationException',\r\n        message: 'config file entry \\'endpoint_discovery_enabled\\' cannot be set to nothing'\r\n      });\r\n    }\r\n    if (!isFalsy(sharedFileConfig.endpoint_discovery_enabled)) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * attach endpoint discovery logic to request object\r\n * @param [object] request\r\n * @api private\r\n */\r\nfunction discoverEndpoint(request, done) {\r\n  var service = request.service || {};\r\n  if (hasCustomEndpoint(service) || request.isPresigned()) return done();\r\n\r\n  if (!isEndpointDiscoveryApplicable(request)) return done();\r\n\r\n  request.httpRequest.appendToUserAgent('endpoint-discovery');\r\n\r\n  var operations = service.api.operations || {};\r\n  var operationModel = operations[request.operation];\r\n  var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : 'NULL';\r\n  switch (isEndpointDiscoveryRequired) {\r\n    case 'OPTIONAL':\r\n      optionalDiscoverEndpoint(request);\r\n      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);\r\n      done();\r\n      break;\r\n    case 'REQUIRED':\r\n      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);\r\n      requiredDiscoverEndpoint(request, done);\r\n      break;\r\n    case 'NULL':\r\n    default:\r\n      done();\r\n      break;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  discoverEndpoint: discoverEndpoint,\r\n  requiredDiscoverEndpoint: requiredDiscoverEndpoint,\r\n  optionalDiscoverEndpoint: optionalDiscoverEndpoint,\r\n  marshallCustomIdentifiers: marshallCustomIdentifiers,\r\n  getCacheKey: getCacheKey,\r\n  invalidateCachedEndpoint: invalidateCachedEndpoints,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}