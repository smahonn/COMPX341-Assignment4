{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport isPromise from './isPromise';\n/**\r\n * Similar to Array.prototype.reduce(), however the reducing callback may return\r\n * a Promise, in which case reduction will continue after each promise resolves.\r\n *\r\n * If the callback does not return a Promise, then this function will also not\r\n * return a Promise.\r\n */\n\nexport default function promiseReduce(values, callback, initialValue) {\n  return values.reduce(function (previous, value) {\n    return isPromise(previous) ? previous.then(function (resolved) {\n      return callback(resolved, value);\n    }) : callback(previous, value);\n  }, initialValue);\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/jsutils/promiseReduce.mjs"],"names":["isPromise","promiseReduce","values","callback","initialValue","reduce","previous","value","then","resolved"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuD;AACpE,SAAOF,MAAM,CAACG,MAAP,CAAc,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AAC9C,WAAOP,SAAS,CAACM,QAAD,CAAT,GAAsBA,QAAQ,CAACE,IAAT,CAAc,UAAUC,QAAV,EAAoB;AAC7D,aAAON,QAAQ,CAACM,QAAD,EAAWF,KAAX,CAAf;AACD,KAF4B,CAAtB,GAEFJ,QAAQ,CAACG,QAAD,EAAWC,KAAX,CAFb;AAGD,GAJM,EAIJH,YAJI,CAAP;AAKD","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport isPromise from './isPromise';\r\n\r\n/**\r\n * Similar to Array.prototype.reduce(), however the reducing callback may return\r\n * a Promise, in which case reduction will continue after each promise resolves.\r\n *\r\n * If the callback does not return a Promise, then this function will also not\r\n * return a Promise.\r\n */\r\nexport default function promiseReduce(values, callback, initialValue) {\r\n  return values.reduce(function (previous, value) {\r\n    return isPromise(previous) ? previous.then(function (resolved) {\r\n      return callback(resolved, value);\r\n    }) : callback(previous, value);\r\n  }, initialValue);\r\n}"]},"metadata":{},"sourceType":"module"}