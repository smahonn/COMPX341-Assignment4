{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport invariant from '../jsutils/invariant';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\r\n * Upholds the spec rules about naming.\r\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\r\n * Returns an Error if a name is invalid.\r\n */\n\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by \") + 'GraphQL introspection.', node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/assertValidName.mjs"],"names":["GraphQLError","invariant","NAME_RX","assertValidName","name","error","isValidNameError","node","length","concat","test"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,IAAIC,OAAO,GAAG,0BAAd;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,MAAIC,KAAK,GAAGC,gBAAgB,CAACF,IAAD,CAA5B;;AAEA,MAAIC,KAAJ,EAAW;AACT,UAAMA,KAAN;AACD;;AAED,SAAOD,IAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASE,gBAAT,CAA0BF,IAA1B,EAAgCG,IAAhC,EAAsC;AAC3C,IAAE,OAAOH,IAAP,KAAgB,QAAlB,IAA8BH,SAAS,CAAC,CAAD,EAAI,iBAAJ,CAAvC,GAAgE,KAAK,CAArE;;AAEA,MAAIG,IAAI,CAACI,MAAL,GAAc,CAAd,IAAmBJ,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA/B,IAAsCA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAtD,EAA2D;AACzD,WAAO,IAAIJ,YAAJ,CAAiB,UAAUS,MAAV,CAAiBL,IAAjB,EAAuB,sDAAvB,IAAiF,wBAAlG,EAA4HG,IAA5H,CAAP;AACD;;AAED,MAAI,CAACL,OAAO,CAACQ,IAAR,CAAaN,IAAb,CAAL,EAAyB;AACvB,WAAO,IAAIJ,YAAJ,CAAiB,qDAAqDS,MAArD,CAA4DL,IAA5D,EAAkE,cAAlE,CAAjB,EAAoGG,IAApG,CAAP;AACD;AACF","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { GraphQLError } from '../error/GraphQLError';\r\nimport invariant from '../jsutils/invariant';\r\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\r\n/**\r\n * Upholds the spec rules about naming.\r\n */\r\n\r\nexport function assertValidName(name) {\r\n  var error = isValidNameError(name);\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n\r\n  return name;\r\n}\r\n/**\r\n * Returns an Error if a name is invalid.\r\n */\r\n\r\nexport function isValidNameError(name, node) {\r\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\r\n\r\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\r\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by \") + 'GraphQL introspection.', node);\r\n  }\r\n\r\n  if (!NAME_RX.test(name)) {\r\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}