{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport { Kind } from '../language/kinds';\n/**\r\n * Returns an operation AST given a document AST and optionally an operation\r\n * name. If a name is not provided, an operation is only returned if only one is\r\n * provided in the document.\r\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var definition = documentAST.definitions[i];\n\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/getOperationAST.mjs"],"names":["Kind","getOperationAST","documentAST","operationName","operation","i","definitions","length","definition","kind","OPERATION_DEFINITION","name","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,mBAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,aAAtC,EAAqD;AAC1D,MAAIC,SAAS,GAAG,IAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,WAAZ,CAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EAAyD;AACvD,QAAIG,UAAU,GAAGN,WAAW,CAACI,WAAZ,CAAwBD,CAAxB,CAAjB;;AAEA,QAAIG,UAAU,CAACC,IAAX,KAAoBT,IAAI,CAACU,oBAA7B,EAAmD;AACjD,UAAI,CAACP,aAAL,EAAoB;AAClB;AACA;AACA;AACA,YAAIC,SAAJ,EAAe;AACb,iBAAO,IAAP;AACD;;AAEDA,QAAAA,SAAS,GAAGI,UAAZ;AACD,OATD,MASO,IAAIA,UAAU,CAACG,IAAX,IAAmBH,UAAU,CAACG,IAAX,CAAgBC,KAAhB,KAA0BT,aAAjD,EAAgE;AACrE,eAAOK,UAAP;AACD;AACF;AACF;;AAED,SAAOJ,SAAP;AACD","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { Kind } from '../language/kinds';\r\n\r\n/**\r\n * Returns an operation AST given a document AST and optionally an operation\r\n * name. If a name is not provided, an operation is only returned if only one is\r\n * provided in the document.\r\n */\r\nexport function getOperationAST(documentAST, operationName) {\r\n  var operation = null;\r\n\r\n  for (var i = 0; i < documentAST.definitions.length; i++) {\r\n    var definition = documentAST.definitions[i];\r\n\r\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\r\n      if (!operationName) {\r\n        // If no operation name was provided, only return an Operation if there\r\n        // is one defined in the document. Upon encountering the second, return\r\n        // null.\r\n        if (operation) {\r\n          return null;\r\n        }\r\n\r\n        operation = definition;\r\n      } else if (definition.name && definition.name.value === operationName) {\r\n        return definition;\r\n      }\r\n    }\r\n  }\r\n\r\n  return operation;\r\n}"]},"metadata":{},"sourceType":"module"}