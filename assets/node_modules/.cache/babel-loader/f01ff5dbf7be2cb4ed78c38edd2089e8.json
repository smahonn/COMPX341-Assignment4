{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\r\n * Configuration options to control parser behavior\r\n */\n\n/**\r\n * Given a GraphQL source, parses it into a Document.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n */\n\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\r\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\r\n * that value.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Values directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: valueFromAST().\r\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\r\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\r\n * that type.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Types directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: typeFromAST().\r\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\r\n * Converts a name lex token into a name parse node.\r\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\r\n * Document : Definition+\r\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * Definition :\r\n *   - ExecutableDefinition\r\n *   - TypeSystemDefinition\r\n *   - TypeSystemExtension\r\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\r\n * ExecutableDefinition :\r\n *   - OperationDefinition\r\n *   - FragmentDefinition\r\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\r\n * OperationDefinition :\r\n *  - SelectionSet\r\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\r\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * OperationType : one of query mutation subscription\r\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\r\n * VariableDefinitions : ( VariableDefinition+ )\r\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\r\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\r\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * Variable : $ Name\r\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * SelectionSet : { Selection+ }\r\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * Selection :\r\n *   - Field\r\n *   - FragmentSpread\r\n *   - InlineFragment\r\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\r\n * Field : Alias? Name Arguments? Directives? SelectionSet?\r\n *\r\n * Alias : Name :\r\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * Arguments[Const] : ( Argument[?Const]+ )\r\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\r\n * Argument[Const] : Name : Value[?Const]\r\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\r\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\r\n *\r\n * FragmentSpread : ... FragmentName Directives?\r\n *\r\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\r\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * FragmentDefinition :\r\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\r\n *\r\n * TypeCondition : NamedType\r\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * FragmentName : Name but not `on`\r\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\r\n * Value[Const] :\r\n *   - [~Const] Variable\r\n *   - IntValue\r\n *   - FloatValue\r\n *   - StringValue\r\n *   - BooleanValue\r\n *   - NullValue\r\n *   - EnumValue\r\n *   - ListValue[?Const]\r\n *   - ObjectValue[?Const]\r\n *\r\n * BooleanValue : one of `true` `false`\r\n *\r\n * NullValue : `null`\r\n *\r\n * EnumValue : Name but not `true`, `false` or `null`\r\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\r\n * ListValue[Const] :\r\n *   - [ ]\r\n *   - [ Value[?Const]+ ]\r\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ObjectValue[Const] :\r\n *   - { }\r\n *   - { ObjectField[?Const]+ }\r\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ObjectField[Const] : Name : Value[?Const]\r\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\r\n * Directives[Const] : Directive[?Const]+\r\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\r\n * Directive[Const] : @ Name Arguments[?Const]?\r\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\r\n * Type :\r\n *   - NamedType\r\n *   - ListType\r\n *   - NonNullType\r\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\r\n * NamedType : Name\r\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\r\n * TypeSystemDefinition :\r\n *   - SchemaDefinition\r\n *   - TypeDefinition\r\n *   - DirectiveDefinition\r\n *\r\n * TypeDefinition :\r\n *   - ScalarTypeDefinition\r\n *   - ObjectTypeDefinition\r\n *   - InterfaceTypeDefinition\r\n *   - UnionTypeDefinition\r\n *   - EnumTypeDefinition\r\n *   - InputObjectTypeDefinition\r\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\r\n * Description : StringValue\r\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\r\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\r\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * OperationTypeDefinition : OperationType : NamedType\r\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\r\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ObjectTypeDefinition :\r\n *   Description?\r\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\r\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ImplementsInterfaces :\r\n *   - implements `&`? NamedType\r\n *   - ImplementsInterfaces & NamedType\r\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\r\n * FieldsDefinition : { FieldDefinition+ }\r\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\r\n * FieldDefinition :\r\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\r\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ArgumentsDefinition : ( InputValueDefinition+ )\r\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\r\n * InputValueDefinition :\r\n *   - Description? Name : Type DefaultValue? Directives[Const]?\r\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * InterfaceTypeDefinition :\r\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\r\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * UnionTypeDefinition :\r\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\r\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * UnionMemberTypes :\r\n *   - = `|`? NamedType\r\n *   - UnionMemberTypes | NamedType\r\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\r\n * EnumTypeDefinition :\r\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\r\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * EnumValuesDefinition : { EnumValueDefinition+ }\r\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\r\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\r\n *\r\n * EnumValue : Name\r\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * InputObjectTypeDefinition :\r\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\r\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * InputFieldsDefinition : { InputValueDefinition+ }\r\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\r\n * TypeSystemExtension :\r\n *   - SchemaExtension\r\n *   - TypeExtension\r\n *\r\n * TypeExtension :\r\n *   - ScalarTypeExtension\r\n *   - ObjectTypeExtension\r\n *   - InterfaceTypeExtension\r\n *   - UnionTypeExtension\r\n *   - EnumTypeExtension\r\n *   - InputObjectTypeDefinition\r\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\r\n * SchemaExtension :\r\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\r\n *  - extend schema Directives[Const]\r\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ScalarTypeExtension :\r\n *   - extend scalar Name Directives[Const]\r\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * ObjectTypeExtension :\r\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n *  - extend type Name ImplementsInterfaces? Directives[Const]\r\n *  - extend type Name ImplementsInterfaces\r\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * InterfaceTypeExtension :\r\n *   - extend interface Name Directives[Const]? FieldsDefinition\r\n *   - extend interface Name Directives[Const]\r\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * UnionTypeExtension :\r\n *   - extend union Name Directives[Const]? UnionMemberTypes\r\n *   - extend union Name Directives[Const]\r\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * EnumTypeExtension :\r\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\r\n *   - extend enum Name Directives[Const]\r\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * InputObjectTypeExtension :\r\n *   - extend input Name Directives[Const]? InputFieldsDefinition\r\n *   - extend input Name Directives[Const]\r\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * DirectiveDefinition :\r\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\r\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\r\n * DirectiveLocations :\r\n *   - `|`? DirectiveLocation\r\n *   - DirectiveLocations | DirectiveLocation\r\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\r\n * DirectiveLocation :\r\n *   - ExecutableDirectiveLocation\r\n *   - TypeSystemDirectiveLocation\r\n *\r\n * ExecutableDirectiveLocation : one of\r\n *   `QUERY`\r\n *   `MUTATION`\r\n *   `SUBSCRIPTION`\r\n *   `FIELD`\r\n *   `FRAGMENT_DEFINITION`\r\n *   `FRAGMENT_SPREAD`\r\n *   `INLINE_FRAGMENT`\r\n *\r\n * TypeSystemDirectiveLocation : one of\r\n *   `SCHEMA`\r\n *   `SCALAR`\r\n *   `OBJECT`\r\n *   `FIELD_DEFINITION`\r\n *   `ARGUMENT_DEFINITION`\r\n *   `INTERFACE`\r\n *   `UNION`\r\n *   `ENUM`\r\n *   `ENUM_VALUE`\r\n *   `INPUT_OBJECT`\r\n *   `INPUT_FIELD_DEFINITION`\r\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\r\n * Returns a location object, used to identify the place in\r\n * the source that created a given parsed object.\r\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\r\n * Determines if the next token is of a given kind\r\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\r\n * If the next token is of the given kind, return true after advancing\r\n * the lexer. Otherwise, do not change the parser state and return false.\r\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\r\n * If the next token is of the given kind, return that token after advancing\r\n * the lexer. Otherwise, do not change the parser state and throw an error.\r\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\r\n * If the next token is a keyword with the given value, return that token after\r\n * advancing the lexer. Otherwise, do not change the parser state and return\r\n * false.\r\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\r\n * Helper function for creating an error when an unexpected lexed token\r\n * is encountered.\r\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\r\n * Returns a possibly empty list of parse nodes, determined by\r\n * the parseFn. This list begins with a lex token of openKind\r\n * and ends with a lex token of closeKind. Advances the parser\r\n * to the next lex token after the closing token.\r\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\r\n * Returns a non-empty list of parse nodes, determined by\r\n * the parseFn. This list begins with a lex token of openKind\r\n * and ends with a lex token of closeKind. Advances the parser\r\n * to the next lex token after the closing token.\r\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/language/parser.mjs"],"names":["inspect","Source","syntaxError","createLexer","TokenKind","getTokenDesc","Kind","DirectiveLocation","parse","source","options","sourceObj","TypeError","concat","lexer","parseDocument","parseValue","expect","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","parseVariableDefinition","PAREN_R","experimentalVariableDefinitionDirectives","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","skip","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseConstValue","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","parseNamedType","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","push","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","match","atToken","openKind","parseFn","closeKind","nodes"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport inspect from '../jsutils/inspect';\r\nimport { Source } from './source';\r\nimport { syntaxError } from '../error';\r\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\r\nimport { Kind } from './kinds';\r\nimport { DirectiveLocation } from './directiveLocation';\r\n/**\r\n * Configuration options to control parser behavior\r\n */\r\n\r\n/**\r\n * Given a GraphQL source, parses it into a Document.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n */\r\nexport function parse(source, options) {\r\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\r\n\r\n  if (!(sourceObj instanceof Source)) {\r\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\r\n  }\r\n\r\n  var lexer = createLexer(sourceObj, options || {});\r\n  return parseDocument(lexer);\r\n}\r\n/**\r\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\r\n * that value.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Values directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: valueFromAST().\r\n */\r\n\r\nexport function parseValue(source, options) {\r\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\r\n  var lexer = createLexer(sourceObj, options || {});\r\n  expect(lexer, TokenKind.SOF);\r\n  var value = parseValueLiteral(lexer, false);\r\n  expect(lexer, TokenKind.EOF);\r\n  return value;\r\n}\r\n/**\r\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\r\n * that type.\r\n * Throws GraphQLError if a syntax error is encountered.\r\n *\r\n * This is useful within tools that operate upon GraphQL Types directly and\r\n * in isolation of complete GraphQL documents.\r\n *\r\n * Consider providing the results to the utility function: typeFromAST().\r\n */\r\n\r\nexport function parseType(source, options) {\r\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\r\n  var lexer = createLexer(sourceObj, options || {});\r\n  expect(lexer, TokenKind.SOF);\r\n  var type = parseTypeReference(lexer);\r\n  expect(lexer, TokenKind.EOF);\r\n  return type;\r\n}\r\n/**\r\n * Converts a name lex token into a name parse node.\r\n */\r\n\r\nfunction parseName(lexer) {\r\n  var token = expect(lexer, TokenKind.NAME);\r\n  return {\r\n    kind: Kind.NAME,\r\n    value: token.value,\r\n    loc: loc(lexer, token)\r\n  };\r\n} // Implements the parsing rules in the Document section.\r\n\r\n/**\r\n * Document : Definition+\r\n */\r\n\r\n\r\nfunction parseDocument(lexer) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.DOCUMENT,\r\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * Definition :\r\n *   - ExecutableDefinition\r\n *   - TypeSystemDefinition\r\n *   - TypeSystemExtension\r\n */\r\n\r\n\r\nfunction parseDefinition(lexer) {\r\n  if (peek(lexer, TokenKind.NAME)) {\r\n    switch (lexer.token.value) {\r\n      case 'query':\r\n      case 'mutation':\r\n      case 'subscription':\r\n      case 'fragment':\r\n        return parseExecutableDefinition(lexer);\r\n\r\n      case 'schema':\r\n      case 'scalar':\r\n      case 'type':\r\n      case 'interface':\r\n      case 'union':\r\n      case 'enum':\r\n      case 'input':\r\n      case 'directive':\r\n        return parseTypeSystemDefinition(lexer);\r\n\r\n      case 'extend':\r\n        return parseTypeSystemExtension(lexer);\r\n    }\r\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\r\n    return parseExecutableDefinition(lexer);\r\n  } else if (peekDescription(lexer)) {\r\n    return parseTypeSystemDefinition(lexer);\r\n  }\r\n\r\n  throw unexpected(lexer);\r\n}\r\n/**\r\n * ExecutableDefinition :\r\n *   - OperationDefinition\r\n *   - FragmentDefinition\r\n */\r\n\r\n\r\nfunction parseExecutableDefinition(lexer) {\r\n  if (peek(lexer, TokenKind.NAME)) {\r\n    switch (lexer.token.value) {\r\n      case 'query':\r\n      case 'mutation':\r\n      case 'subscription':\r\n        return parseOperationDefinition(lexer);\r\n\r\n      case 'fragment':\r\n        return parseFragmentDefinition(lexer);\r\n    }\r\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\r\n    return parseOperationDefinition(lexer);\r\n  }\r\n\r\n  throw unexpected(lexer);\r\n} // Implements the parsing rules in the Operations section.\r\n\r\n/**\r\n * OperationDefinition :\r\n *  - SelectionSet\r\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\r\n */\r\n\r\n\r\nfunction parseOperationDefinition(lexer) {\r\n  var start = lexer.token;\r\n\r\n  if (peek(lexer, TokenKind.BRACE_L)) {\r\n    return {\r\n      kind: Kind.OPERATION_DEFINITION,\r\n      operation: 'query',\r\n      name: undefined,\r\n      variableDefinitions: [],\r\n      directives: [],\r\n      selectionSet: parseSelectionSet(lexer),\r\n      loc: loc(lexer, start)\r\n    };\r\n  }\r\n\r\n  var operation = parseOperationType(lexer);\r\n  var name;\r\n\r\n  if (peek(lexer, TokenKind.NAME)) {\r\n    name = parseName(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.OPERATION_DEFINITION,\r\n    operation: operation,\r\n    name: name,\r\n    variableDefinitions: parseVariableDefinitions(lexer),\r\n    directives: parseDirectives(lexer, false),\r\n    selectionSet: parseSelectionSet(lexer),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * OperationType : one of query mutation subscription\r\n */\r\n\r\n\r\nfunction parseOperationType(lexer) {\r\n  var operationToken = expect(lexer, TokenKind.NAME);\r\n\r\n  switch (operationToken.value) {\r\n    case 'query':\r\n      return 'query';\r\n\r\n    case 'mutation':\r\n      return 'mutation';\r\n\r\n    case 'subscription':\r\n      return 'subscription';\r\n  }\r\n\r\n  throw unexpected(lexer, operationToken);\r\n}\r\n/**\r\n * VariableDefinitions : ( VariableDefinition+ )\r\n */\r\n\r\n\r\nfunction parseVariableDefinitions(lexer) {\r\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\r\n}\r\n/**\r\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\r\n */\r\n\r\n\r\nfunction parseVariableDefinition(lexer) {\r\n  var start = lexer.token;\r\n\r\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\r\n    return {\r\n      kind: Kind.VARIABLE_DEFINITION,\r\n      variable: parseVariable(lexer),\r\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\r\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\r\n      directives: parseDirectives(lexer, true),\r\n      loc: loc(lexer, start)\r\n    };\r\n  }\r\n\r\n  return {\r\n    kind: Kind.VARIABLE_DEFINITION,\r\n    variable: parseVariable(lexer),\r\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\r\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * Variable : $ Name\r\n */\r\n\r\n\r\nfunction parseVariable(lexer) {\r\n  var start = lexer.token;\r\n  expect(lexer, TokenKind.DOLLAR);\r\n  return {\r\n    kind: Kind.VARIABLE,\r\n    name: parseName(lexer),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * SelectionSet : { Selection+ }\r\n */\r\n\r\n\r\nfunction parseSelectionSet(lexer) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.SELECTION_SET,\r\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * Selection :\r\n *   - Field\r\n *   - FragmentSpread\r\n *   - InlineFragment\r\n */\r\n\r\n\r\nfunction parseSelection(lexer) {\r\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\r\n}\r\n/**\r\n * Field : Alias? Name Arguments? Directives? SelectionSet?\r\n *\r\n * Alias : Name :\r\n */\r\n\r\n\r\nfunction parseField(lexer) {\r\n  var start = lexer.token;\r\n  var nameOrAlias = parseName(lexer);\r\n  var alias;\r\n  var name;\r\n\r\n  if (skip(lexer, TokenKind.COLON)) {\r\n    alias = nameOrAlias;\r\n    name = parseName(lexer);\r\n  } else {\r\n    name = nameOrAlias;\r\n  }\r\n\r\n  return {\r\n    kind: Kind.FIELD,\r\n    alias: alias,\r\n    name: name,\r\n    arguments: parseArguments(lexer, false),\r\n    directives: parseDirectives(lexer, false),\r\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * Arguments[Const] : ( Argument[?Const]+ )\r\n */\r\n\r\n\r\nfunction parseArguments(lexer, isConst) {\r\n  var item = isConst ? parseConstArgument : parseArgument;\r\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\r\n}\r\n/**\r\n * Argument[Const] : Name : Value[?Const]\r\n */\r\n\r\n\r\nfunction parseArgument(lexer) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.ARGUMENT,\r\n    name: parseName(lexer),\r\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n\r\nfunction parseConstArgument(lexer) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.ARGUMENT,\r\n    name: parseName(lexer),\r\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\r\n    loc: loc(lexer, start)\r\n  };\r\n} // Implements the parsing rules in the Fragments section.\r\n\r\n/**\r\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\r\n *\r\n * FragmentSpread : ... FragmentName Directives?\r\n *\r\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\r\n */\r\n\r\n\r\nfunction parseFragment(lexer) {\r\n  var start = lexer.token;\r\n  expect(lexer, TokenKind.SPREAD);\r\n\r\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\r\n    return {\r\n      kind: Kind.FRAGMENT_SPREAD,\r\n      name: parseFragmentName(lexer),\r\n      directives: parseDirectives(lexer, false),\r\n      loc: loc(lexer, start)\r\n    };\r\n  }\r\n\r\n  var typeCondition;\r\n\r\n  if (lexer.token.value === 'on') {\r\n    lexer.advance();\r\n    typeCondition = parseNamedType(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.INLINE_FRAGMENT,\r\n    typeCondition: typeCondition,\r\n    directives: parseDirectives(lexer, false),\r\n    selectionSet: parseSelectionSet(lexer),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * FragmentDefinition :\r\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\r\n *\r\n * TypeCondition : NamedType\r\n */\r\n\r\n\r\nfunction parseFragmentDefinition(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\r\n  // the grammar of FragmentDefinition:\r\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\r\n\r\n  if (lexer.options.experimentalFragmentVariables) {\r\n    return {\r\n      kind: Kind.FRAGMENT_DEFINITION,\r\n      name: parseFragmentName(lexer),\r\n      variableDefinitions: parseVariableDefinitions(lexer),\r\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\r\n      directives: parseDirectives(lexer, false),\r\n      selectionSet: parseSelectionSet(lexer),\r\n      loc: loc(lexer, start)\r\n    };\r\n  }\r\n\r\n  return {\r\n    kind: Kind.FRAGMENT_DEFINITION,\r\n    name: parseFragmentName(lexer),\r\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\r\n    directives: parseDirectives(lexer, false),\r\n    selectionSet: parseSelectionSet(lexer),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * FragmentName : Name but not `on`\r\n */\r\n\r\n\r\nfunction parseFragmentName(lexer) {\r\n  if (lexer.token.value === 'on') {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return parseName(lexer);\r\n} // Implements the parsing rules in the Values section.\r\n\r\n/**\r\n * Value[Const] :\r\n *   - [~Const] Variable\r\n *   - IntValue\r\n *   - FloatValue\r\n *   - StringValue\r\n *   - BooleanValue\r\n *   - NullValue\r\n *   - EnumValue\r\n *   - ListValue[?Const]\r\n *   - ObjectValue[?Const]\r\n *\r\n * BooleanValue : one of `true` `false`\r\n *\r\n * NullValue : `null`\r\n *\r\n * EnumValue : Name but not `true`, `false` or `null`\r\n */\r\n\r\n\r\nfunction parseValueLiteral(lexer, isConst) {\r\n  var token = lexer.token;\r\n\r\n  switch (token.kind) {\r\n    case TokenKind.BRACKET_L:\r\n      return parseList(lexer, isConst);\r\n\r\n    case TokenKind.BRACE_L:\r\n      return parseObject(lexer, isConst);\r\n\r\n    case TokenKind.INT:\r\n      lexer.advance();\r\n      return {\r\n        kind: Kind.INT,\r\n        value: token.value,\r\n        loc: loc(lexer, token)\r\n      };\r\n\r\n    case TokenKind.FLOAT:\r\n      lexer.advance();\r\n      return {\r\n        kind: Kind.FLOAT,\r\n        value: token.value,\r\n        loc: loc(lexer, token)\r\n      };\r\n\r\n    case TokenKind.STRING:\r\n    case TokenKind.BLOCK_STRING:\r\n      return parseStringLiteral(lexer);\r\n\r\n    case TokenKind.NAME:\r\n      if (token.value === 'true' || token.value === 'false') {\r\n        lexer.advance();\r\n        return {\r\n          kind: Kind.BOOLEAN,\r\n          value: token.value === 'true',\r\n          loc: loc(lexer, token)\r\n        };\r\n      } else if (token.value === 'null') {\r\n        lexer.advance();\r\n        return {\r\n          kind: Kind.NULL,\r\n          loc: loc(lexer, token)\r\n        };\r\n      }\r\n\r\n      lexer.advance();\r\n      return {\r\n        kind: Kind.ENUM,\r\n        value: token.value,\r\n        loc: loc(lexer, token)\r\n      };\r\n\r\n    case TokenKind.DOLLAR:\r\n      if (!isConst) {\r\n        return parseVariable(lexer);\r\n      }\r\n\r\n      break;\r\n  }\r\n\r\n  throw unexpected(lexer);\r\n}\r\n\r\nfunction parseStringLiteral(lexer) {\r\n  var token = lexer.token;\r\n  lexer.advance();\r\n  return {\r\n    kind: Kind.STRING,\r\n    value: token.value,\r\n    block: token.kind === TokenKind.BLOCK_STRING,\r\n    loc: loc(lexer, token)\r\n  };\r\n}\r\n\r\nexport function parseConstValue(lexer) {\r\n  return parseValueLiteral(lexer, true);\r\n}\r\n\r\nfunction parseValueValue(lexer) {\r\n  return parseValueLiteral(lexer, false);\r\n}\r\n/**\r\n * ListValue[Const] :\r\n *   - [ ]\r\n *   - [ Value[?Const]+ ]\r\n */\r\n\r\n\r\nfunction parseList(lexer, isConst) {\r\n  var start = lexer.token;\r\n  var item = isConst ? parseConstValue : parseValueValue;\r\n  return {\r\n    kind: Kind.LIST,\r\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ObjectValue[Const] :\r\n *   - { }\r\n *   - { ObjectField[?Const]+ }\r\n */\r\n\r\n\r\nfunction parseObject(lexer, isConst) {\r\n  var start = lexer.token;\r\n  expect(lexer, TokenKind.BRACE_L);\r\n  var fields = [];\r\n\r\n  while (!skip(lexer, TokenKind.BRACE_R)) {\r\n    fields.push(parseObjectField(lexer, isConst));\r\n  }\r\n\r\n  return {\r\n    kind: Kind.OBJECT,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ObjectField[Const] : Name : Value[?Const]\r\n */\r\n\r\n\r\nfunction parseObjectField(lexer, isConst) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.OBJECT_FIELD,\r\n    name: parseName(lexer),\r\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\r\n    loc: loc(lexer, start)\r\n  };\r\n} // Implements the parsing rules in the Directives section.\r\n\r\n/**\r\n * Directives[Const] : Directive[?Const]+\r\n */\r\n\r\n\r\nfunction parseDirectives(lexer, isConst) {\r\n  var directives = [];\r\n\r\n  while (peek(lexer, TokenKind.AT)) {\r\n    directives.push(parseDirective(lexer, isConst));\r\n  }\r\n\r\n  return directives;\r\n}\r\n/**\r\n * Directive[Const] : @ Name Arguments[?Const]?\r\n */\r\n\r\n\r\nfunction parseDirective(lexer, isConst) {\r\n  var start = lexer.token;\r\n  expect(lexer, TokenKind.AT);\r\n  return {\r\n    kind: Kind.DIRECTIVE,\r\n    name: parseName(lexer),\r\n    arguments: parseArguments(lexer, isConst),\r\n    loc: loc(lexer, start)\r\n  };\r\n} // Implements the parsing rules in the Types section.\r\n\r\n/**\r\n * Type :\r\n *   - NamedType\r\n *   - ListType\r\n *   - NonNullType\r\n */\r\n\r\n\r\nexport function parseTypeReference(lexer) {\r\n  var start = lexer.token;\r\n  var type;\r\n\r\n  if (skip(lexer, TokenKind.BRACKET_L)) {\r\n    type = parseTypeReference(lexer);\r\n    expect(lexer, TokenKind.BRACKET_R);\r\n    type = {\r\n      kind: Kind.LIST_TYPE,\r\n      type: type,\r\n      loc: loc(lexer, start)\r\n    };\r\n  } else {\r\n    type = parseNamedType(lexer);\r\n  }\r\n\r\n  if (skip(lexer, TokenKind.BANG)) {\r\n    return {\r\n      kind: Kind.NON_NULL_TYPE,\r\n      type: type,\r\n      loc: loc(lexer, start)\r\n    };\r\n  }\r\n\r\n  return type;\r\n}\r\n/**\r\n * NamedType : Name\r\n */\r\n\r\nexport function parseNamedType(lexer) {\r\n  var start = lexer.token;\r\n  return {\r\n    kind: Kind.NAMED_TYPE,\r\n    name: parseName(lexer),\r\n    loc: loc(lexer, start)\r\n  };\r\n} // Implements the parsing rules in the Type Definition section.\r\n\r\n/**\r\n * TypeSystemDefinition :\r\n *   - SchemaDefinition\r\n *   - TypeDefinition\r\n *   - DirectiveDefinition\r\n *\r\n * TypeDefinition :\r\n *   - ScalarTypeDefinition\r\n *   - ObjectTypeDefinition\r\n *   - InterfaceTypeDefinition\r\n *   - UnionTypeDefinition\r\n *   - EnumTypeDefinition\r\n *   - InputObjectTypeDefinition\r\n */\r\n\r\nfunction parseTypeSystemDefinition(lexer) {\r\n  // Many definitions begin with a description and require a lookahead.\r\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\r\n\r\n  if (keywordToken.kind === TokenKind.NAME) {\r\n    switch (keywordToken.value) {\r\n      case 'schema':\r\n        return parseSchemaDefinition(lexer);\r\n\r\n      case 'scalar':\r\n        return parseScalarTypeDefinition(lexer);\r\n\r\n      case 'type':\r\n        return parseObjectTypeDefinition(lexer);\r\n\r\n      case 'interface':\r\n        return parseInterfaceTypeDefinition(lexer);\r\n\r\n      case 'union':\r\n        return parseUnionTypeDefinition(lexer);\r\n\r\n      case 'enum':\r\n        return parseEnumTypeDefinition(lexer);\r\n\r\n      case 'input':\r\n        return parseInputObjectTypeDefinition(lexer);\r\n\r\n      case 'directive':\r\n        return parseDirectiveDefinition(lexer);\r\n    }\r\n  }\r\n\r\n  throw unexpected(lexer, keywordToken);\r\n}\r\n\r\nfunction peekDescription(lexer) {\r\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\r\n}\r\n/**\r\n * Description : StringValue\r\n */\r\n\r\n\r\nfunction parseDescription(lexer) {\r\n  if (peekDescription(lexer)) {\r\n    return parseStringLiteral(lexer);\r\n  }\r\n}\r\n/**\r\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\r\n */\r\n\r\n\r\nfunction parseSchemaDefinition(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'schema');\r\n  var directives = parseDirectives(lexer, true);\r\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\r\n  return {\r\n    kind: Kind.SCHEMA_DEFINITION,\r\n    directives: directives,\r\n    operationTypes: operationTypes,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * OperationTypeDefinition : OperationType : NamedType\r\n */\r\n\r\n\r\nfunction parseOperationTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var operation = parseOperationType(lexer);\r\n  expect(lexer, TokenKind.COLON);\r\n  var type = parseNamedType(lexer);\r\n  return {\r\n    kind: Kind.OPERATION_TYPE_DEFINITION,\r\n    operation: operation,\r\n    type: type,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\r\n */\r\n\r\n\r\nfunction parseScalarTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'scalar');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  return {\r\n    kind: Kind.SCALAR_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ObjectTypeDefinition :\r\n *   Description?\r\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\r\n */\r\n\r\n\r\nfunction parseObjectTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'type');\r\n  var name = parseName(lexer);\r\n  var interfaces = parseImplementsInterfaces(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseFieldsDefinition(lexer);\r\n  return {\r\n    kind: Kind.OBJECT_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    interfaces: interfaces,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ImplementsInterfaces :\r\n *   - implements `&`? NamedType\r\n *   - ImplementsInterfaces & NamedType\r\n */\r\n\r\n\r\nfunction parseImplementsInterfaces(lexer) {\r\n  var types = [];\r\n\r\n  if (lexer.token.value === 'implements') {\r\n    lexer.advance(); // Optional leading ampersand\r\n\r\n    skip(lexer, TokenKind.AMP);\r\n\r\n    do {\r\n      types.push(parseNamedType(lexer));\r\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\r\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\r\n  }\r\n\r\n  return types;\r\n}\r\n/**\r\n * FieldsDefinition : { FieldDefinition+ }\r\n */\r\n\r\n\r\nfunction parseFieldsDefinition(lexer) {\r\n  // Legacy support for the SDL?\r\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\r\n    lexer.advance();\r\n    lexer.advance();\r\n    return [];\r\n  }\r\n\r\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\r\n}\r\n/**\r\n * FieldDefinition :\r\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\r\n */\r\n\r\n\r\nfunction parseFieldDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  var name = parseName(lexer);\r\n  var args = parseArgumentDefs(lexer);\r\n  expect(lexer, TokenKind.COLON);\r\n  var type = parseTypeReference(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  return {\r\n    kind: Kind.FIELD_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    arguments: args,\r\n    type: type,\r\n    directives: directives,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ArgumentsDefinition : ( InputValueDefinition+ )\r\n */\r\n\r\n\r\nfunction parseArgumentDefs(lexer) {\r\n  if (!peek(lexer, TokenKind.PAREN_L)) {\r\n    return [];\r\n  }\r\n\r\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\r\n}\r\n/**\r\n * InputValueDefinition :\r\n *   - Description? Name : Type DefaultValue? Directives[Const]?\r\n */\r\n\r\n\r\nfunction parseInputValueDef(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  var name = parseName(lexer);\r\n  expect(lexer, TokenKind.COLON);\r\n  var type = parseTypeReference(lexer);\r\n  var defaultValue;\r\n\r\n  if (skip(lexer, TokenKind.EQUALS)) {\r\n    defaultValue = parseConstValue(lexer);\r\n  }\r\n\r\n  var directives = parseDirectives(lexer, true);\r\n  return {\r\n    kind: Kind.INPUT_VALUE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    type: type,\r\n    defaultValue: defaultValue,\r\n    directives: directives,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * InterfaceTypeDefinition :\r\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\r\n */\r\n\r\n\r\nfunction parseInterfaceTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'interface');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseFieldsDefinition(lexer);\r\n  return {\r\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * UnionTypeDefinition :\r\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\r\n */\r\n\r\n\r\nfunction parseUnionTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'union');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var types = parseUnionMemberTypes(lexer);\r\n  return {\r\n    kind: Kind.UNION_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    types: types,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * UnionMemberTypes :\r\n *   - = `|`? NamedType\r\n *   - UnionMemberTypes | NamedType\r\n */\r\n\r\n\r\nfunction parseUnionMemberTypes(lexer) {\r\n  var types = [];\r\n\r\n  if (skip(lexer, TokenKind.EQUALS)) {\r\n    // Optional leading pipe\r\n    skip(lexer, TokenKind.PIPE);\r\n\r\n    do {\r\n      types.push(parseNamedType(lexer));\r\n    } while (skip(lexer, TokenKind.PIPE));\r\n  }\r\n\r\n  return types;\r\n}\r\n/**\r\n * EnumTypeDefinition :\r\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\r\n */\r\n\r\n\r\nfunction parseEnumTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'enum');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var values = parseEnumValuesDefinition(lexer);\r\n  return {\r\n    kind: Kind.ENUM_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    values: values,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * EnumValuesDefinition : { EnumValueDefinition+ }\r\n */\r\n\r\n\r\nfunction parseEnumValuesDefinition(lexer) {\r\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\r\n}\r\n/**\r\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\r\n *\r\n * EnumValue : Name\r\n */\r\n\r\n\r\nfunction parseEnumValueDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  return {\r\n    kind: Kind.ENUM_VALUE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * InputObjectTypeDefinition :\r\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\r\n */\r\n\r\n\r\nfunction parseInputObjectTypeDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'input');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseInputFieldsDefinition(lexer);\r\n  return {\r\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * InputFieldsDefinition : { InputValueDefinition+ }\r\n */\r\n\r\n\r\nfunction parseInputFieldsDefinition(lexer) {\r\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\r\n}\r\n/**\r\n * TypeSystemExtension :\r\n *   - SchemaExtension\r\n *   - TypeExtension\r\n *\r\n * TypeExtension :\r\n *   - ScalarTypeExtension\r\n *   - ObjectTypeExtension\r\n *   - InterfaceTypeExtension\r\n *   - UnionTypeExtension\r\n *   - EnumTypeExtension\r\n *   - InputObjectTypeDefinition\r\n */\r\n\r\n\r\nfunction parseTypeSystemExtension(lexer) {\r\n  var keywordToken = lexer.lookahead();\r\n\r\n  if (keywordToken.kind === TokenKind.NAME) {\r\n    switch (keywordToken.value) {\r\n      case 'schema':\r\n        return parseSchemaExtension(lexer);\r\n\r\n      case 'scalar':\r\n        return parseScalarTypeExtension(lexer);\r\n\r\n      case 'type':\r\n        return parseObjectTypeExtension(lexer);\r\n\r\n      case 'interface':\r\n        return parseInterfaceTypeExtension(lexer);\r\n\r\n      case 'union':\r\n        return parseUnionTypeExtension(lexer);\r\n\r\n      case 'enum':\r\n        return parseEnumTypeExtension(lexer);\r\n\r\n      case 'input':\r\n        return parseInputObjectTypeExtension(lexer);\r\n    }\r\n  }\r\n\r\n  throw unexpected(lexer, keywordToken);\r\n}\r\n/**\r\n * SchemaExtension :\r\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\r\n *  - extend schema Directives[Const]\r\n */\r\n\r\n\r\nfunction parseSchemaExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'schema');\r\n  var directives = parseDirectives(lexer, true);\r\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\r\n\r\n  if (directives.length === 0 && operationTypes.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.SCHEMA_EXTENSION,\r\n    directives: directives,\r\n    operationTypes: operationTypes,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ScalarTypeExtension :\r\n *   - extend scalar Name Directives[Const]\r\n */\r\n\r\n\r\nfunction parseScalarTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'scalar');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n\r\n  if (directives.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.SCALAR_TYPE_EXTENSION,\r\n    name: name,\r\n    directives: directives,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * ObjectTypeExtension :\r\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\r\n *  - extend type Name ImplementsInterfaces? Directives[Const]\r\n *  - extend type Name ImplementsInterfaces\r\n */\r\n\r\n\r\nfunction parseObjectTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'type');\r\n  var name = parseName(lexer);\r\n  var interfaces = parseImplementsInterfaces(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseFieldsDefinition(lexer);\r\n\r\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.OBJECT_TYPE_EXTENSION,\r\n    name: name,\r\n    interfaces: interfaces,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * InterfaceTypeExtension :\r\n *   - extend interface Name Directives[Const]? FieldsDefinition\r\n *   - extend interface Name Directives[Const]\r\n */\r\n\r\n\r\nfunction parseInterfaceTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'interface');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseFieldsDefinition(lexer);\r\n\r\n  if (directives.length === 0 && fields.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\r\n    name: name,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * UnionTypeExtension :\r\n *   - extend union Name Directives[Const]? UnionMemberTypes\r\n *   - extend union Name Directives[Const]\r\n */\r\n\r\n\r\nfunction parseUnionTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'union');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var types = parseUnionMemberTypes(lexer);\r\n\r\n  if (directives.length === 0 && types.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.UNION_TYPE_EXTENSION,\r\n    name: name,\r\n    directives: directives,\r\n    types: types,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * EnumTypeExtension :\r\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\r\n *   - extend enum Name Directives[Const]\r\n */\r\n\r\n\r\nfunction parseEnumTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'enum');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var values = parseEnumValuesDefinition(lexer);\r\n\r\n  if (directives.length === 0 && values.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.ENUM_TYPE_EXTENSION,\r\n    name: name,\r\n    directives: directives,\r\n    values: values,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * InputObjectTypeExtension :\r\n *   - extend input Name Directives[Const]? InputFieldsDefinition\r\n *   - extend input Name Directives[Const]\r\n */\r\n\r\n\r\nfunction parseInputObjectTypeExtension(lexer) {\r\n  var start = lexer.token;\r\n  expectKeyword(lexer, 'extend');\r\n  expectKeyword(lexer, 'input');\r\n  var name = parseName(lexer);\r\n  var directives = parseDirectives(lexer, true);\r\n  var fields = parseInputFieldsDefinition(lexer);\r\n\r\n  if (directives.length === 0 && fields.length === 0) {\r\n    throw unexpected(lexer);\r\n  }\r\n\r\n  return {\r\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\r\n    name: name,\r\n    directives: directives,\r\n    fields: fields,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * DirectiveDefinition :\r\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\r\n */\r\n\r\n\r\nfunction parseDirectiveDefinition(lexer) {\r\n  var start = lexer.token;\r\n  var description = parseDescription(lexer);\r\n  expectKeyword(lexer, 'directive');\r\n  expect(lexer, TokenKind.AT);\r\n  var name = parseName(lexer);\r\n  var args = parseArgumentDefs(lexer);\r\n  expectKeyword(lexer, 'on');\r\n  var locations = parseDirectiveLocations(lexer);\r\n  return {\r\n    kind: Kind.DIRECTIVE_DEFINITION,\r\n    description: description,\r\n    name: name,\r\n    arguments: args,\r\n    locations: locations,\r\n    loc: loc(lexer, start)\r\n  };\r\n}\r\n/**\r\n * DirectiveLocations :\r\n *   - `|`? DirectiveLocation\r\n *   - DirectiveLocations | DirectiveLocation\r\n */\r\n\r\n\r\nfunction parseDirectiveLocations(lexer) {\r\n  // Optional leading pipe\r\n  skip(lexer, TokenKind.PIPE);\r\n  var locations = [];\r\n\r\n  do {\r\n    locations.push(parseDirectiveLocation(lexer));\r\n  } while (skip(lexer, TokenKind.PIPE));\r\n\r\n  return locations;\r\n}\r\n/*\r\n * DirectiveLocation :\r\n *   - ExecutableDirectiveLocation\r\n *   - TypeSystemDirectiveLocation\r\n *\r\n * ExecutableDirectiveLocation : one of\r\n *   `QUERY`\r\n *   `MUTATION`\r\n *   `SUBSCRIPTION`\r\n *   `FIELD`\r\n *   `FRAGMENT_DEFINITION`\r\n *   `FRAGMENT_SPREAD`\r\n *   `INLINE_FRAGMENT`\r\n *\r\n * TypeSystemDirectiveLocation : one of\r\n *   `SCHEMA`\r\n *   `SCALAR`\r\n *   `OBJECT`\r\n *   `FIELD_DEFINITION`\r\n *   `ARGUMENT_DEFINITION`\r\n *   `INTERFACE`\r\n *   `UNION`\r\n *   `ENUM`\r\n *   `ENUM_VALUE`\r\n *   `INPUT_OBJECT`\r\n *   `INPUT_FIELD_DEFINITION`\r\n */\r\n\r\n\r\nfunction parseDirectiveLocation(lexer) {\r\n  var start = lexer.token;\r\n  var name = parseName(lexer);\r\n\r\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\r\n    return name;\r\n  }\r\n\r\n  throw unexpected(lexer, start);\r\n} // Core parsing utility functions\r\n\r\n/**\r\n * Returns a location object, used to identify the place in\r\n * the source that created a given parsed object.\r\n */\r\n\r\n\r\nfunction loc(lexer, startToken) {\r\n  if (!lexer.options.noLocation) {\r\n    return new Loc(startToken, lexer.lastToken, lexer.source);\r\n  }\r\n}\r\n\r\nfunction Loc(startToken, endToken, source) {\r\n  this.start = startToken.start;\r\n  this.end = endToken.end;\r\n  this.startToken = startToken;\r\n  this.endToken = endToken;\r\n  this.source = source;\r\n} // Print a simplified form when appearing in JSON/util.inspect.\r\n\r\n\r\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\r\n  return {\r\n    start: this.start,\r\n    end: this.end\r\n  };\r\n};\r\n/**\r\n * Determines if the next token is of a given kind\r\n */\r\n\r\n\r\nfunction peek(lexer, kind) {\r\n  return lexer.token.kind === kind;\r\n}\r\n/**\r\n * If the next token is of the given kind, return true after advancing\r\n * the lexer. Otherwise, do not change the parser state and return false.\r\n */\r\n\r\n\r\nfunction skip(lexer, kind) {\r\n  var match = lexer.token.kind === kind;\r\n\r\n  if (match) {\r\n    lexer.advance();\r\n  }\r\n\r\n  return match;\r\n}\r\n/**\r\n * If the next token is of the given kind, return that token after advancing\r\n * the lexer. Otherwise, do not change the parser state and throw an error.\r\n */\r\n\r\n\r\nfunction expect(lexer, kind) {\r\n  var token = lexer.token;\r\n\r\n  if (token.kind === kind) {\r\n    lexer.advance();\r\n    return token;\r\n  }\r\n\r\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\r\n}\r\n/**\r\n * If the next token is a keyword with the given value, return that token after\r\n * advancing the lexer. Otherwise, do not change the parser state and return\r\n * false.\r\n */\r\n\r\n\r\nfunction expectKeyword(lexer, value) {\r\n  var token = lexer.token;\r\n\r\n  if (token.kind === TokenKind.NAME && token.value === value) {\r\n    lexer.advance();\r\n    return token;\r\n  }\r\n\r\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\r\n}\r\n/**\r\n * Helper function for creating an error when an unexpected lexed token\r\n * is encountered.\r\n */\r\n\r\n\r\nfunction unexpected(lexer, atToken) {\r\n  var token = atToken || lexer.token;\r\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\r\n}\r\n/**\r\n * Returns a possibly empty list of parse nodes, determined by\r\n * the parseFn. This list begins with a lex token of openKind\r\n * and ends with a lex token of closeKind. Advances the parser\r\n * to the next lex token after the closing token.\r\n */\r\n\r\n\r\nfunction any(lexer, openKind, parseFn, closeKind) {\r\n  expect(lexer, openKind);\r\n  var nodes = [];\r\n\r\n  while (!skip(lexer, closeKind)) {\r\n    nodes.push(parseFn(lexer));\r\n  }\r\n\r\n  return nodes;\r\n}\r\n/**\r\n * Returns a non-empty list of parse nodes, determined by\r\n * the parseFn. This list begins with a lex token of openKind\r\n * and ends with a lex token of closeKind. Advances the parser\r\n * to the next lex token after the closing token.\r\n */\r\n\r\n\r\nfunction many(lexer, openKind, parseFn, closeKind) {\r\n  expect(lexer, openKind);\r\n  var nodes = [parseFn(lexer)];\r\n\r\n  while (!skip(lexer, closeKind)) {\r\n    nodes.push(parseFn(lexer));\r\n  }\r\n\r\n  return nodes;\r\n}"]},"metadata":{},"sourceType":"module"}