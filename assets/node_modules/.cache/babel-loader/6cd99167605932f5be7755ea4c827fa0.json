{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isExecutableDefinitionNode } from '../../language/predicates';\nexport function nonExecutableDefinitionMessage(defName) {\n  return \"The \".concat(defName, \" definition is not executable.\");\n}\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n */\n\nexport function ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = node.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var definition = _step.value;\n\n          if (!isExecutableDefinitionNode(definition)) {\n            context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : definition.name.value), [definition]));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/rules/ExecutableDefinitions.mjs"],"names":["GraphQLError","Kind","isExecutableDefinitionNode","nonExecutableDefinitionMessage","defName","concat","ExecutableDefinitions","context","Document","node","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","definitions","Symbol","iterator","_step","next","done","definition","value","reportError","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","err","return"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,0BAAT,QAA2C,2BAA3C;AACA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;AACtD,SAAO,OAAOC,MAAP,CAAcD,OAAd,EAAuB,gCAAvB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,SAAO;AACLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAChC,UAAIC,yBAAyB,GAAG,IAAhC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAIC,cAAc,GAAGC,SAArB;;AAEA,UAAI;AACF,aAAK,IAAIC,SAAS,GAAGL,IAAI,CAACM,WAAL,CAAiBC,MAAM,CAACC,QAAxB,GAAhB,EAAqDC,KAA1D,EAAiE,EAAER,yBAAyB,GAAG,CAACQ,KAAK,GAAGJ,SAAS,CAACK,IAAV,EAAT,EAA2BC,IAAzD,CAAjE,EAAiIV,yBAAyB,GAAG,IAA7J,EAAmK;AACjK,cAAIW,UAAU,GAAGH,KAAK,CAACI,KAAvB;;AAEA,cAAI,CAACpB,0BAA0B,CAACmB,UAAD,CAA/B,EAA6C;AAC3Cd,YAAAA,OAAO,CAACgB,WAAR,CAAoB,IAAIvB,YAAJ,CAAiBG,8BAA8B,CAACkB,UAAU,CAACG,IAAX,KAAoBvB,IAAI,CAACwB,iBAAzB,IAA8CJ,UAAU,CAACG,IAAX,KAAoBvB,IAAI,CAACyB,gBAAvE,GAA0F,QAA1F,GAAqGL,UAAU,CAACM,IAAX,CAAgBL,KAAtH,CAA/C,EAA6K,CAACD,UAAD,CAA7K,CAApB;AACD;AACF;AACF,OARD,CAQE,OAAOO,GAAP,EAAY;AACZjB,QAAAA,iBAAiB,GAAG,IAApB;AACAC,QAAAA,cAAc,GAAGgB,GAAjB;AACD,OAXD,SAWU;AACR,YAAI;AACF,cAAI,CAAClB,yBAAD,IAA8BI,SAAS,CAACe,MAAV,IAAoB,IAAtD,EAA4D;AAC1Df,YAAAA,SAAS,CAACe,MAAV;AACD;AACF,SAJD,SAIU;AACR,cAAIlB,iBAAJ,EAAuB;AACrB,kBAAMC,cAAN;AACD;AACF;AACF;;AAED,aAAO,KAAP;AACD;AA9BI,GAAP;AAgCD","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { GraphQLError } from '../../error/GraphQLError';\r\nimport { Kind } from '../../language/kinds';\r\nimport { isExecutableDefinitionNode } from '../../language/predicates';\r\nexport function nonExecutableDefinitionMessage(defName) {\r\n  return \"The \".concat(defName, \" definition is not executable.\");\r\n}\r\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n */\r\n\r\nexport function ExecutableDefinitions(context) {\r\n  return {\r\n    Document: function Document(node) {\r\n      var _iteratorNormalCompletion = true;\r\n      var _didIteratorError = false;\r\n      var _iteratorError = undefined;\r\n\r\n      try {\r\n        for (var _iterator = node.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\r\n          var definition = _step.value;\r\n\r\n          if (!isExecutableDefinitionNode(definition)) {\r\n            context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : definition.name.value), [definition]));\r\n          }\r\n        }\r\n      } catch (err) {\r\n        _didIteratorError = true;\r\n        _iteratorError = err;\r\n      } finally {\r\n        try {\r\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\r\n            _iterator.return();\r\n          }\r\n        } finally {\r\n          if (_didIteratorError) {\r\n            throw _iteratorError;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}