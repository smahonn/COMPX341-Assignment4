{"ast":null,"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { defaultConfig, getCurrTime } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Cache');\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\n\nvar BrowserStorageCache =\n/** @class */\nfunction (_super) {\n  __extends(BrowserStorageCache, _super);\n  /**\r\n   * initialize the cache\r\n   * @param config - the configuration of the cache\r\n   */\n\n\n  function BrowserStorageCache(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    _this.config.storage = cacheConfig.storage;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    return _this;\n  }\n  /**\r\n   * decrease current size of the cache\r\n   *\r\n   * @private\r\n   * @param amount - the amount of the cache size which needs to be decreased\r\n   */\n\n\n  BrowserStorageCache.prototype._decreaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n  };\n  /**\r\n   * increase current size of the cache\r\n   *\r\n   * @private\r\n   * @param amount - the amount of the cache szie which need to be increased\r\n   */\n\n\n  BrowserStorageCache.prototype._increaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n  };\n  /**\r\n   * update the visited time if item has been visited\r\n   *\r\n   * @private\r\n   * @param item - the item which need to be refreshed\r\n   * @param prefixedKey - the key of the item\r\n   *\r\n   * @return the refreshed item\r\n   */\n\n\n  BrowserStorageCache.prototype._refreshItem = function (item, prefixedKey) {\n    item.visitedTime = getCurrTime();\n    this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    return item;\n  };\n  /**\r\n   * check wether item is expired\r\n   *\r\n   * @private\r\n   * @param key - the key of the item\r\n   *\r\n   * @return true if the item is expired.\r\n   */\n\n\n  BrowserStorageCache.prototype._isExpired = function (key) {\n    var text = this.config.storage.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * delete item from cache\r\n   *\r\n   * @private\r\n   * @param prefixedKey - the key of the item\r\n   * @param size - optional, the byte size of the item\r\n   */\n\n\n  BrowserStorageCache.prototype._removeItem = function (prefixedKey, size) {\n    var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n\n    this._decreaseCurSizeInBytes(itemSize); // remove the cache item\n\n\n    this.config.storage.removeItem(prefixedKey);\n  };\n  /**\r\n   * put item into cache\r\n   *\r\n   * @private\r\n   * @param prefixedKey - the key of the item\r\n   * @param itemData - the value of the item\r\n   * @param itemSizeInBytes - the byte size of the item\r\n   */\n\n\n  BrowserStorageCache.prototype._setItem = function (prefixedKey, item) {\n    // update the cache size\n    this._increaseCurSizeInBytes(item.byteSize);\n\n    try {\n      this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    } catch (setItemErr) {\n      // if failed, we need to rollback the cache size\n      this._decreaseCurSizeInBytes(item.byteSize);\n\n      logger.error(\"Failed to set item \" + setItemErr);\n    }\n  };\n  /**\r\n   * total space needed when poping out items\r\n   *\r\n   * @private\r\n   * @param itemSize\r\n   *\r\n   * @return total space needed\r\n   */\n\n\n  BrowserStorageCache.prototype._sizeToPop = function (itemSize) {\n    var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n    var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\n  };\n  /**\r\n   * see whether cache is full\r\n   *\r\n   * @private\r\n   * @param itemSize\r\n   *\r\n   * @return true if cache is full\r\n   */\n\n\n  BrowserStorageCache.prototype._isCacheFull = function (itemSize) {\n    return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n  };\n  /**\r\n   * scan the storage and find out all the keys owned by this cache\r\n   * also clean the expired keys while scanning\r\n   *\r\n   * @private\r\n   *\r\n   * @return array of keys\r\n   */\n\n\n  BrowserStorageCache.prototype._findValidKeys = function () {\n    var keys = [];\n    var keyInCache = []; // get all keys in Storage\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      keyInCache.push(this.config.storage.key(i));\n    } // find those items which belong to our cache and also clean those expired items\n\n\n    for (var i = 0; i < keyInCache.length; i += 1) {\n      var key = keyInCache[i];\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        if (this._isExpired(key)) {\n          this._removeItem(key);\n        } else {\n          keys.push(key);\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\r\n   * get all the items we have, sort them by their priority,\r\n   * if priority is same, sort them by their last visited time\r\n   * pop out items from the low priority (5 is the lowest)\r\n   *\r\n   * @private\r\n   * @param keys - all the keys in this cache\r\n   * @param sizeToPop - the total size of the items which needed to be poped out\r\n   */\n\n\n  BrowserStorageCache.prototype._popOutItems = function (keys, sizeToPop) {\n    var items = [];\n    var remainedSize = sizeToPop; // get the items from Storage\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var val = this.config.storage.getItem(keys[i]);\n\n      if (val != null) {\n        var item = JSON.parse(val);\n        items.push(item);\n      }\n    } // first compare priority\n    // then compare visited time\n\n\n    items.sort(function (a, b) {\n      if (a.priority > b.priority) {\n        return -1;\n      } else if (a.priority < b.priority) {\n        return 1;\n      } else {\n        if (a.visitedTime < b.visitedTime) {\n          return -1;\n        } else return 1;\n      }\n    });\n\n    for (var i = 0; i < items.length; i += 1) {\n      // pop out items until we have enough room for new item\n      this._removeItem(items[i].key, items[i].byteSize);\n\n      remainedSize -= items[i].byteSize;\n\n      if (remainedSize <= 0) {\n        return;\n      }\n    }\n  };\n  /**\r\n   * Set item into cache. You can put number, string, boolean or object.\r\n   * The cache will first check whether has the same key.\r\n   * If it has, it will delete the old item and then put the new item in\r\n   * The cache will pop out items if it is full\r\n   * You can specify the cache item options. The cache will abort and output a warning:\r\n   * If the key is invalid\r\n   * If the size of the item exceeds itemMaxSize.\r\n   * If the value is undefined\r\n   * If incorrect cache item configuration\r\n   * If error happened with browser storage\r\n   *\r\n   * @param key - the key of the item\r\n   * @param value - the value of the item\r\n   * @param {Object} [options] - optional, the specified meta-data\r\n   */\n\n\n  BrowserStorageCache.prototype.setItem = function (key, value, options) {\n    logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n\n    try {\n      // first look into the storage, if it exists, delete it.\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      } // check whether the cache is full\n\n\n      if (this._isCacheFull(item.byteSize)) {\n        var validKeys = this._findValidKeys(); // check again and then pop out items\n\n\n        if (this._isCacheFull(item.byteSize)) {\n          var sizeToPop = this._sizeToPop(item.byteSize);\n\n          this._popOutItems(validKeys, sizeToPop);\n        }\n      } // put item in the cache\n      // may failed due to storage full\n\n\n      this._setItem(prefixedKey, item);\n    } catch (e) {\n      logger.warn(\"setItem failed! \" + e);\n    }\n  };\n  /**\r\n   * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n   * If you specified callback function in the options,\r\n   * then the function will be executed if no such item in the cache\r\n   * and finally put the return value into cache.\r\n   * Please make sure the callback function will return the value you want to put into the cache.\r\n   * The cache will abort output a warning:\r\n   * If the key is invalid\r\n   * If error happened with browser storage\r\n   *\r\n   * @param key - the key of the item\r\n   * @param {Object} [options] - the options of callback function\r\n   *\r\n   * @return - return the value of the item\r\n   */\n\n\n  BrowserStorageCache.prototype.getItem = function (key, options) {\n    logger.log(\"Get item: key is \" + key + \" with options \" + options);\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n\n    try {\n      ret = this.config.storage.getItem(prefixedKey);\n\n      if (ret != null) {\n        if (this._isExpired(prefixedKey)) {\n          // if expired, remove that item and return null\n          this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n\n          ret = null;\n        } else {\n          // if not expired, great, return the value and refresh it\n          var item = JSON.parse(ret);\n          item = this._refreshItem(item, prefixedKey);\n          return item.data;\n        }\n      }\n\n      if (options && options.callback !== undefined) {\n        var val = options.callback();\n\n        if (val !== null) {\n          this.setItem(key, val, options);\n        }\n\n        return val;\n      }\n\n      return null;\n    } catch (e) {\n      logger.warn(\"getItem failed! \" + e);\n      return null;\n    }\n  };\n  /**\r\n   * remove item from the cache\r\n   * The cache will abort output a warning:\r\n   * If error happened with browser storage\r\n   * @param key - the key of the item\r\n   */\n\n\n  BrowserStorageCache.prototype.removeItem = function (key) {\n    logger.log(\"Remove item: key is \" + key);\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      return;\n    }\n\n    try {\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      }\n    } catch (e) {\n      logger.warn(\"removeItem failed! \" + e);\n    }\n  };\n  /**\r\n   * clear the entire cache\r\n   * The cache will abort output a warning:\r\n   * If error happened with browser storage\r\n   */\n\n\n  BrowserStorageCache.prototype.clear = function () {\n    logger.log(\"Clear Cache\");\n    var keysToRemove = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0) {\n        keysToRemove.push(key);\n      }\n    }\n\n    try {\n      for (var i = 0; i < keysToRemove.length; i += 1) {\n        this.config.storage.removeItem(keysToRemove[i]);\n      }\n    } catch (e) {\n      logger.warn(\"clear failed! \" + e);\n    }\n  };\n  /**\r\n   * Return all the keys in the cache.\r\n   *\r\n   * @return - all keys in the cache\r\n   */\n\n\n  BrowserStorageCache.prototype.getAllKeys = function () {\n    var keys = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n\n    return keys;\n  };\n  /**\r\n   * return the current size of the cache\r\n   *\r\n   * @return - current size of the cache\r\n   */\n\n\n  BrowserStorageCache.prototype.getCacheCurSize = function () {\n    var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n\n    if (!ret) {\n      this.config.storage.setItem(this.cacheCurSizeKey, '0');\n      ret = '0';\n    }\n\n    return Number(ret);\n  };\n  /**\r\n   * Return a new instance of cache with customized configuration.\r\n   * @param config - the customized configuration\r\n   *\r\n   * @return - new instance of Cache\r\n   */\n\n\n  BrowserStorageCache.prototype.createInstance = function (config) {\n    if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n      logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n      config.keyPrefix = getCurrTime.toString();\n    }\n\n    return new BrowserStorageCache(config);\n  };\n\n  return BrowserStorageCache;\n}(StorageCache);\n\nexport { BrowserStorageCache };\nvar instance = new BrowserStorageCache();\nexport default instance;","map":{"version":3,"sources":["../src/BrowserStorageCache.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { defaultConfig, getCurrTime } from './Utils';\r\nimport StorageCache from './StorageCache';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\nvar logger = new Logger('Cache');\r\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\r\nvar BrowserStorageCache = /** @class */ (function (_super) {\r\n    __extends(BrowserStorageCache, _super);\r\n    /**\r\n     * initialize the cache\r\n     * @param config - the configuration of the cache\r\n     */\r\n    function BrowserStorageCache(config) {\r\n        var _this = this;\r\n        var cacheConfig = config\r\n            ? Object.assign({}, defaultConfig, config)\r\n            : defaultConfig;\r\n        _this = _super.call(this, cacheConfig) || this;\r\n        _this.config.storage = cacheConfig.storage;\r\n        _this.getItem = _this.getItem.bind(_this);\r\n        _this.setItem = _this.setItem.bind(_this);\r\n        _this.removeItem = _this.removeItem.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * decrease current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    BrowserStorageCache.prototype._decreaseCurSizeInBytes = function (amount) {\r\n        var curSize = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\r\n    };\r\n    /**\r\n     * increase current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    BrowserStorageCache.prototype._increaseCurSizeInBytes = function (amount) {\r\n        var curSize = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\r\n    };\r\n    /**\r\n     * update the visited time if item has been visited\r\n     *\r\n     * @private\r\n     * @param item - the item which need to be refreshed\r\n     * @param prefixedKey - the key of the item\r\n     *\r\n     * @return the refreshed item\r\n     */\r\n    BrowserStorageCache.prototype._refreshItem = function (item, prefixedKey) {\r\n        item.visitedTime = getCurrTime();\r\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        return item;\r\n    };\r\n    /**\r\n     * check wether item is expired\r\n     *\r\n     * @private\r\n     * @param key - the key of the item\r\n     *\r\n     * @return true if the item is expired.\r\n     */\r\n    BrowserStorageCache.prototype._isExpired = function (key) {\r\n        var text = this.config.storage.getItem(key);\r\n        var item = JSON.parse(text);\r\n        if (getCurrTime() >= item.expires) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * delete item from cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param size - optional, the byte size of the item\r\n     */\r\n    BrowserStorageCache.prototype._removeItem = function (prefixedKey, size) {\r\n        var itemSize = size\r\n            ? size\r\n            : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\r\n        this._decreaseCurSizeInBytes(itemSize);\r\n        // remove the cache item\r\n        this.config.storage.removeItem(prefixedKey);\r\n    };\r\n    /**\r\n     * put item into cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     */\r\n    BrowserStorageCache.prototype._setItem = function (prefixedKey, item) {\r\n        // update the cache size\r\n        this._increaseCurSizeInBytes(item.byteSize);\r\n        try {\r\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        }\r\n        catch (setItemErr) {\r\n            // if failed, we need to rollback the cache size\r\n            this._decreaseCurSizeInBytes(item.byteSize);\r\n            logger.error(\"Failed to set item \" + setItemErr);\r\n        }\r\n    };\r\n    /**\r\n     * total space needed when poping out items\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return total space needed\r\n     */\r\n    BrowserStorageCache.prototype._sizeToPop = function (itemSize) {\r\n        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\r\n        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\r\n        return spaceItemNeed > cacheThresholdSpace\r\n            ? spaceItemNeed\r\n            : cacheThresholdSpace;\r\n    };\r\n    /**\r\n     * see whether cache is full\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return true if cache is full\r\n     */\r\n    BrowserStorageCache.prototype._isCacheFull = function (itemSize) {\r\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\r\n    };\r\n    /**\r\n     * scan the storage and find out all the keys owned by this cache\r\n     * also clean the expired keys while scanning\r\n     *\r\n     * @private\r\n     *\r\n     * @return array of keys\r\n     */\r\n    BrowserStorageCache.prototype._findValidKeys = function () {\r\n        var keys = [];\r\n        var keyInCache = [];\r\n        // get all keys in Storage\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            keyInCache.push(this.config.storage.key(i));\r\n        }\r\n        // find those items which belong to our cache and also clean those expired items\r\n        for (var i = 0; i < keyInCache.length; i += 1) {\r\n            var key = keyInCache[i];\r\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\r\n                key !== this.cacheCurSizeKey) {\r\n                if (this._isExpired(key)) {\r\n                    this._removeItem(key);\r\n                }\r\n                else {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     * get all the items we have, sort them by their priority,\r\n     * if priority is same, sort them by their last visited time\r\n     * pop out items from the low priority (5 is the lowest)\r\n     *\r\n     * @private\r\n     * @param keys - all the keys in this cache\r\n     * @param sizeToPop - the total size of the items which needed to be poped out\r\n     */\r\n    BrowserStorageCache.prototype._popOutItems = function (keys, sizeToPop) {\r\n        var items = [];\r\n        var remainedSize = sizeToPop;\r\n        // get the items from Storage\r\n        for (var i = 0; i < keys.length; i += 1) {\r\n            var val = this.config.storage.getItem(keys[i]);\r\n            if (val != null) {\r\n                var item = JSON.parse(val);\r\n                items.push(item);\r\n            }\r\n        }\r\n        // first compare priority\r\n        // then compare visited time\r\n        items.sort(function (a, b) {\r\n            if (a.priority > b.priority) {\r\n                return -1;\r\n            }\r\n            else if (a.priority < b.priority) {\r\n                return 1;\r\n            }\r\n            else {\r\n                if (a.visitedTime < b.visitedTime) {\r\n                    return -1;\r\n                }\r\n                else\r\n                    return 1;\r\n            }\r\n        });\r\n        for (var i = 0; i < items.length; i += 1) {\r\n            // pop out items until we have enough room for new item\r\n            this._removeItem(items[i].key, items[i].byteSize);\r\n            remainedSize -= items[i].byteSize;\r\n            if (remainedSize <= 0) {\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param {Object} [options] - optional, the specified meta-data\r\n     */\r\n    BrowserStorageCache.prototype.setItem = function (key, value, options) {\r\n        logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        // invalid keys\r\n        if (prefixedKey === this.config.keyPrefix ||\r\n            prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return;\r\n        }\r\n        if (typeof value === 'undefined') {\r\n            logger.warn(\"The value of item should not be undefined!\");\r\n            return;\r\n        }\r\n        var cacheItemOptions = {\r\n            priority: options && options.priority !== undefined\r\n                ? options.priority\r\n                : this.config.defaultPriority,\r\n            expires: options && options.expires !== undefined\r\n                ? options.expires\r\n                : this.config.defaultTTL + getCurrTime(),\r\n        };\r\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\r\n            return;\r\n        }\r\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\r\n        // check wether this item is too big;\r\n        if (item.byteSize > this.config.itemMaxSize) {\r\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\r\n            return;\r\n        }\r\n        try {\r\n            // first look into the storage, if it exists, delete it.\r\n            var val = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n            // check whether the cache is full\r\n            if (this._isCacheFull(item.byteSize)) {\r\n                var validKeys = this._findValidKeys();\r\n                // check again and then pop out items\r\n                if (this._isCacheFull(item.byteSize)) {\r\n                    var sizeToPop = this._sizeToPop(item.byteSize);\r\n                    this._popOutItems(validKeys, sizeToPop);\r\n                }\r\n            }\r\n            // put item in the cache\r\n            // may failed due to storage full\r\n            this._setItem(prefixedKey, item);\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"setItem failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n     * If you specified callback function in the options,\r\n     * then the function will be executed if no such item in the cache\r\n     * and finally put the return value into cache.\r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param {Object} [options] - the options of callback function\r\n     *\r\n     * @return - return the value of the item\r\n     */\r\n    BrowserStorageCache.prototype.getItem = function (key, options) {\r\n        logger.log(\"Get item: key is \" + key + \" with options \" + options);\r\n        var ret = null;\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        if (prefixedKey === this.config.keyPrefix ||\r\n            prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return null;\r\n        }\r\n        try {\r\n            ret = this.config.storage.getItem(prefixedKey);\r\n            if (ret != null) {\r\n                if (this._isExpired(prefixedKey)) {\r\n                    // if expired, remove that item and return null\r\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\r\n                    ret = null;\r\n                }\r\n                else {\r\n                    // if not expired, great, return the value and refresh it\r\n                    var item = JSON.parse(ret);\r\n                    item = this._refreshItem(item, prefixedKey);\r\n                    return item.data;\r\n                }\r\n            }\r\n            if (options && options.callback !== undefined) {\r\n                var val = options.callback();\r\n                if (val !== null) {\r\n                    this.setItem(key, val, options);\r\n                }\r\n                return val;\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"getItem failed! \" + e);\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * remove item from the cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     * @param key - the key of the item\r\n     */\r\n    BrowserStorageCache.prototype.removeItem = function (key) {\r\n        logger.log(\"Remove item: key is \" + key);\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        if (prefixedKey === this.config.keyPrefix ||\r\n            prefixedKey === this.cacheCurSizeKey) {\r\n            return;\r\n        }\r\n        try {\r\n            var val = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"removeItem failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * clear the entire cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     */\r\n    BrowserStorageCache.prototype.clear = function () {\r\n        logger.log(\"Clear Cache\");\r\n        var keysToRemove = [];\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            var key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0) {\r\n                keysToRemove.push(key);\r\n            }\r\n        }\r\n        try {\r\n            for (var i = 0; i < keysToRemove.length; i += 1) {\r\n                this.config.storage.removeItem(keysToRemove[i]);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"clear failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Return all the keys in the cache.\r\n     *\r\n     * @return - all keys in the cache\r\n     */\r\n    BrowserStorageCache.prototype.getAllKeys = function () {\r\n        var keys = [];\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            var key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\r\n                key !== this.cacheCurSizeKey) {\r\n                keys.push(key.substring(this.config.keyPrefix.length));\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     * return the current size of the cache\r\n     *\r\n     * @return - current size of the cache\r\n     */\r\n    BrowserStorageCache.prototype.getCacheCurSize = function () {\r\n        var ret = this.config.storage.getItem(this.cacheCurSizeKey);\r\n        if (!ret) {\r\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\r\n            ret = '0';\r\n        }\r\n        return Number(ret);\r\n    };\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     *\r\n     * @return - new instance of Cache\r\n     */\r\n    BrowserStorageCache.prototype.createInstance = function (config) {\r\n        if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\r\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\r\n            config.keyPrefix = getCurrTime.toString();\r\n        }\r\n        return new BrowserStorageCache(config);\r\n    };\r\n    return BrowserStorageCache;\r\n}(StorageCache));\r\nexport { BrowserStorageCache };\r\nvar instance = new BrowserStorageCache();\r\nexport default instance;\r\n//# sourceMappingURL=BrowserStorageCache.js.map"]},"metadata":{},"sourceType":"module"}