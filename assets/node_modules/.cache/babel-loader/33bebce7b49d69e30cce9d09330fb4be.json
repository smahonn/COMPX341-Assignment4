{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { getNamedType } from '../type/definition';\nimport { TypeInfo } from './TypeInfo';\n/**\r\n * A validation rule which reports deprecated usages.\r\n *\r\n * Returns a list of GraphQLError instances describing each deprecated use.\r\n */\n\nexport function findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new TypeInfo(schema);\n  visit(ast, visitWithTypeInfo(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n\n      if (enumVal && enumVal.isDeprecated) {\n        var type = getNamedType(typeInfo.getInputType());\n\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new GraphQLError(\"The enum value \".concat(type.name, \".\").concat(enumVal.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n  return errors;\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/findDeprecatedUsages.mjs"],"names":["GraphQLError","visit","visitWithTypeInfo","getNamedType","TypeInfo","findDeprecatedUsages","schema","ast","errors","typeInfo","Field","node","fieldDef","getFieldDef","isDeprecated","parentType","getParentType","reason","deprecationReason","push","concat","name","EnumValue","enumVal","getEnumValue","type","getInputType"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,qBAAzC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,GAAtC,EAA2C;AAChD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,IAAIL,QAAJ,CAAaE,MAAb,CAAf;AACAL,EAAAA,KAAK,CAACM,GAAD,EAAML,iBAAiB,CAACO,QAAD,EAAW;AACrCC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIC,QAAQ,GAAGH,QAAQ,CAACI,WAAT,EAAf;;AAEA,UAAID,QAAQ,IAAIA,QAAQ,CAACE,YAAzB,EAAuC;AACrC,YAAIC,UAAU,GAAGN,QAAQ,CAACO,aAAT,EAAjB;;AAEA,YAAID,UAAJ,EAAgB;AACd,cAAIE,MAAM,GAAGL,QAAQ,CAACM,iBAAtB;AACAV,UAAAA,MAAM,CAACW,IAAP,CAAY,IAAInB,YAAJ,CAAiB,aAAaoB,MAAb,CAAoBL,UAAU,CAACM,IAA/B,EAAqC,GAArC,EAA0CD,MAA1C,CAAiDR,QAAQ,CAACS,IAA1D,EAAgE,iBAAhE,KAAsFJ,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAA9G,CAAjB,EAAoI,CAACN,IAAD,CAApI,CAAZ;AACD;AACF;AACF,KAZoC;AAarCW,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBX,IAAnB,EAAyB;AAClC,UAAIY,OAAO,GAAGd,QAAQ,CAACe,YAAT,EAAd;;AAEA,UAAID,OAAO,IAAIA,OAAO,CAACT,YAAvB,EAAqC;AACnC,YAAIW,IAAI,GAAGtB,YAAY,CAACM,QAAQ,CAACiB,YAAT,EAAD,CAAvB;;AAEA,YAAID,IAAJ,EAAU;AACR,cAAIR,MAAM,GAAGM,OAAO,CAACL,iBAArB;AACAV,UAAAA,MAAM,CAACW,IAAP,CAAY,IAAInB,YAAJ,CAAiB,kBAAkBoB,MAAlB,CAAyBK,IAAI,CAACJ,IAA9B,EAAoC,GAApC,EAAyCD,MAAzC,CAAgDG,OAAO,CAACF,IAAxD,EAA8D,iBAA9D,KAAoFJ,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAA5G,CAAjB,EAAkI,CAACN,IAAD,CAAlI,CAAZ;AACD;AACF;AACF;AAxBoC,GAAX,CAAvB,CAAL;AA0BA,SAAOH,MAAP;AACD","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { GraphQLError } from '../error/GraphQLError';\r\nimport { visit, visitWithTypeInfo } from '../language/visitor';\r\nimport { getNamedType } from '../type/definition';\r\nimport { TypeInfo } from './TypeInfo';\r\n/**\r\n * A validation rule which reports deprecated usages.\r\n *\r\n * Returns a list of GraphQLError instances describing each deprecated use.\r\n */\r\n\r\nexport function findDeprecatedUsages(schema, ast) {\r\n  var errors = [];\r\n  var typeInfo = new TypeInfo(schema);\r\n  visit(ast, visitWithTypeInfo(typeInfo, {\r\n    Field: function Field(node) {\r\n      var fieldDef = typeInfo.getFieldDef();\r\n\r\n      if (fieldDef && fieldDef.isDeprecated) {\r\n        var parentType = typeInfo.getParentType();\r\n\r\n        if (parentType) {\r\n          var reason = fieldDef.deprecationReason;\r\n          errors.push(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\r\n        }\r\n      }\r\n    },\r\n    EnumValue: function EnumValue(node) {\r\n      var enumVal = typeInfo.getEnumValue();\r\n\r\n      if (enumVal && enumVal.isDeprecated) {\r\n        var type = getNamedType(typeInfo.getInputType());\r\n\r\n        if (type) {\r\n          var reason = enumVal.deprecationReason;\r\n          errors.push(new GraphQLError(\"The enum value \".concat(type.name, \".\").concat(enumVal.name, \" is deprecated.\") + (reason ? ' ' + reason : ''), [node]));\r\n        }\r\n      }\r\n    }\r\n  }));\r\n  return errors;\r\n}"]},"metadata":{},"sourceType":"module"}