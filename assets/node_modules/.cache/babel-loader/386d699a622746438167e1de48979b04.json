{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput } from '../Predictions';\nimport { AbstractPredictionsProvider } from '.';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractConvertPredictionsProvider');\n\nvar AbstractConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AbstractConvertPredictionsProvider, _super);\n\n  function AbstractConvertPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AbstractConvertPredictionsProvider.prototype.getCategory = function () {\n    return 'Convert';\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convert = function (input) {\n    if (isTranslateTextInput(input)) {\n      logger.debug('translateText');\n      return this.translateText(input);\n    } else if (isTextToSpeechInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertTextToSpeech(input);\n    } else if (isSpeechToTextInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertSpeechToText(input);\n    }\n  };\n\n  AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\n    throw new Error('convertText is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\n    throw new Error('convertTextToSpeech is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\n    throw new Error('convertSpeechToText is not implemented by this provider');\n  };\n\n  return AbstractConvertPredictionsProvider;\n}(AbstractPredictionsProvider);\n\nexport { AbstractConvertPredictionsProvider };","map":{"version":3,"sources":["../../../src/types/Providers/AbstractConvertPredictionsProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAIC,oBAJD,EAKC,mBALD,EAMC,mBAND,QAUO,gBAVP;AAWA,SAAS,2BAAT,QAA4C,GAA5C;AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,mBAAxC;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,oCAAX,CAAf;;AAEA,IAAA,kCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiE,EAAA,SAAA,CAAA,kCAAA,EAAA,MAAA,CAAA;;AAAjE,WAAA,kCAAA,GAAA;;AAqCC;;AApCA,EAAA,kCAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACC,WAAO,SAAP;AACA,GAFD;;AAIA,EAAA,kCAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UACC,KADD,EACkE;AAEjE,QAAI,oBAAoB,CAAC,KAAD,CAAxB,EAAiC;AAChC,MAAA,MAAM,CAAC,KAAP,CAAa,eAAb;AACA,aAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP;AACA,KAHD,MAGO,IAAI,mBAAmB,CAAC,KAAD,CAAvB,EAAgC;AACtC,MAAA,MAAM,CAAC,KAAP,CAAa,cAAb;AACA,aAAO,KAAK,mBAAL,CAAyB,KAAzB,CAAP;AACA,KAHM,MAGA,IAAI,mBAAmB,CAAC,KAAD,CAAvB,EAAgC;AACtC,MAAA,MAAM,CAAC,KAAP,CAAa,cAAb;AACA,aAAO,KAAK,mBAAL,CAAyB,KAAzB,CAAP;AACA;AACD,GAbD;;AAeU,EAAA,kCAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UACC,kBADD,EACuC;AAEtC,UAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACA,GAJS;;AAMA,EAAA,kCAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,UACC,iBADD,EACqC;AAEpC,UAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACA,GAJS;;AAMA,EAAA,kCAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,UACC,iBADD,EACqC;AAEpC,UAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACA,GAJS;;AAKX,SAAA,kCAAA;AAAC,CArCD,CAAiE,2BAAjE,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput, } from '../Predictions';\r\nimport { AbstractPredictionsProvider } from '.';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\nvar logger = new Logger('AbstractConvertPredictionsProvider');\r\nvar AbstractConvertPredictionsProvider = /** @class */ (function (_super) {\r\n    __extends(AbstractConvertPredictionsProvider, _super);\r\n    function AbstractConvertPredictionsProvider() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AbstractConvertPredictionsProvider.prototype.getCategory = function () {\r\n        return 'Convert';\r\n    };\r\n    AbstractConvertPredictionsProvider.prototype.convert = function (input) {\r\n        if (isTranslateTextInput(input)) {\r\n            logger.debug('translateText');\r\n            return this.translateText(input);\r\n        }\r\n        else if (isTextToSpeechInput(input)) {\r\n            logger.debug('textToSpeech');\r\n            return this.convertTextToSpeech(input);\r\n        }\r\n        else if (isSpeechToTextInput(input)) {\r\n            logger.debug('textToSpeech');\r\n            return this.convertSpeechToText(input);\r\n        }\r\n    };\r\n    AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\r\n        throw new Error('convertText is not implemented by this provider');\r\n    };\r\n    AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\r\n        throw new Error('convertTextToSpeech is not implemented by this provider');\r\n    };\r\n    AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\r\n        throw new Error('convertSpeechToText is not implemented by this provider');\r\n    };\r\n    return AbstractConvertPredictionsProvider;\r\n}(AbstractPredictionsProvider));\r\nexport { AbstractConvertPredictionsProvider };\r\n//# sourceMappingURL=AbstractConvertPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}