{"ast":null,"code":"/*\r\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.aws_lex = new LexRuntime({\n      region: _this._config.region\n    });\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n    var _this = this;\n\n    if (err) {\n      rej(err);\n      return;\n    } else {\n      // Check if state is fulfilled to resolve onFullfilment promise\n      logger.debug('postContent state', data.dialogState);\n\n      if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname](null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete(null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n      }\n\n      res(data);\n\n      if (data.dialogState === 'Failed') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname]('Bot conversation failed');\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete('Bot conversation failed');\n          }, 0);\n        }\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, params;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._config[botname]) {\n                return [2\n                /*return*/\n                , rej('Bot ' + botname + ' does not exist')];\n              }\n\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _a.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              AWS.config.update({\n                credentials: credentials\n              });\n              this.aws_lex = new LexRuntime({\n                region: this._config[botname].region,\n                credentials: credentials\n              });\n\n              if (typeof message === 'string') {\n                params = {\n                  botAlias: this._config[botname].alias,\n                  botName: botname,\n                  inputText: message,\n                  userId: credentials.identityId\n                };\n                logger.debug('postText to lex', message);\n                this.aws_lex.postText(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              } else {\n                if (message.options['messageType'] === 'voice') {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'audio/x-l16; sample-rate=16000',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                } else {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'text/plain; charset=utf-8',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                }\n\n                logger.debug('postContent to lex', message);\n                this.aws_lex.postContent(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\r\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\r\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\r\nvar logger = new Logger('AWSLexProvider');\r\nvar AWSLexProvider = /** @class */ (function (_super) {\r\n    __extends(AWSLexProvider, _super);\r\n    function AWSLexProvider(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, options) || this;\r\n        _this.aws_lex = new LexRuntime({ region: _this._config.region });\r\n        _this._botsCompleteCallback = {};\r\n        return _this;\r\n    }\r\n    AWSLexProvider.prototype.getProviderName = function () {\r\n        return 'AWSLexProvider';\r\n    };\r\n    AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\r\n        var _this = this;\r\n        if (err) {\r\n            rej(err);\r\n            return;\r\n        }\r\n        else {\r\n            // Check if state is fulfilled to resolve onFullfilment promise\r\n            logger.debug('postContent state', data.dialogState);\r\n            if (data.dialogState === 'ReadyForFulfillment' ||\r\n                data.dialogState === 'Fulfilled') {\r\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\r\n                    setTimeout(function () {\r\n                        return _this._botsCompleteCallback[botname](null, { slots: data.slots });\r\n                    }, 0);\r\n                }\r\n                if (this._config &&\r\n                    typeof this._config[botname].onComplete === 'function') {\r\n                    setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);\r\n                }\r\n            }\r\n            res(data);\r\n            if (data.dialogState === 'Failed') {\r\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\r\n                    setTimeout(function () {\r\n                        return _this._botsCompleteCallback[botname]('Bot conversation failed');\r\n                    }, 0);\r\n                }\r\n                if (this._config &&\r\n                    typeof this._config[botname].onComplete === 'function') {\r\n                    setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\r\n        var _this = this;\r\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\r\n            var credentials, params;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this._config[botname]) {\r\n                            return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\r\n                        }\r\n                        return [4 /*yield*/, Credentials.get()];\r\n                    case 1:\r\n                        credentials = _a.sent();\r\n                        if (!credentials) {\r\n                            return [2 /*return*/, rej('No credentials')];\r\n                        }\r\n                        AWS.config.update({\r\n                            credentials: credentials,\r\n                        });\r\n                        this.aws_lex = new LexRuntime({\r\n                            region: this._config[botname].region,\r\n                            credentials: credentials,\r\n                        });\r\n                        if (typeof message === 'string') {\r\n                            params = {\r\n                                botAlias: this._config[botname].alias,\r\n                                botName: botname,\r\n                                inputText: message,\r\n                                userId: credentials.identityId,\r\n                            };\r\n                            logger.debug('postText to lex', message);\r\n                            this.aws_lex.postText(params, function (err, data) {\r\n                                _this.responseCallback(err, data, res, rej, botname);\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (message.options['messageType'] === 'voice') {\r\n                                params = {\r\n                                    botAlias: this._config[botname].alias,\r\n                                    botName: botname,\r\n                                    contentType: 'audio/x-l16; sample-rate=16000',\r\n                                    inputStream: message.content,\r\n                                    userId: credentials.identityId,\r\n                                    accept: 'audio/mpeg',\r\n                                };\r\n                            }\r\n                            else {\r\n                                params = {\r\n                                    botAlias: this._config[botname].alias,\r\n                                    botName: botname,\r\n                                    contentType: 'text/plain; charset=utf-8',\r\n                                    inputStream: message.content,\r\n                                    userId: credentials.identityId,\r\n                                    accept: 'audio/mpeg',\r\n                                };\r\n                            }\r\n                            logger.debug('postContent to lex', message);\r\n                            this.aws_lex.postContent(params, function (err, data) {\r\n                                _this.responseCallback(err, data, res, rej, botname);\r\n                            });\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\r\n        if (!this._config[botname]) {\r\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\r\n        }\r\n        this._botsCompleteCallback[botname] = callback;\r\n    };\r\n    return AWSLexProvider;\r\n}(AbstractInteractionsProvider));\r\nexport { AWSLexProvider };\r\n//# sourceMappingURL=AWSLexProvider.js.map"]},"metadata":{},"sourceType":"module"}