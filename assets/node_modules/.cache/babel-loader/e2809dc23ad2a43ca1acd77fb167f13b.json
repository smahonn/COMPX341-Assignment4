{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\r\n * No unused variables\r\n *\r\n * A GraphQL operation is only valid if all variables defined by an operation\r\n * are used, either directly or within a spread fragment.\r\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        for (var _i = 0; _i < variableDefs.length; _i++) {\n          var variableDef = variableDefs[_i];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/rules/NoUnusedVariables.mjs"],"names":["GraphQLError","unusedVariableMessage","varName","opName","concat","NoUnusedVariables","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","name","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref2","node","err","return","_i","length","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { GraphQLError } from '../../error/GraphQLError';\r\nexport function unusedVariableMessage(varName, opName) {\r\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\r\n}\r\n/**\r\n * No unused variables\r\n *\r\n * A GraphQL operation is only valid if all variables defined by an operation\r\n * are used, either directly or within a spread fragment.\r\n */\r\n\r\nexport function NoUnusedVariables(context) {\r\n  var variableDefs = [];\r\n  return {\r\n    OperationDefinition: {\r\n      enter: function enter() {\r\n        variableDefs = [];\r\n      },\r\n      leave: function leave(operation) {\r\n        var variableNameUsed = Object.create(null);\r\n        var usages = context.getRecursiveVariableUsages(operation);\r\n        var opName = operation.name ? operation.name.value : null;\r\n        var _iteratorNormalCompletion = true;\r\n        var _didIteratorError = false;\r\n        var _iteratorError = undefined;\r\n\r\n        try {\r\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\r\n            var _ref2 = _step.value;\r\n            var node = _ref2.node;\r\n            variableNameUsed[node.name.value] = true;\r\n          }\r\n        } catch (err) {\r\n          _didIteratorError = true;\r\n          _iteratorError = err;\r\n        } finally {\r\n          try {\r\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\r\n              _iterator.return();\r\n            }\r\n          } finally {\r\n            if (_didIteratorError) {\r\n              throw _iteratorError;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (var _i = 0; _i < variableDefs.length; _i++) {\r\n          var variableDef = variableDefs[_i];\r\n          var variableName = variableDef.variable.name.value;\r\n\r\n          if (variableNameUsed[variableName] !== true) {\r\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\r\n          }\r\n        }\r\n      }\r\n    },\r\n    VariableDefinition: function VariableDefinition(def) {\r\n      variableDefs.push(def);\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}