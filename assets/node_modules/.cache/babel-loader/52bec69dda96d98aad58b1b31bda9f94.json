{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.STS.prototype, {\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  }\n});","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/services/sts.js"],"names":["AWS","require","util","update","STS","prototype","credentialsFrom","data","credentials","TemporaryCredentials","expired","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","assumeRoleWithWebIdentity","params","callback","makeUnauthenticatedRequest","assumeRoleWithSAML"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEAD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBH,GAAG,CAACI,GAAJ,CAAQC,SAAxB,EAAmC;AACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,WAA/B,EAA4C;AAC3D,QAAI,CAACD,IAAL,EAAW,OAAO,IAAP;AACX,QAAI,CAACC,WAAL,EAAkBA,WAAW,GAAG,IAAIR,GAAG,CAACS,oBAAR,EAAd;AAClBD,IAAAA,WAAW,CAACE,OAAZ,GAAsB,KAAtB;AACAF,IAAAA,WAAW,CAACG,WAAZ,GAA0BJ,IAAI,CAACK,WAAL,CAAiBC,WAA3C;AACAL,IAAAA,WAAW,CAACM,eAAZ,GAA8BP,IAAI,CAACK,WAAL,CAAiBG,eAA/C;AACAP,IAAAA,WAAW,CAACQ,YAAZ,GAA2BT,IAAI,CAACK,WAAL,CAAiBK,YAA5C;AACAT,IAAAA,WAAW,CAACU,UAAZ,GAAyBX,IAAI,CAACK,WAAL,CAAiBO,UAA1C;AACA,WAAOX,WAAP;AACD,GAnCgC;AAqCjCY,EAAAA,yBAAyB,EAAE,SAASA,yBAAT,CAAmCC,MAAnC,EAA2CC,QAA3C,EAAqD;AAC9E,WAAO,KAAKC,0BAAL,CAAgC,2BAAhC,EAA6DF,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAvCgC;AAyCjCE,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BH,MAA5B,EAAoCC,QAApC,EAA8C;AAChE,WAAO,KAAKC,0BAAL,CAAgC,oBAAhC,EAAsDF,MAAtD,EAA8DC,QAA9D,CAAP;AACD;AA3CgC,CAAnC","sourcesContent":["var AWS = require('../core');\r\n\r\nAWS.util.update(AWS.STS.prototype, {\r\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\r\n  credentialsFrom: function credentialsFrom(data, credentials) {\r\n    if (!data) return null;\r\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\r\n    credentials.expired = false;\r\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\r\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\r\n    credentials.sessionToken = data.Credentials.SessionToken;\r\n    credentials.expireTime = data.Credentials.Expiration;\r\n    return credentials;\r\n  },\r\n\r\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\r\n  },\r\n\r\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}