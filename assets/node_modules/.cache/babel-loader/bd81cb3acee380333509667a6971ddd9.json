{"ast":null,"code":"var AWS = require('../core');\n\nvar STS = require('../../clients/sts');\n/**\r\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\r\n * extra parameters, credentials will be fetched from the\r\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\r\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\r\n * role instead.\r\n *\r\n * @note AWS.TemporaryCredentials is deprecated, but remains available for\r\n *   backwards compatibility. {AWS.ChainableTemporaryCredentials} is the\r\n *   preferred class for temporary credentials.\r\n *\r\n * To setup temporary credentials, configure a set of master credentials\r\n * using the standard credentials providers (environment, EC2 instance metadata,\r\n * or from the filesystem), then set the global credentials to a new\r\n * temporary credentials object:\r\n *\r\n * ```javascript\r\n * // Note that environment credentials are loaded by default,\r\n * // the following line is shown for clarity:\r\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\r\n *\r\n * // Now set temporary credentials seeded from the master credentials\r\n * AWS.config.credentials = new AWS.TemporaryCredentials();\r\n *\r\n * // subsequent requests will now use temporary credentials from AWS STS.\r\n * new AWS.S3().listBucket(function(err, data) { ... });\r\n * ```\r\n *\r\n * @!attribute masterCredentials\r\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\r\n *     get and refresh temporary credentials from AWS STS.\r\n * @note (see constructor)\r\n */\n\n\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new temporary credentials object.\r\n   *\r\n   * @note In order to create temporary credentials, you first need to have\r\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\r\n   *   master credentials are necessary to retrieve the temporary credentials,\r\n   *   as well as refresh the credentials when they expire.\r\n   * @param params [map] a map of options that are passed to the\r\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\r\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\r\n   *   IAM role.\r\n   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\r\n   *  used to get and refresh temporary credentials from AWS STS.\r\n   * @example Creating a new credentials object for generic temporary credentials\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\r\n   * @example Creating a new credentials object for an IAM role\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\r\n   *   });\r\n   * @see AWS.STS.assumeRole\r\n   * @see AWS.STS.getSessionToken\r\n   */\n  constructor: function TemporaryCredentials(params, masterCredentials) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials(masterCredentials);\n    this.expired = true;\n    this.params = params || {};\n\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName = this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRole} or\r\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\r\n   * to the credentials {constructor}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\r\n   * @api private\r\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.masterCredentials.get(function () {\n      self.service.config.credentials = self.masterCredentials;\n      var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;\n      operation.call(self.service, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n\n        callback(err);\n      });\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {\n    this.masterCredentials = masterCredentials || AWS.config.credentials;\n\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n\n    if (typeof this.masterCredentials.get !== 'function') {\n      this.masterCredentials = new AWS.Credentials(this.masterCredentials);\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  createClients: function createClients() {\n    this.service = this.service || new STS({\n      params: this.params\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/credentials/temporary_credentials.js"],"names":["AWS","require","STS","TemporaryCredentials","util","inherit","Credentials","constructor","params","masterCredentials","call","loadMasterCredentials","expired","RoleArn","RoleSessionName","refresh","callback","coalesceRefresh","fn","load","self","createClients","get","service","config","credentials","operation","assumeRole","getSessionToken","err","data","credentialsFrom"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,GAAG,CAACG,oBAAJ,GAA2BH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBL,GAAG,CAACM,WAArB,EAAkC;AAC3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,SAASJ,oBAAT,CAA8BK,MAA9B,EAAsCC,iBAAtC,EAAyD;AACpET,IAAAA,GAAG,CAACM,WAAJ,CAAgBI,IAAhB,CAAqB,IAArB;AACA,SAAKC,qBAAL,CAA2BF,iBAA3B;AACA,SAAKG,OAAL,GAAe,IAAf;AAEA,SAAKJ,MAAL,GAAcA,MAAM,IAAI,EAAxB;;AACA,QAAI,KAAKA,MAAL,CAAYK,OAAhB,EAAyB;AACvB,WAAKL,MAAL,CAAYM,eAAZ,GACE,KAAKN,MAAL,CAAYM,eAAZ,IAA+B,uBADjC;AAED;AACF,GAjC0D;;AAmC3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAkBC,QAAlB,EAA4B;AACnC,SAAKC,eAAL,CAAqBD,QAAQ,IAAIhB,GAAG,CAACI,IAAJ,CAASc,EAAT,CAAYF,QAA7C;AACD,GAlD0D;;AAoD3D;AACF;AACA;AACEG,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAeH,QAAf,EAAyB;AAC7B,QAAII,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACC,aAAL;AACAD,IAAAA,IAAI,CAACX,iBAAL,CAAuBa,GAAvB,CAA2B,YAAY;AACrCF,MAAAA,IAAI,CAACG,OAAL,CAAaC,MAAb,CAAoBC,WAApB,GAAkCL,IAAI,CAACX,iBAAvC;AACA,UAAIiB,SAAS,GAAGN,IAAI,CAACZ,MAAL,CAAYK,OAAZ,GACdO,IAAI,CAACG,OAAL,CAAaI,UADC,GACYP,IAAI,CAACG,OAAL,CAAaK,eADzC;AAEAF,MAAAA,SAAS,CAAChB,IAAV,CAAeU,IAAI,CAACG,OAApB,EAA6B,UAAUM,GAAV,EAAeC,IAAf,EAAqB;AAChD,YAAI,CAACD,GAAL,EAAU;AACRT,UAAAA,IAAI,CAACG,OAAL,CAAaQ,eAAb,CAA6BD,IAA7B,EAAmCV,IAAnC;AACD;;AACDJ,QAAAA,QAAQ,CAACa,GAAD,CAAR;AACD,OALD;AAMD,KAVD;AAWD,GArE0D;;AAuE3D;AACF;AACA;AACElB,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAAgCF,iBAAhC,EAAmD;AACxE,SAAKA,iBAAL,GAAyBA,iBAAiB,IAAIT,GAAG,CAACwB,MAAJ,CAAWC,WAAzD;;AACA,WAAO,KAAKhB,iBAAL,CAAuBA,iBAA9B,EAAiD;AAC/C,WAAKA,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBA,iBAAhD;AACD;;AAED,QAAI,OAAO,KAAKA,iBAAL,CAAuBa,GAA9B,KAAsC,UAA1C,EAAsD;AACpD,WAAKb,iBAAL,GAAyB,IAAIT,GAAG,CAACM,WAAR,CAAoB,KAAKG,iBAAzB,CAAzB;AACD;AACF,GAnF0D;;AAqF3D;AACF;AACA;AACEY,EAAAA,aAAa,EAAE,yBAAY;AACzB,SAAKE,OAAL,GAAe,KAAKA,OAAL,IAAgB,IAAIrB,GAAJ,CAAQ;AAACM,MAAAA,MAAM,EAAE,KAAKA;AAAd,KAAR,CAA/B;AACD;AA1F0D,CAAlC,CAA3B","sourcesContent":["var AWS = require('../core');\r\nvar STS = require('../../clients/sts');\r\n\r\n/**\r\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\r\n * extra parameters, credentials will be fetched from the\r\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\r\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\r\n * role instead.\r\n *\r\n * @note AWS.TemporaryCredentials is deprecated, but remains available for\r\n *   backwards compatibility. {AWS.ChainableTemporaryCredentials} is the\r\n *   preferred class for temporary credentials.\r\n *\r\n * To setup temporary credentials, configure a set of master credentials\r\n * using the standard credentials providers (environment, EC2 instance metadata,\r\n * or from the filesystem), then set the global credentials to a new\r\n * temporary credentials object:\r\n *\r\n * ```javascript\r\n * // Note that environment credentials are loaded by default,\r\n * // the following line is shown for clarity:\r\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\r\n *\r\n * // Now set temporary credentials seeded from the master credentials\r\n * AWS.config.credentials = new AWS.TemporaryCredentials();\r\n *\r\n * // subsequent requests will now use temporary credentials from AWS STS.\r\n * new AWS.S3().listBucket(function(err, data) { ... });\r\n * ```\r\n *\r\n * @!attribute masterCredentials\r\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\r\n *     get and refresh temporary credentials from AWS STS.\r\n * @note (see constructor)\r\n */\r\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\r\n  /**\r\n   * Creates a new temporary credentials object.\r\n   *\r\n   * @note In order to create temporary credentials, you first need to have\r\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\r\n   *   master credentials are necessary to retrieve the temporary credentials,\r\n   *   as well as refresh the credentials when they expire.\r\n   * @param params [map] a map of options that are passed to the\r\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\r\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\r\n   *   IAM role.\r\n   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\r\n   *  used to get and refresh temporary credentials from AWS STS.\r\n   * @example Creating a new credentials object for generic temporary credentials\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\r\n   * @example Creating a new credentials object for an IAM role\r\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\r\n   *   });\r\n   * @see AWS.STS.assumeRole\r\n   * @see AWS.STS.getSessionToken\r\n   */\r\n  constructor: function TemporaryCredentials(params, masterCredentials) {\r\n    AWS.Credentials.call(this);\r\n    this.loadMasterCredentials(masterCredentials);\r\n    this.expired = true;\r\n\r\n    this.params = params || {};\r\n    if (this.params.RoleArn) {\r\n      this.params.RoleSessionName =\r\n        this.params.RoleSessionName || 'temporary-credentials';\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRole} or\r\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\r\n   * to the credentials {constructor}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\r\n  refresh: function refresh (callback) {\r\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  load: function load (callback) {\r\n    var self = this;\r\n    self.createClients();\r\n    self.masterCredentials.get(function () {\r\n      self.service.config.credentials = self.masterCredentials;\r\n      var operation = self.params.RoleArn ?\r\n        self.service.assumeRole : self.service.getSessionToken;\r\n      operation.call(self.service, function (err, data) {\r\n        if (!err) {\r\n          self.service.credentialsFrom(data, self);\r\n        }\r\n        callback(err);\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  loadMasterCredentials: function loadMasterCredentials (masterCredentials) {\r\n    this.masterCredentials = masterCredentials || AWS.config.credentials;\r\n    while (this.masterCredentials.masterCredentials) {\r\n      this.masterCredentials = this.masterCredentials.masterCredentials;\r\n    }\r\n\r\n    if (typeof this.masterCredentials.get !== 'function') {\r\n      this.masterCredentials = new AWS.Credentials(this.masterCredentials);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  createClients: function () {\r\n    this.service = this.service || new STS({params: this.params});\r\n  }\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}