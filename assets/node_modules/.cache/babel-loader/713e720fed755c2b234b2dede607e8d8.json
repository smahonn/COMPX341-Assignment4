{"ast":null,"code":"var AWS = require('../core');\n\nvar CognitoIdentity = require('../../clients/cognitoidentity');\n\nvar STS = require('../../clients/sts');\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation using\r\n * the Amazon Cognito Identity service.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\r\n * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\r\n * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\r\n * obtain an `IdentityId`. If the identity or identity pool is not configured in\r\n * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\r\n * then additionally a `RoleArn` is required containing the ARN of the IAM trust\r\n * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\r\n * is provided, then this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\r\n * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\r\n *\r\n * In addition, if this credential provider is used to provide authenticated\r\n * login, the `Logins` map may be set to the tokens provided by the respective\r\n * identity providers. See {constructor} for an example on creating a credentials\r\n * object with proper property values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.CognitoIdentity.getId},\r\n *     {AWS.CognitoIdentity.getOpenIdToken}, and\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n * @!attribute identityId\r\n *   @return [String] the Cognito ID returned by the last call to\r\n *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\r\n *     final resolved identity ID from Amazon Cognito.\r\n */\n\n\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * @api private\r\n   */\n  localStorageKey: {\n    id: 'aws.cognito.identity-id.',\n    providers: 'aws.cognito.identity-providers.'\n  },\n\n  /**\r\n   * Creates a new credentials object.\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n   *\r\n   *     // either IdentityPoolId or IdentityId is required\r\n   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\r\n   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\r\n   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\r\n   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\r\n   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\r\n   *\r\n   *     // optional, only necessary when the identity pool is not configured\r\n   *     // to use IAM roles in the Amazon Cognito Console\r\n   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\r\n   *\r\n   *     // optional tokens, used for authenticated login\r\n   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\r\n   *     Logins: {\r\n   *       'graph.facebook.com': 'FBTOKEN',\r\n   *       'www.amazon.com': 'AMAZONTOKEN',\r\n   *       'accounts.google.com': 'GOOGLETOKEN',\r\n   *       'api.twitter.com': 'TWITTERTOKEN',\r\n   *       'www.digits.com': 'DIGITSTOKEN'\r\n   *     },\r\n   *\r\n   *     // optional name, defaults to web-identity\r\n   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleSessionName: 'web',\r\n   *\r\n   *     // optional, only necessary when application runs in a browser\r\n   *     // and multiple users are signed in at once, used for caching\r\n   *     LoginId: 'example@gmail.com'\r\n   *\r\n   *   }, {\r\n   *      // optionally provide configuration to apply to the underlying service clients\r\n   *      // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *      // region should match the region your identity pool is located in\r\n   *      region: 'us-east-1',\r\n   *\r\n   *      // specify timeout options\r\n   *      httpOptions: {\r\n   *        timeout: 100\r\n   *      }\r\n   *   });\r\n   * @see AWS.CognitoIdentity.getId\r\n   * @see AWS.CognitoIdentity.getCredentialsForIdentity\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.CognitoIdentity.getOpenIdToken\r\n   * @see AWS.Config\r\n   * @note If a region is not provided in the global AWS.config, or\r\n   *   specified in the `clientConfig` to the CognitoIdentityCredentials\r\n   *   constructor, you may encounter a 'Missing credentials in config' error\r\n   *   when calling making a service call.\r\n   */\n  constructor: function CognitoIdentityCredentials(params, clientConfig) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n    this.data = null;\n    this._identityId = null;\n    this._clientConfig = AWS.util.copy(clientConfig || {});\n    this.loadCachedId();\n    var self = this;\n    Object.defineProperty(this, 'identityId', {\n      get: function get() {\n        self.loadCachedId();\n        return self._identityId || self.params.IdentityId;\n      },\n      set: function set(identityId) {\n        self._identityId = identityId;\n      }\n    });\n  },\n\n  /**\r\n   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\r\n   * or {AWS.STS.assumeRoleWithWebIdentity}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.data = null;\n    self._identityId = null;\n    self.getId(function (err) {\n      if (!err) {\n        if (!self.params.RoleArn) {\n          self.getCredentialsForIdentity(callback);\n        } else {\n          self.getCredentialsFromSTS(callback);\n        }\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * Clears the cached Cognito ID associated with the currently configured\r\n   * identity pool ID. Use this to manually invalidate your cache if\r\n   * the identity pool ID was deleted.\r\n   */\n  clearCachedId: function clearCache() {\n    this._identityId = null;\n    delete this.params.IdentityId;\n    var poolId = this.params.IdentityPoolId;\n    var loginId = this.params.LoginId || '';\n    delete this.storage[this.localStorageKey.id + poolId + loginId];\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];\n  },\n\n  /**\r\n   * @api private\r\n   */\n  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\n    var self = this;\n\n    if (err.code == 'NotAuthorizedException') {\n      self.clearCachedId();\n    }\n  },\n\n  /**\r\n   * Retrieves a Cognito ID, loading from cache if it was already retrieved\r\n   * on this device.\r\n   *\r\n   * @callback callback function(err, identityId)\r\n   *   @param err [Error, null] an error object if the call failed or null if\r\n   *     it succeeded.\r\n   *   @param identityId [String, null] if successful, the callback will return\r\n   *     the Cognito ID.\r\n   * @note If not loaded explicitly, the Cognito ID is loaded and stored in\r\n   *   localStorage in the browser environment of a device.\r\n   * @api private\r\n   */\n  getId: function getId(callback) {\n    var self = this;\n\n    if (typeof self.params.IdentityId === 'string') {\n      return callback(null, self.params.IdentityId);\n    }\n\n    self.cognito.getId(function (err, data) {\n      if (!err && data.IdentityId) {\n        self.params.IdentityId = data.IdentityId;\n        callback(null, data.IdentityId);\n      } else {\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadCredentials: function loadCredentials(data, credentials) {\n    if (!data || !credentials) return;\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\n    var self = this;\n    self.cognito.getCredentialsForIdentity(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.data = data;\n        self.loadCredentials(self.data, self);\n      } else {\n        self.clearIdOnNotAuthorized(err);\n      }\n\n      callback(err);\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\n    var self = this;\n    self.cognito.getOpenIdToken(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.params.WebIdentityToken = data.Token;\n        self.webIdentityCredentials.refresh(function (webErr) {\n          if (!webErr) {\n            self.data = self.webIdentityCredentials.data;\n            self.sts.credentialsFrom(self.data, self);\n          }\n\n          callback(webErr);\n        });\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n\n  /**\r\n   * @api private\r\n   */\n  loadCachedId: function loadCachedId() {\n    var self = this; // in the browser we source default IdentityId from localStorage\n\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {\n      var id = self.getStorage('id');\n\n      if (id && self.params.Logins) {\n        var actualProviders = Object.keys(self.params.Logins);\n        var cachedProviders = (self.getStorage('providers') || '').split(','); // only load ID if at least one provider used this ID before\n\n        var intersect = cachedProviders.filter(function (n) {\n          return actualProviders.indexOf(n) !== -1;\n        });\n\n        if (intersect.length !== 0) {\n          self.params.IdentityId = id;\n        }\n      } else if (id) {\n        self.params.IdentityId = id;\n      }\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  createClients: function createClients() {\n    var clientConfig = this._clientConfig;\n    this.webIdentityCredentials = this.webIdentityCredentials || new AWS.WebIdentityCredentials(this.params, clientConfig);\n\n    if (!this.cognito) {\n      var cognitoConfig = AWS.util.merge({}, clientConfig);\n      cognitoConfig.params = this.params;\n      this.cognito = new CognitoIdentity(cognitoConfig);\n    }\n\n    this.sts = this.sts || new STS(clientConfig);\n  },\n\n  /**\r\n   * @api private\r\n   */\n  cacheId: function cacheId(data) {\n    this._identityId = data.IdentityId;\n    this.params.IdentityId = this._identityId; // cache this IdentityId in browser localStorage if possible\n\n    if (AWS.util.isBrowser()) {\n      this.setStorage('id', data.IdentityId);\n\n      if (this.params.Logins) {\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));\n      }\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getStorage: function getStorage(key) {\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setStorage: function setStorage(key, val) {\n    try {\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\n    } catch (_) {}\n  },\n\n  /**\r\n   * @api private\r\n   */\n  storage: function () {\n    try {\n      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ? window.localStorage : {}; // Test set/remove which would throw an error in Safari's private browsing\n\n      storage['aws.test-storage'] = 'foobar';\n      delete storage['aws.test-storage'];\n      return storage;\n    } catch (_) {\n      return {};\n    }\n  }()\n});","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js"],"names":["AWS","require","CognitoIdentity","STS","CognitoIdentityCredentials","util","inherit","Credentials","localStorageKey","id","providers","constructor","params","clientConfig","call","expired","data","_identityId","_clientConfig","copy","loadCachedId","self","Object","defineProperty","get","IdentityId","set","identityId","refresh","callback","coalesceRefresh","fn","load","createClients","getId","err","RoleArn","getCredentialsForIdentity","getCredentialsFromSTS","clearIdOnNotAuthorized","clearCachedId","clearCache","poolId","IdentityPoolId","loginId","LoginId","storage","code","cognito","loadCredentials","credentials","accessKeyId","AccessKeyId","secretAccessKey","SecretKey","sessionToken","SessionToken","expireTime","Expiration","cacheId","getOpenIdToken","WebIdentityToken","Token","webIdentityCredentials","webErr","sts","credentialsFrom","isBrowser","getStorage","Logins","actualProviders","keys","cachedProviders","split","intersect","filter","n","indexOf","length","WebIdentityCredentials","cognitoConfig","merge","setStorage","join","key","val","_","window","localStorage"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,+BAAD,CAA7B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,GAAG,CAACI,0BAAJ,GAAiCJ,GAAG,CAACK,IAAJ,CAASC,OAAT,CAAiBN,GAAG,CAACO,WAArB,EAAkC;AACjE;AACF;AACA;AACEC,EAAAA,eAAe,EAAE;AACfC,IAAAA,EAAE,EAAE,0BADW;AAEfC,IAAAA,SAAS,EAAE;AAFI,GAJgD;;AASjE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,SAASP,0BAAT,CAAoCQ,MAApC,EAA4CC,YAA5C,EAA0D;AACrEb,IAAAA,GAAG,CAACO,WAAJ,CAAgBO,IAAhB,CAAqB,IAArB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKI,IAAL,GAAY,IAAZ;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,aAAL,GAAqBlB,GAAG,CAACK,IAAJ,CAASc,IAAT,CAAcN,YAAY,IAAI,EAA9B,CAArB;AACA,S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","sourcesContent":["var AWS = require('../core');\r\nvar CognitoIdentity = require('../../clients/cognitoidentity');\r\nvar STS = require('../../clients/sts');\r\n\r\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation using\r\n * the Amazon Cognito Identity service.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\r\n * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\r\n * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\r\n * obtain an `IdentityId`. If the identity or identity pool is not configured in\r\n * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\r\n * then additionally a `RoleArn` is required containing the ARN of the IAM trust\r\n * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\r\n * is provided, then this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\r\n * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\r\n *\r\n * In addition, if this credential provider is used to provide authenticated\r\n * login, the `Logins` map may be set to the tokens provided by the respective\r\n * identity providers. See {constructor} for an example on creating a credentials\r\n * object with proper property values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.CognitoIdentity.getId},\r\n *     {AWS.CognitoIdentity.getOpenIdToken}, and\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n * @!attribute identityId\r\n *   @return [String] the Cognito ID returned by the last call to\r\n *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\r\n *     final resolved identity ID from Amazon Cognito.\r\n */\r\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\r\n  /**\r\n   * @api private\r\n   */\r\n  localStorageKey: {\r\n    id: 'aws.cognito.identity-id.',\r\n    providers: 'aws.cognito.identity-providers.'\r\n  },\r\n\r\n  /**\r\n   * Creates a new credentials object.\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n   *\r\n   *     // either IdentityPoolId or IdentityId is required\r\n   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\r\n   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\r\n   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\r\n   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\r\n   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\r\n   *\r\n   *     // optional, only necessary when the identity pool is not configured\r\n   *     // to use IAM roles in the Amazon Cognito Console\r\n   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\r\n   *\r\n   *     // optional tokens, used for authenticated login\r\n   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\r\n   *     Logins: {\r\n   *       'graph.facebook.com': 'FBTOKEN',\r\n   *       'www.amazon.com': 'AMAZONTOKEN',\r\n   *       'accounts.google.com': 'GOOGLETOKEN',\r\n   *       'api.twitter.com': 'TWITTERTOKEN',\r\n   *       'www.digits.com': 'DIGITSTOKEN'\r\n   *     },\r\n   *\r\n   *     // optional name, defaults to web-identity\r\n   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleSessionName: 'web',\r\n   *\r\n   *     // optional, only necessary when application runs in a browser\r\n   *     // and multiple users are signed in at once, used for caching\r\n   *     LoginId: 'example@gmail.com'\r\n   *\r\n   *   }, {\r\n   *      // optionally provide configuration to apply to the underlying service clients\r\n   *      // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *      // region should match the region your identity pool is located in\r\n   *      region: 'us-east-1',\r\n   *\r\n   *      // specify timeout options\r\n   *      httpOptions: {\r\n   *        timeout: 100\r\n   *      }\r\n   *   });\r\n   * @see AWS.CognitoIdentity.getId\r\n   * @see AWS.CognitoIdentity.getCredentialsForIdentity\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.CognitoIdentity.getOpenIdToken\r\n   * @see AWS.Config\r\n   * @note If a region is not provided in the global AWS.config, or\r\n   *   specified in the `clientConfig` to the CognitoIdentityCredentials\r\n   *   constructor, you may encounter a 'Missing credentials in config' error\r\n   *   when calling making a service call.\r\n   */\r\n  constructor: function CognitoIdentityCredentials(params, clientConfig) {\r\n    AWS.Credentials.call(this);\r\n    this.expired = true;\r\n    this.params = params;\r\n    this.data = null;\r\n    this._identityId = null;\r\n    this._clientConfig = AWS.util.copy(clientConfig || {});\r\n    this.loadCachedId();\r\n    var self = this;\r\n    Object.defineProperty(this, 'identityId', {\r\n      get: function() {\r\n        self.loadCachedId();\r\n        return self._identityId || self.params.IdentityId;\r\n      },\r\n      set: function(identityId) {\r\n        self._identityId = identityId;\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\r\n   * or {AWS.STS.assumeRoleWithWebIdentity}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\r\n  refresh: function refresh(callback) {\r\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\r\n  load: function load(callback) {\r\n    var self = this;\r\n    self.createClients();\r\n    self.data = null;\r\n    self._identityId = null;\r\n    self.getId(function(err) {\r\n      if (!err) {\r\n        if (!self.params.RoleArn) {\r\n          self.getCredentialsForIdentity(callback);\r\n        } else {\r\n          self.getCredentialsFromSTS(callback);\r\n        }\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Clears the cached Cognito ID associated with the currently configured\r\n   * identity pool ID. Use this to manually invalidate your cache if\r\n   * the identity pool ID was deleted.\r\n   */\r\n  clearCachedId: function clearCache() {\r\n    this._identityId = null;\r\n    delete this.params.IdentityId;\r\n\r\n    var poolId = this.params.IdentityPoolId;\r\n    var loginId = this.params.LoginId || '';\r\n    delete this.storage[this.localStorageKey.id + poolId + loginId];\r\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\r\n    var self = this;\r\n    if (err.code == 'NotAuthorizedException') {\r\n      self.clearCachedId();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Retrieves a Cognito ID, loading from cache if it was already retrieved\r\n   * on this device.\r\n   *\r\n   * @callback callback function(err, identityId)\r\n   *   @param err [Error, null] an error object if the call failed or null if\r\n   *     it succeeded.\r\n   *   @param identityId [String, null] if successful, the callback will return\r\n   *     the Cognito ID.\r\n   * @note If not loaded explicitly, the Cognito ID is loaded and stored in\r\n   *   localStorage in the browser environment of a device.\r\n   * @api private\r\n   */\r\n  getId: function getId(callback) {\r\n    var self = this;\r\n    if (typeof self.params.IdentityId === 'string') {\r\n      return callback(null, self.params.IdentityId);\r\n    }\r\n\r\n    self.cognito.getId(function(err, data) {\r\n      if (!err && data.IdentityId) {\r\n        self.params.IdentityId = data.IdentityId;\r\n        callback(null, data.IdentityId);\r\n      } else {\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  loadCredentials: function loadCredentials(data, credentials) {\r\n    if (!data || !credentials) return;\r\n    credentials.expired = false;\r\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\r\n    credentials.secretAccessKey = data.Credentials.SecretKey;\r\n    credentials.sessionToken = data.Credentials.SessionToken;\r\n    credentials.expireTime = data.Credentials.Expiration;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\r\n    var self = this;\r\n    self.cognito.getCredentialsForIdentity(function(err, data) {\r\n      if (!err) {\r\n        self.cacheId(data);\r\n        self.data = data;\r\n        self.loadCredentials(self.data, self);\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n      }\r\n      callback(err);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\r\n    var self = this;\r\n    self.cognito.getOpenIdToken(function(err, data) {\r\n      if (!err) {\r\n        self.cacheId(data);\r\n        self.params.WebIdentityToken = data.Token;\r\n        self.webIdentityCredentials.refresh(function(webErr) {\r\n          if (!webErr) {\r\n            self.data = self.webIdentityCredentials.data;\r\n            self.sts.credentialsFrom(self.data, self);\r\n          }\r\n          callback(webErr);\r\n        });\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  loadCachedId: function loadCachedId() {\r\n    var self = this;\r\n\r\n    // in the browser we source default IdentityId from localStorage\r\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {\r\n      var id = self.getStorage('id');\r\n      if (id && self.params.Logins) {\r\n        var actualProviders = Object.keys(self.params.Logins);\r\n        var cachedProviders =\r\n          (self.getStorage('providers') || '').split(',');\r\n\r\n        // only load ID if at least one provider used this ID before\r\n        var intersect = cachedProviders.filter(function(n) {\r\n          return actualProviders.indexOf(n) !== -1;\r\n        });\r\n        if (intersect.length !== 0) {\r\n          self.params.IdentityId = id;\r\n        }\r\n      } else if (id) {\r\n        self.params.IdentityId = id;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  createClients: function() {\r\n    var clientConfig = this._clientConfig;\r\n    this.webIdentityCredentials = this.webIdentityCredentials ||\r\n      new AWS.WebIdentityCredentials(this.params, clientConfig);\r\n    if (!this.cognito) {\r\n      var cognitoConfig = AWS.util.merge({}, clientConfig);\r\n      cognitoConfig.params = this.params;\r\n      this.cognito = new CognitoIdentity(cognitoConfig);\r\n    }\r\n    this.sts = this.sts || new STS(clientConfig);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  cacheId: function cacheId(data) {\r\n    this._identityId = data.IdentityId;\r\n    this.params.IdentityId = this._identityId;\r\n\r\n    // cache this IdentityId in browser localStorage if possible\r\n    if (AWS.util.isBrowser()) {\r\n      this.setStorage('id', data.IdentityId);\r\n\r\n      if (this.params.Logins) {\r\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getStorage: function getStorage(key) {\r\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setStorage: function setStorage(key, val) {\r\n    try {\r\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\r\n    } catch (_) {}\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  storage: (function() {\r\n    try {\r\n      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?\r\n          window.localStorage : {};\r\n\r\n      // Test set/remove which would throw an error in Safari's private browsing\r\n      storage['aws.test-storage'] = 'foobar';\r\n      delete storage['aws.test-storage'];\r\n\r\n      return storage;\r\n    } catch (_) {\r\n      return {};\r\n    }\r\n  })()\r\n});\r\n"]},"metadata":{},"sourceType":"script"}