{"ast":null,"code":"var AWS = require('../core');\n/**\r\n * @api private\r\n */\n\n\nvar blobPayloadOutputOps = ['deleteThingShadow', 'getThingShadow', 'updateThingShadow'];\n/**\r\n * Constructs a service interface object. Each API operation is exposed as a\r\n * function on service.\r\n *\r\n * ### Sending a Request Using IotData\r\n *\r\n * ```javascript\r\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n * iotdata.getThingShadow(params, function (err, data) {\r\n *   if (err) console.log(err, err.stack); // an error occurred\r\n *   else     console.log(data);           // successful response\r\n * });\r\n * ```\r\n *\r\n * ### Locking the API Version\r\n *\r\n * In order to ensure that the IotData object uses this specific API,\r\n * you can construct the object by passing the `apiVersion` option to the\r\n * constructor:\r\n *\r\n * ```javascript\r\n * var iotdata = new AWS.IotData({\r\n *   endpoint: 'my.host.tld',\r\n *   apiVersion: '2015-05-28'\r\n * });\r\n * ```\r\n *\r\n * You can also set the API version globally in `AWS.config.apiVersions` using\r\n * the **iotdata** service identifier:\r\n *\r\n * ```javascript\r\n * AWS.config.apiVersions = {\r\n *   iotdata: '2015-05-28',\r\n *   // other service API versions\r\n * };\r\n *\r\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n * ```\r\n *\r\n * @note You *must* provide an `endpoint` configuration parameter when\r\n *   constructing this service. See {constructor} for more information.\r\n *\r\n * @!method constructor(options = {})\r\n *   Constructs a service object. This object has one method for each\r\n *   API operation.\r\n *\r\n *   @example Constructing a IotData object\r\n *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n *   @note You *must* provide an `endpoint` when constructing this service.\r\n *   @option (see AWS.Config.constructor)\r\n *\r\n * @service iotdata\r\n * @version 2015-05-28\r\n */\n\nAWS.util.update(AWS.IotData.prototype, {\n  /**\r\n   * @api private\r\n   */\n  validateService: function validateService() {\n    if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {\n      var msg = 'AWS.IotData requires an explicit ' + '`endpoint\\' configuration option.';\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validateResponse', this.validateResponseBody);\n\n    if (blobPayloadOutputOps.indexOf(request.operation) > -1) {\n      request.addListener('extractData', AWS.util.convertPayloadToString);\n    }\n  },\n\n  /**\r\n   * @api private\r\n   */\n  validateResponseBody: function validateResponseBody(resp) {\n    var body = resp.httpResponse.body.toString() || '{}';\n    var bodyCheck = body.trim();\n\n    if (!bodyCheck || bodyCheck.charAt(0) !== '{') {\n      resp.httpResponse.body = '';\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/services/iotdata.js"],"names":["AWS","require","blobPayloadOutputOps","util","update","IotData","prototype","validateService","config","endpoint","indexOf","msg","error","Error","name","message","setupRequestListeners","request","addListener","validateResponseBody","operation","convertPayloadToString","resp","body","httpResponse","toString","bodyCheck","trim","charAt"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;AACA;AACA;;;AACA,IAAIC,oBAAoB,GAAG,CACzB,mBADyB,EAEzB,gBAFyB,EAGzB,mBAHyB,CAA3B;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,GAAG,CAACG,IAAJ,CAASC,MAAT,CAAgBJ,GAAG,CAACK,OAAJ,CAAYC,SAA5B,EAAuC;AACnC;AACJ;AACA;AACIC,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AACxC,QAAI,CAAC,KAAKC,MAAL,CAAYC,QAAb,IAAyB,KAAKD,MAAL,CAAYC,QAAZ,CAAqBC,OAArB,CAA6B,GAA7B,KAAqC,CAAlE,EAAqE;AACjE,UAAIC,GAAG,GAAG,sCACN,mCADJ;AAEA,YAAMX,GAAG,CAACG,IAAJ,CAASS,KAAT,CAAe,IAAIC,KAAJ,EAAf,EACF;AAACC,QAAAA,IAAI,EAAE,iBAAP;AAA0BC,QAAAA,OAAO,EAAEJ;AAAnC,OADE,CAAN;AAEH;AACJ,GAXkC;;AAanC;AACJ;AACA;AACIK,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;AAC3DA,IAAAA,OAAO,CAACC,WAAR,CAAoB,kBAApB,EAAwC,KAAKC,oBAA7C;;AACA,QAAIjB,oBAAoB,CAACQ,OAArB,CAA6BO,OAAO,CAACG,SAArC,IAAkD,CAAC,CAAvD,EAA0D;AACtDH,MAAAA,OAAO,CAACC,WAAR,CAAoB,aAApB,EAAmClB,GAAG,CAACG,IAAJ,CAASkB,sBAA5C;AACH;AACJ,GArBkC;;AAuBnC;AACJ;AACA;AACIF,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BG,IAA9B,EAAoC;AACtD,QAAIC,IAAI,GAAGD,IAAI,CAACE,YAAL,CAAkBD,IAAlB,CAAuBE,QAAvB,MAAqC,IAAhD;AACA,QAAIC,SAAS,GAAGH,IAAI,CAACI,IAAL,EAAhB;;AACA,QAAI,CAACD,SAAD,IAAcA,SAAS,CAACE,MAAV,CAAiB,CAAjB,MAAwB,GAA1C,EAA+C;AAC3CN,MAAAA,IAAI,CAACE,YAAL,CAAkBD,IAAlB,GAAyB,EAAzB;AACH;AACJ;AAhCkC,CAAvC","sourcesContent":["var AWS = require('../core');\r\n\r\n/**\r\n * @api private\r\n */\r\nvar blobPayloadOutputOps = [\r\n  'deleteThingShadow',\r\n  'getThingShadow',\r\n  'updateThingShadow'\r\n];\r\n\r\n/**\r\n * Constructs a service interface object. Each API operation is exposed as a\r\n * function on service.\r\n *\r\n * ### Sending a Request Using IotData\r\n *\r\n * ```javascript\r\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n * iotdata.getThingShadow(params, function (err, data) {\r\n *   if (err) console.log(err, err.stack); // an error occurred\r\n *   else     console.log(data);           // successful response\r\n * });\r\n * ```\r\n *\r\n * ### Locking the API Version\r\n *\r\n * In order to ensure that the IotData object uses this specific API,\r\n * you can construct the object by passing the `apiVersion` option to the\r\n * constructor:\r\n *\r\n * ```javascript\r\n * var iotdata = new AWS.IotData({\r\n *   endpoint: 'my.host.tld',\r\n *   apiVersion: '2015-05-28'\r\n * });\r\n * ```\r\n *\r\n * You can also set the API version globally in `AWS.config.apiVersions` using\r\n * the **iotdata** service identifier:\r\n *\r\n * ```javascript\r\n * AWS.config.apiVersions = {\r\n *   iotdata: '2015-05-28',\r\n *   // other service API versions\r\n * };\r\n *\r\n * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n * ```\r\n *\r\n * @note You *must* provide an `endpoint` configuration parameter when\r\n *   constructing this service. See {constructor} for more information.\r\n *\r\n * @!method constructor(options = {})\r\n *   Constructs a service object. This object has one method for each\r\n *   API operation.\r\n *\r\n *   @example Constructing a IotData object\r\n *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});\r\n *   @note You *must* provide an `endpoint` when constructing this service.\r\n *   @option (see AWS.Config.constructor)\r\n *\r\n * @service iotdata\r\n * @version 2015-05-28\r\n */\r\nAWS.util.update(AWS.IotData.prototype, {\r\n    /**\r\n     * @api private\r\n     */\r\n    validateService: function validateService() {\r\n        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {\r\n            var msg = 'AWS.IotData requires an explicit ' +\r\n                '`endpoint\\' configuration option.';\r\n            throw AWS.util.error(new Error(),\r\n                {name: 'InvalidEndpoint', message: msg});\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @api private\r\n     */\r\n    setupRequestListeners: function setupRequestListeners(request) {\r\n        request.addListener('validateResponse', this.validateResponseBody);\r\n        if (blobPayloadOutputOps.indexOf(request.operation) > -1) {\r\n            request.addListener('extractData', AWS.util.convertPayloadToString);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @api private\r\n     */\r\n    validateResponseBody: function validateResponseBody(resp) {\r\n        var body = resp.httpResponse.body.toString() || '{}';\r\n        var bodyCheck = body.trim();\r\n        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {\r\n            resp.httpResponse.body = '';\r\n        }\r\n    }\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}