{"ast":null,"code":"var util = require('./util');\n\nvar regionConfig = require('./region_config_data.json');\n\nfunction generateRegionPrefix(region) {\n  if (!region) return null;\n  var parts = region.split('-');\n  if (parts.length < 3) return null;\n  return parts.slice(0, parts.length - 2).join('-') + '-*';\n}\n\nfunction derivedKeys(service) {\n  var region = service.config.region;\n  var regionPrefix = generateRegionPrefix(region);\n  var endpointPrefix = service.api.endpointPrefix;\n  return [[region, endpointPrefix], [regionPrefix, endpointPrefix], [region, '*'], [regionPrefix, '*'], ['*', endpointPrefix], ['*', '*']].map(function (item) {\n    return item[0] && item[1] ? item.join('/') : null;\n  });\n}\n\nfunction applyConfig(service, config) {\n  util.each(config, function (key, value) {\n    if (key === 'globalEndpoint') return;\n\n    if (service.config[key] === undefined || service.config[key] === null) {\n      service.config[key] = value;\n    }\n  });\n}\n\nfunction configureEndpoint(service) {\n  var keys = derivedKeys(service);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!key) continue;\n\n    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {\n      var config = regionConfig.rules[key];\n\n      if (typeof config === 'string') {\n        config = regionConfig.patterns[config];\n      } // set dualstack endpoint\n\n\n      if (service.config.useDualstack && util.isDualstackAvailable(service)) {\n        config = util.copy(config);\n        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';\n      } // set global endpoint\n\n\n      service.isGlobalEndpoint = !!config.globalEndpoint; // signature version\n\n      if (!config.signatureVersion) config.signatureVersion = 'v4'; // merge config\n\n      applyConfig(service, config);\n      return;\n    }\n  }\n}\n/**\r\n * @api private\r\n */\n\n\nmodule.exports = configureEndpoint;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/region_config.js"],"names":["util","require","regionConfig","generateRegionPrefix","region","parts","split","length","slice","join","derivedKeys","service","config","regionPrefix","endpointPrefix","api","map","item","applyConfig","each","key","value","undefined","configureEndpoint","keys","i","Object","prototype","hasOwnProperty","call","rules","patterns","useDualstack","isDualstackAvailable","copy","endpoint","isGlobalEndpoint","globalEndpoint","signatureVersion","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AAEA,SAASE,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,MAAI,CAACA,MAAL,EAAa,OAAO,IAAP;AAEb,MAAIC,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAZ;AACA,MAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB,OAAO,IAAP;AACtB,SAAOF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACE,MAAN,GAAe,CAA9B,EAAiCE,IAAjC,CAAsC,GAAtC,IAA6C,IAApD;AACD;;AAED,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIP,MAAM,GAAGO,OAAO,CAACC,MAAR,CAAeR,MAA5B;AACA,MAAIS,YAAY,GAAGV,oBAAoB,CAACC,MAAD,CAAvC;AACA,MAAIU,cAAc,GAAGH,OAAO,CAACI,GAAR,CAAYD,cAAjC;AAEA,SAAO,CACL,CAACV,MAAD,EAASU,cAAT,CADK,EAEL,CAACD,YAAD,EAAeC,cAAf,CAFK,EAGL,CAACV,MAAD,EAAS,GAAT,CAHK,EAIL,CAACS,YAAD,EAAe,GAAf,CAJK,EAKL,CAAC,GAAD,EAAMC,cAAN,CALK,EAML,CAAC,GAAD,EAAM,GAAN,CANK,EAOLE,GAPK,CAOD,UAASC,IAAT,EAAe;AACnB,WAAOA,IAAI,CAAC,CAAD,CAAJ,IAAWA,IAAI,CAAC,CAAD,CAAf,GAAqBA,IAAI,CAACR,IAAL,CAAU,GAAV,CAArB,GAAsC,IAA7C;AACD,GATM,CAAP;AAUD;;AAED,SAASS,WAAT,CAAqBP,OAArB,EAA8BC,MAA9B,EAAsC;AACpCZ,EAAAA,IAAI,CAACmB,IAAL,CAAUP,MAAV,EAAkB,UAASQ,GAAT,EAAcC,KAAd,EAAqB;AACrC,QAAID,GAAG,KAAK,gBAAZ,EAA8B;;AAC9B,QAAIT,OAAO,CAACC,MAAR,CAAeQ,GAAf,MAAwBE,SAAxB,IAAqCX,OAAO,CAACC,MAAR,CAAeQ,GAAf,MAAwB,IAAjE,EAAuE;AACrET,MAAAA,OAAO,CAACC,MAAR,CAAeQ,GAAf,IAAsBC,KAAtB;AACD;AACF,GALD;AAMD;;AAED,SAASE,iBAAT,CAA2BZ,OAA3B,EAAoC;AAClC,MAAIa,IAAI,GAAGd,WAAW,CAACC,OAAD,CAAtB;;AACA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACjB,MAAzB,EAAiCkB,CAAC,EAAlC,EAAsC;AACpC,QAAIL,GAAG,GAAGI,IAAI,CAACC,CAAD,CAAd;AACA,QAAI,CAACL,GAAL,EAAU;;AAEV,QAAIM,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,YAAY,CAAC4B,KAAlD,EAAyDV,GAAzD,CAAJ,EAAmE;AACjE,UAAIR,MAAM,GAAGV,YAAY,CAAC4B,KAAb,CAAmBV,GAAnB,CAAb;;AACA,UAAI,OAAOR,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,QAAAA,MAAM,GAAGV,YAAY,CAAC6B,QAAb,CAAsBnB,MAAtB,CAAT;AACD,OAJgE,CAMjE;;;AACA,UAAID,OAAO,CAACC,MAAR,CAAeoB,YAAf,IAA+BhC,IAAI,CAACiC,oBAAL,CAA0BtB,OAA1B,CAAnC,EAAuE;AACrEC,QAAAA,MAAM,GAAGZ,IAAI,CAACkC,IAAL,CAAUtB,MAAV,CAAT;AACAA,QAAAA,MAAM,CAACuB,QAAP,GAAkB,4CAAlB;AACD,OAVgE,CAYjE;;;AACAxB,MAAAA,OAAO,CAACyB,gBAAR,GAA2B,CAAC,CAACxB,MAAM,CAACyB,cAApC,CAbiE,CAejE;;AACA,UAAI,CAACzB,MAAM,CAAC0B,gBAAZ,EAA8B1B,MAAM,CAAC0B,gBAAP,GAA0B,IAA1B,CAhBmC,CAkBjE;;AACApB,MAAAA,WAAW,CAACP,OAAD,EAAUC,MAAV,CAAX;AACA;AACD;AACF;AACF;AAED;AACA;AACA;;;AACA2B,MAAM,CAACC,OAAP,GAAiBjB,iBAAjB","sourcesContent":["var util = require('./util');\r\nvar regionConfig = require('./region_config_data.json');\r\n\r\nfunction generateRegionPrefix(region) {\r\n  if (!region) return null;\r\n\r\n  var parts = region.split('-');\r\n  if (parts.length < 3) return null;\r\n  return parts.slice(0, parts.length - 2).join('-') + '-*';\r\n}\r\n\r\nfunction derivedKeys(service) {\r\n  var region = service.config.region;\r\n  var regionPrefix = generateRegionPrefix(region);\r\n  var endpointPrefix = service.api.endpointPrefix;\r\n\r\n  return [\r\n    [region, endpointPrefix],\r\n    [regionPrefix, endpointPrefix],\r\n    [region, '*'],\r\n    [regionPrefix, '*'],\r\n    ['*', endpointPrefix],\r\n    ['*', '*']\r\n  ].map(function(item) {\r\n    return item[0] && item[1] ? item.join('/') : null;\r\n  });\r\n}\r\n\r\nfunction applyConfig(service, config) {\r\n  util.each(config, function(key, value) {\r\n    if (key === 'globalEndpoint') return;\r\n    if (service.config[key] === undefined || service.config[key] === null) {\r\n      service.config[key] = value;\r\n    }\r\n  });\r\n}\r\n\r\nfunction configureEndpoint(service) {\r\n  var keys = derivedKeys(service);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i];\r\n    if (!key) continue;\r\n\r\n    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {\r\n      var config = regionConfig.rules[key];\r\n      if (typeof config === 'string') {\r\n        config = regionConfig.patterns[config];\r\n      }\r\n\r\n      // set dualstack endpoint\r\n      if (service.config.useDualstack && util.isDualstackAvailable(service)) {\r\n        config = util.copy(config);\r\n        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';\r\n      }\r\n\r\n      // set global endpoint\r\n      service.isGlobalEndpoint = !!config.globalEndpoint;\r\n\r\n      // signature version\r\n      if (!config.signatureVersion) config.signatureVersion = 'v4';\r\n\r\n      // merge config\r\n      applyConfig(service, config);\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = configureEndpoint;\r\n"]},"metadata":{},"sourceType":"script"}