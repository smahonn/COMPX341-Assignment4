{"ast":null,"code":"/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n/**\r\n * Write logs\r\n * @class Logger\r\n */\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {string} name - Name of the logger\r\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = 'WARN';\n    }\n\n    this.name = name;\n    this.level = level;\n  }\n\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  /**\r\n   * Write log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string} type - log type, default INFO\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype._log = function (type) {\n    var msg = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n\n    var logger_level_name = this.level;\n\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n\n    var log = console.log.bind(console);\n\n    if (type === 'ERROR' && console.error) {\n      log = console.error.bind(console);\n    }\n\n    if (type === 'WARN' && console.warn) {\n      log = console.warn.bind(console);\n    }\n\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      log(prefix + \" - \" + msg[0]);\n    } else if (msg.length === 1) {\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      log(prefix, msg);\n    }\n  };\n  /**\r\n   * Write General log. Default to INFO\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\r\n   * Write INFO log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\r\n   * Write WARN log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['WARN'], msg));\n  };\n  /**\r\n   * Write ERROR log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['ERROR'], msg));\n  };\n  /**\r\n   * Write DEBUG log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['DEBUG'], msg));\n  };\n  /**\r\n   * Write VERBOSE log\r\n   * @method\r\n   * @memeberof Logger\r\n   * @param {string|object} msg - Logging message or object\r\n   */\n\n\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['VERBOSE'], msg));\n  };\n\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\n\nexport { ConsoleLogger };","map":{"version":3,"sources":["../../src/Logger/ConsoleLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nvar LOG_LEVELS = {\r\n    VERBOSE: 1,\r\n    DEBUG: 2,\r\n    INFO: 3,\r\n    WARN: 4,\r\n    ERROR: 5,\r\n};\r\n/**\r\n * Write logs\r\n * @class Logger\r\n */\r\nvar ConsoleLogger = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} name - Name of the logger\r\n     */\r\n    function ConsoleLogger(name, level) {\r\n        if (level === void 0) { level = 'WARN'; }\r\n        this.name = name;\r\n        this.level = level;\r\n    }\r\n    ConsoleLogger.prototype._padding = function (n) {\r\n        return n < 10 ? '0' + n : '' + n;\r\n    };\r\n    ConsoleLogger.prototype._ts = function () {\r\n        var dt = new Date();\r\n        return ([this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') +\r\n            '.' +\r\n            dt.getMilliseconds());\r\n    };\r\n    /**\r\n     * Write log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string} type - log type, default INFO\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype._log = function (type) {\r\n        var msg = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            msg[_i - 1] = arguments[_i];\r\n        }\r\n        var logger_level_name = this.level;\r\n        if (ConsoleLogger.LOG_LEVEL) {\r\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\r\n        }\r\n        if (typeof window !== 'undefined' && window.LOG_LEVEL) {\r\n            logger_level_name = window.LOG_LEVEL;\r\n        }\r\n        var logger_level = LOG_LEVELS[logger_level_name];\r\n        var type_level = LOG_LEVELS[type];\r\n        if (!(type_level >= logger_level)) {\r\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\r\n            return;\r\n        }\r\n        var log = console.log.bind(console);\r\n        if (type === 'ERROR' && console.error) {\r\n            log = console.error.bind(console);\r\n        }\r\n        if (type === 'WARN' && console.warn) {\r\n            log = console.warn.bind(console);\r\n        }\r\n        var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\r\n        if (msg.length === 1 && typeof msg[0] === 'string') {\r\n            log(prefix + \" - \" + msg[0]);\r\n        }\r\n        else if (msg.length === 1) {\r\n            log(prefix, msg[0]);\r\n        }\r\n        else if (typeof msg[0] === 'string') {\r\n            var obj = msg.slice(1);\r\n            if (obj.length === 1) {\r\n                obj = obj[0];\r\n            }\r\n            log(prefix + \" - \" + msg[0], obj);\r\n        }\r\n        else {\r\n            log(prefix, msg);\r\n        }\r\n    };\r\n    /**\r\n     * Write General log. Default to INFO\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.log = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['INFO'], msg));\r\n    };\r\n    /**\r\n     * Write INFO log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.info = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['INFO'], msg));\r\n    };\r\n    /**\r\n     * Write WARN log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.warn = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['WARN'], msg));\r\n    };\r\n    /**\r\n     * Write ERROR log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.error = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['ERROR'], msg));\r\n    };\r\n    /**\r\n     * Write DEBUG log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.debug = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['DEBUG'], msg));\r\n    };\r\n    /**\r\n     * Write VERBOSE log\r\n     * @method\r\n     * @memeberof Logger\r\n     * @param {string|object} msg - Logging message or object\r\n     */\r\n    ConsoleLogger.prototype.verbose = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, __spreadArrays(['VERBOSE'], msg));\r\n    };\r\n    ConsoleLogger.LOG_LEVEL = null;\r\n    return ConsoleLogger;\r\n}());\r\nexport { ConsoleLogger };\r\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"module"}