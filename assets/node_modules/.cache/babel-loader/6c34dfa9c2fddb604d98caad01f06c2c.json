{"ast":null,"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport StorageClass from './Storage';\nimport Amplify, { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Storage');\nvar _instance = null;\n\nif (!_instance) {\n  logger.debug('Create Storage Instance');\n  _instance = new StorageClass();\n  _instance.vault = new StorageClass();\n  var old_configure_1 = _instance.configure;\n\n  _instance.configure = function (options) {\n    logger.debug('storage configure called');\n\n    var vaultConfig = __assign({}, old_configure_1.call(_instance, options)); // set level private for each provider for the vault\n\n\n    Object.keys(vaultConfig).forEach(function (providerName) {\n      if (typeof vaultConfig[providerName] !== 'string') {\n        vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), {\n          level: 'private'\n        });\n      }\n    });\n    logger.debug('storage vault configure called');\n\n    _instance.vault.configure(vaultConfig);\n  };\n}\n\nvar Storage = _instance;\nAmplify.register(Storage);\nexport default Storage;\nexport { StorageClass };\nexport * from './Providers';","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;;;;;;;;;;;;;;;;;AAEH,OAAO,YAAP,MAAyB,WAAzB;AAGA,OAAO,OAAP,IAAkB,aAAa,IAAI,MAAnC,QAAiD,mBAAjD;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,SAAX,CAAf;AAEA,IAAI,SAAS,GAAiB,IAA9B;;AAEA,IAAI,CAAC,SAAL,EAAgB;AACf,EAAA,MAAM,CAAC,KAAP,CAAa,yBAAb;AACA,EAAA,SAAS,GAAG,IAAI,YAAJ,EAAZ;AACA,EAAA,SAAS,CAAC,KAAV,GAAkB,IAAI,YAAJ,EAAlB;AAEA,MAAM,eAAa,GAAG,SAAS,CAAC,SAAhC;;AACA,EAAA,SAAS,CAAC,SAAV,GAAsB,UAAA,OAAA,EAAO;AAC5B,IAAA,MAAM,CAAC,KAAP,CAAa,0BAAb;;AACA,QAAM,WAAW,GAAA,QAAA,CAAA,EAAA,EAAQ,eAAa,CAAC,IAAd,CAAmB,SAAnB,EAA8B,OAA9B,CAAR,CAAjB,CAF4B,CAI5B;;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,UAAA,YAAA,EAAY;AAC5C,UAAI,OAAO,WAAW,CAAC,YAAD,CAAlB,KAAqC,QAAzC,EAAmD;AAClD,QAAA,WAAW,CAAC,YAAD,CAAX,GAAyB,QAAA,CAAA,QAAA,CAAA,EAAA,EACrB,WAAW,CAAC,YAAD,CADU,CAAA,EACI;AAC5B,UAAA,KAAK,EAAE;AADqB,SADJ,CAAzB;AAIA;AACD,KAPD;AAQA,IAAA,MAAM,CAAC,KAAP,CAAa,gCAAb;;AACA,IAAA,SAAS,CAAC,KAAV,CAAgB,SAAhB,CAA0B,WAA1B;AACA,GAfD;AAgBA;;AAED,IAAM,OAAO,GAAG,SAAhB;AACA,OAAO,CAAC,QAAR,CAAiB,OAAjB;AAEA,eAAe,OAAf;AACA,SAAS,YAAT;AAEA,cAAc,aAAd","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport StorageClass from './Storage';\r\nimport Amplify, { ConsoleLogger as Logger } from '@aws-amplify/core';\r\nvar logger = new Logger('Storage');\r\nvar _instance = null;\r\nif (!_instance) {\r\n    logger.debug('Create Storage Instance');\r\n    _instance = new StorageClass();\r\n    _instance.vault = new StorageClass();\r\n    var old_configure_1 = _instance.configure;\r\n    _instance.configure = function (options) {\r\n        logger.debug('storage configure called');\r\n        var vaultConfig = __assign({}, old_configure_1.call(_instance, options));\r\n        // set level private for each provider for the vault\r\n        Object.keys(vaultConfig).forEach(function (providerName) {\r\n            if (typeof vaultConfig[providerName] !== 'string') {\r\n                vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), { level: 'private' });\r\n            }\r\n        });\r\n        logger.debug('storage vault configure called');\r\n        _instance.vault.configure(vaultConfig);\r\n    };\r\n}\r\nvar Storage = _instance;\r\nAmplify.register(Storage);\r\nexport default Storage;\r\nexport { StorageClass };\r\nexport * from './Providers';\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}