{"ast":null,"code":"/**\r\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport JS from '../JS';\nimport Amplify from '../Amplify';\n/**\r\n * Provides a means to registering a service worker in the browser\r\n * and communicating with it via postMessage events.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\r\n *\r\n * postMessage events are currently not supported in all browsers. See:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\r\n *\r\n * At the minmum this class will register the service worker and listen\r\n * and attempt to dispatch messages on state change and record analytics\r\n * events based on the service worker lifecycle.\r\n */\n\nvar ServiceWorkerClass =\n/** @class */\nfunction () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\r\n     * Get the currently active service worker\r\n     */\n    get: function get() {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Register the service-worker.js file in the browser\r\n   * Make sure the service-worker.js is part of the build\r\n   * for example with Angular, modify the angular-cli.json file\r\n   * and add to \"assets\" array \"service-worker.js\"\r\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\r\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\r\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\r\n   * @returns {Promise}\r\n   *\t- resolve(ServiceWorkerRegistration)\r\n   *\t- reject(Error)\r\n   **/\n\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n\n    if (scope === void 0) {\n      scope = '/';\n    }\n\n    this._logger.debug(\"registering \" + filePath);\n\n    this._logger.debug(\"registering service worker with scope \" + scope);\n\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n\n          _this._registration = registration;\n\n          _this._setupListeners();\n\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\r\n   * Enable web push notifications. If not subscribed, a new subscription will\r\n   * be created and registered.\r\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\r\n   * \tPush Server Libraries: https://github.com/web-push-libs/\r\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\r\n   * @param publicKey\r\n   * @returns {Promise}\r\n   * \t- resolve(PushSubscription)\r\n   *  - reject(Error)\r\n   */\n\n\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (JS.browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\r\n   * Convert a base64 encoded string to a Uint8 array for the push server key\r\n   * @param base64String\r\n   */\n\n\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  };\n  /**\r\n   * Send a message to the service worker. The service worker needs\r\n   * to implement `self.addEventListener('message') to handle the\r\n   * message. This ***currently*** does not work in Safari or IE.\r\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\r\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\r\n   * @returns {Promise}\r\n   **/\n\n\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\r\n   * Listen for service worker state change and message events\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\r\n   **/\n\n\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n\n  return ServiceWorkerClass;\n}();\n\nexport default ServiceWorkerClass;","map":{"version":3,"sources":["../../src/ServiceWorker/ServiceWorker.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AACH,SAAS,aAAa,IAAI,MAA1B,QAAwC,WAAxC;AACA,OAAO,EAAP,MAAe,OAAf;AACA,OAAO,OAAP,MAAoB,YAApB;AACA;;;;;;;;;;;AAWG;;AACH,IAAA,kBAAA;AAAA;AAAA,YAAA;AAiBC,WAAA,kBAAA,GAAA;AAHA;AACQ,SAAA,OAAA,GAAkB,IAAI,MAAJ,CAAW,eAAX,CAAlB;AAEQ;;AAKhB,EAAA,MAAA,CAAA,cAAA,CAAI,kBAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;AAHjB;;AAEG;SACH,eAAA;AACC,aAAO,KAAK,cAAZ;AACA,KAFgB;oBAAA;;AAAA,GAAjB;AAIA;;;;;;;;;;;AAWI;;AACJ,EAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAAkD,KAAlD,EAAqE;AAArE,QAAA,KAAA,GAAA,IAAA;;AAAS,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,oBAAA;AAAuC;;AAAE,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,GAAA;AAAmB;;AACpE,SAAK,OAAL,CAAa,KAAb,CAAmB,iBAAe,QAAlC;;AACA,SAAK,OAAL,CAAa,KAAb,CAAmB,2CAAyC,KAA5D;;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAClC,UAAI,SAAS,IAAI,mBAAmB,SAApC,EAA+C;AAC9C,QAAA,SAAS,CAAC,aAAV,CACE,QADF,CACW,QADX,EACqB;AACnB,UAAA,KAAK,EAAA;AADc,SADrB,EAIE,IAJF,CAIO,UAAA,YAAA,EAAY;AACjB,cAAI,YAAY,CAAC,UAAjB,EAA6B;AAC5B,YAAA,KAAI,CAAC,cAAL,GAAsB,YAAY,CAAC,UAAnC;AACA,WAFD,MAEO,IAAI,YAAY,CAAC,OAAjB,EAA0B;AAChC,YAAA,KAAI,CAAC,cAAL,GAAsB,YAAY,CAAC,OAAnC;AACA,WAFM,MAEA,IAAI,YAAY,CAAC,MAAjB,EAAyB;AAC/B,YAAA,KAAI,CAAC,cAAL,GAAsB,YAAY,CAAC,MAAnC;AACA;;AACD,UAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;;AACA,UAAA,KAAI,CAAC,eAAL;;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CACC,0CAAwC,YADzC;;AAGA,iBAAO,OAAO,CAAC,YAAD,CAAd;AACA,SAlBF,EAmBE,KAnBF,CAmBQ,UAAA,KAAA,EAAK;AACX,UAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,wCAAsC,KAAzD;;AACA,iBAAO,MAAM,CAAC,KAAD,CAAb;AACA,SAtBF;AAuBA,OAxBD,MAwBO;AACN,eAAO,MAAM,CAAC,IAAI,KAAJ,CAAU,8BAAV,CAAD,CAAb;AACA;AACD,KA5BM,CAAP;AA6BA,GAhCD;AAkCA;;;;;;;;;;AAUG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,SAAX,EAA4B;AAA5B,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,CAAC,KAAK,aAAV,EAAyB,MAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACzB,SAAK,UAAL,GAAkB,SAAlB;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAClC,UAAI,EAAE,CAAC,aAAH,GAAmB,SAAvB,EAAkC;AACjC,QAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,CAA+B,eAA/B,GAAiD,IAAjD,CAAsD,UAAA,YAAA,EAAY;AACjE,cAAI,YAAJ,EAAkB;AACjB,YAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;;AACA,YAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CACC,iCAA+B,IAAI,CAAC,SAAL,CAAe,YAAf,CADhC;;AAGA,YAAA,OAAO,CAAC,YAAD,CAAP;AACA,WAND,MAMO;AACN,YAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,gCAAnB;;AACA,mBAAO,KAAI,CAAC,aAAL,CAAmB,WAAnB,CACL,SADK,CACK;AACV,cAAA,eAAe,EAAE,IADP;AAEV,cAAA,oBAAoB,EAAE,KAAI,CAAC,mBAAL,CAAyB,SAAzB;AAFZ,aADL,EAKL,IALK,CAKA,UAAA,YAAA,EAAY;AACjB,cAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;;AACA,cAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CACC,sBAAoB,IAAI,CAAC,SAAL,CAAe,YAAf,CADrB;;AAGA,cAAA,OAAO,CAAC,YAAD,CAAP;AACA,aAXK,EAYL,KAZK,CAYC,UAAA,KAAA,EAAK;AACX,cAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,KAAnB;AACA,aAdK,CAAP;AAeA;AACD,SAzBD;AA0BA,OA3BD,MA2BO;AACN,eAAO,MAAM,CAAC,IAAI,KAAJ,CAAU,8BAAV,CAAD,CAAb;AACA;AACD,KA/BM,CAAP;AAgCA,GAnCD;AAqCA;;;AAGG;;;AACK,EAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,YAA5B,EAAgD;AAC/C,QAAM,OAAO,GAAG,IAAI,MAAJ,CAAW,CAAC,IAAK,YAAY,CAAC,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB;AACA,QAAM,MAAM,GAAG,CAAC,YAAY,GAAG,OAAhB,EACb,OADa,CACL,KADK,EACE,GADF,EAEb,OAFa,CAEL,IAFK,EAEC,GAFD,CAAf;AAIA,QAAM,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAhB;AACA,QAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,MAAvB,CAApB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,EAAE,CAAtC,EAAyC;AACxC,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,OAAO,CAAC,UAAR,CAAmB,CAAnB,CAAjB;AACA;;AACD,WAAO,WAAP;AACA,GAbO;AAeR;;;;;;;AAOI;;;AACJ,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,OAAL,EAA6B;AAC5B,QAAI,KAAK,cAAT,EAAyB;AACxB,WAAK,cAAL,CAAoB,WAApB,CACC,OAAO,OAAP,KAAmB,QAAnB,GAA8B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA9B,GAAwD,OADzD;AAGA;AACD,GAND;AAQA;;;AAGI;;;AACJ,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,SAAK,cAAL,CAAoB,gBAApB,CAAqC,aAArC,EAAoD,UAAA,KAAA,EAAK;AACxD,UAAM,YAAY,GAAG,KAAI,CAAC,cAAL,CAAoB,KAAzC;;AACA,MAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,gCAA8B,YAAjD;;AACA,UAAI,OAAO,CAAC,SAAR,IAAqB,OAAO,OAAO,CAAC,SAAR,CAAkB,MAAzB,KAAoC,UAA7D,EAAyE;AACxE,QAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB,CAAyB;AACxB,UAAA,IAAI,EAAE,eADkB;AAExB,UAAA,UAAU,EAAE;AACX,YAAA,KAAK,EAAE;AADI;AAFY,SAAzB;AAMA;AACD,KAXD;;AAYA,SAAK,cAAL,CAAoB,gBAApB,CAAqC,SAArC,EAAgD,UAAA,KAAA,EAAK;AACpD,MAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB,kCAAgC,KAAnD;AACA,KAFD;AAGA,GAhBD;;AAiBD,SAAA,kBAAA;AAAC,CAhLD,EAAA;;AAkLA,eAAe,kBAAf","sourceRoot":"","sourcesContent":["/**\r\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport { ConsoleLogger as Logger } from '../Logger';\r\nimport JS from '../JS';\r\nimport Amplify from '../Amplify';\r\n/**\r\n * Provides a means to registering a service worker in the browser\r\n * and communicating with it via postMessage events.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\r\n *\r\n * postMessage events are currently not supported in all browsers. See:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\r\n *\r\n * At the minmum this class will register the service worker and listen\r\n * and attempt to dispatch messages on state change and record analytics\r\n * events based on the service worker lifecycle.\r\n */\r\nvar ServiceWorkerClass = /** @class */ (function () {\r\n    function ServiceWorkerClass() {\r\n        // The AWS Amplify logger\r\n        this._logger = new Logger('ServiceWorker');\r\n    }\r\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\r\n        /**\r\n         * Get the currently active service worker\r\n         */\r\n        get: function () {\r\n            return this._serviceWorker;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Register the service-worker.js file in the browser\r\n     * Make sure the service-worker.js is part of the build\r\n     * for example with Angular, modify the angular-cli.json file\r\n     * and add to \"assets\" array \"service-worker.js\"\r\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\r\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\r\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\r\n     * @returns {Promise}\r\n     *\t- resolve(ServiceWorkerRegistration)\r\n     *\t- reject(Error)\r\n     **/\r\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\r\n        var _this = this;\r\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\r\n        if (scope === void 0) { scope = '/'; }\r\n        this._logger.debug(\"registering \" + filePath);\r\n        this._logger.debug(\"registering service worker with scope \" + scope);\r\n        return new Promise(function (resolve, reject) {\r\n            if (navigator && 'serviceWorker' in navigator) {\r\n                navigator.serviceWorker\r\n                    .register(filePath, {\r\n                    scope: scope,\r\n                })\r\n                    .then(function (registration) {\r\n                    if (registration.installing) {\r\n                        _this._serviceWorker = registration.installing;\r\n                    }\r\n                    else if (registration.waiting) {\r\n                        _this._serviceWorker = registration.waiting;\r\n                    }\r\n                    else if (registration.active) {\r\n                        _this._serviceWorker = registration.active;\r\n                    }\r\n                    _this._registration = registration;\r\n                    _this._setupListeners();\r\n                    _this._logger.debug(\"Service Worker Registration Success: \" + registration);\r\n                    return resolve(registration);\r\n                })\r\n                    .catch(function (error) {\r\n                    _this._logger.debug(\"Service Worker Registration Failed \" + error);\r\n                    return reject(error);\r\n                });\r\n            }\r\n            else {\r\n                return reject(new Error('Service Worker not available'));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Enable web push notifications. If not subscribed, a new subscription will\r\n     * be created and registered.\r\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\r\n     * \tPush Server Libraries: https://github.com/web-push-libs/\r\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\r\n     * @param publicKey\r\n     * @returns {Promise}\r\n     * \t- resolve(PushSubscription)\r\n     *  - reject(Error)\r\n     */\r\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\r\n        var _this = this;\r\n        if (!this._registration)\r\n            throw new Error('Service Worker not registered');\r\n        this._publicKey = publicKey;\r\n        return new Promise(function (resolve, reject) {\r\n            if (JS.browserOrNode().isBrowser) {\r\n                _this._registration.pushManager.getSubscription().then(function (subscription) {\r\n                    if (subscription) {\r\n                        _this._subscription = subscription;\r\n                        _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\r\n                        resolve(subscription);\r\n                    }\r\n                    else {\r\n                        _this._logger.debug(\"User is NOT subscribed to push\");\r\n                        return _this._registration.pushManager\r\n                            .subscribe({\r\n                            userVisibleOnly: true,\r\n                            applicationServerKey: _this._urlB64ToUint8Array(publicKey),\r\n                        })\r\n                            .then(function (subscription) {\r\n                            _this._subscription = subscription;\r\n                            _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\r\n                            resolve(subscription);\r\n                        })\r\n                            .catch(function (error) {\r\n                            _this._logger.error(error);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                return reject(new Error('Service Worker not available'));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Convert a base64 encoded string to a Uint8 array for the push server key\r\n     * @param base64String\r\n     */\r\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\r\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n        var base64 = (base64String + padding)\r\n            .replace(/\\-/g, '+')\r\n            .replace(/_/g, '/');\r\n        var rawData = window.atob(base64);\r\n        var outputArray = new Uint8Array(rawData.length);\r\n        for (var i = 0; i < rawData.length; ++i) {\r\n            outputArray[i] = rawData.charCodeAt(i);\r\n        }\r\n        return outputArray;\r\n    };\r\n    /**\r\n     * Send a message to the service worker. The service worker needs\r\n     * to implement `self.addEventListener('message') to handle the\r\n     * message. This ***currently*** does not work in Safari or IE.\r\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\r\n     *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\r\n     * @returns {Promise}\r\n     **/\r\n    ServiceWorkerClass.prototype.send = function (message) {\r\n        if (this._serviceWorker) {\r\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\r\n        }\r\n    };\r\n    /**\r\n     * Listen for service worker state change and message events\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\r\n     **/\r\n    ServiceWorkerClass.prototype._setupListeners = function () {\r\n        var _this = this;\r\n        this._serviceWorker.addEventListener('statechange', function (event) {\r\n            var currentState = _this._serviceWorker.state;\r\n            _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\r\n            if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\r\n                Amplify.Analytics.record({\r\n                    name: 'ServiceWorker',\r\n                    attributes: {\r\n                        state: currentState,\r\n                    },\r\n                });\r\n            }\r\n        });\r\n        this._serviceWorker.addEventListener('message', function (event) {\r\n            _this._logger.debug(\"ServiceWorker message event: \" + event);\r\n        });\r\n    };\r\n    return ServiceWorkerClass;\r\n}());\r\nexport default ServiceWorkerClass;\r\n//# sourceMappingURL=ServiceWorker.js.map"]},"metadata":{},"sourceType":"module"}