{"ast":null,"code":"var AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n/**\r\n * The endpoint that a service will talk to, for example,\r\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\r\n * you need to override an endpoint for a service, you can\r\n * set the endpoint on a service by passing the endpoint\r\n * object with the `endpoint` option key:\r\n *\r\n * ```javascript\r\n * var ep = new AWS.Endpoint('awsproxy.example.com');\r\n * var s3 = new AWS.S3({endpoint: ep});\r\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\r\n * ```\r\n *\r\n * Note that if you do not specify a protocol, the protocol will\r\n * be selected based on your current {AWS.config} configuration.\r\n *\r\n * @!attribute protocol\r\n *   @return [String] the protocol (http or https) of the endpoint\r\n *     URL\r\n * @!attribute hostname\r\n *   @return [String] the host portion of the endpoint, e.g.,\r\n *     example.com\r\n * @!attribute host\r\n *   @return [String] the host portion of the endpoint including\r\n *     the port, e.g., example.com:80\r\n * @!attribute port\r\n *   @return [Integer] the port of the endpoint\r\n * @!attribute href\r\n *   @return [String] the full URL of the endpoint\r\n */\n\nAWS.Endpoint = inherit({\n  /**\r\n   * @overload Endpoint(endpoint)\r\n   *   Constructs a new endpoint given an endpoint URL. If the\r\n   *   URL omits a protocol (http or https), the default protocol\r\n   *   set in the global {AWS.config} will be used.\r\n   *   @param endpoint [String] the URL to construct an endpoint from\r\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint)); // Ensure the port property is set as an integer\n\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n});\n/**\r\n * The low level HTTP request object, encapsulating all HTTP header\r\n * and body data sent by a service request.\r\n *\r\n * @!attribute method\r\n *   @return [String] the HTTP method of the request\r\n * @!attribute path\r\n *   @return [String] the path portion of the URI, e.g.,\r\n *     \"/list/?start=5&num=10\"\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *     a map of header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the request body payload\r\n * @!attribute endpoint\r\n *   @return [AWS.Endpoint] the endpoint for the request\r\n * @!attribute region\r\n *   @api private\r\n *   @return [String] the region, for signing purposes only.\r\n */\n\nAWS.HttpRequest = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this._userAgent = '';\n    this.setUserAgent();\n  },\n\n  /**\r\n   * @api private\r\n   */\n  setUserAgent: function setUserAgent() {\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n  },\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    return prefix + 'User-Agent';\n  },\n\n  /**\r\n   * @api private\r\n   */\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\n    if (typeof agentPartial === 'string' && agentPartial) {\n      this._userAgent += ' ' + agentPartial;\n    }\n\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n  },\n\n  /**\r\n   * @api private\r\n   */\n  getUserAgent: function getUserAgent() {\n    return this._userAgent;\n  },\n\n  /**\r\n   * @return [String] the part of the {path} excluding the\r\n   *   query string\r\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\r\n   * @return [String] the query string portion of the {path}\r\n   */\n  search: function search() {\n    var query = this.path.split('?', 2)[1];\n\n    if (query) {\n      query = AWS.util.queryStringParse(query);\n      return AWS.util.queryParamsToString(query);\n    }\n\n    return '';\n  },\n\n  /**\r\n   * @api private\r\n   * update httpRequest endpoint with endpoint string\r\n   */\n  updateEndpoint: function updateEndpoint(endpointStr) {\n    var newEndpoint = new AWS.Endpoint(endpointStr);\n    this.endpoint = newEndpoint;\n    this.path = newEndpoint.path || '/';\n  }\n});\n/**\r\n * The low level HTTP response object, encapsulating all HTTP header\r\n * and body data returned from the request.\r\n *\r\n * @!attribute statusCode\r\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *      a map of response header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the response body payload\r\n * @!attribute [r] streaming\r\n *   @return [Boolean] whether this response is being streamed at a low-level.\r\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\r\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\r\n *     instead.\r\n */\n\nAWS.HttpResponse = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n    this.streaming = false;\n    this.stream = null;\n  },\n\n  /**\r\n   * Disables buffering on the HTTP response and returns the stream for reading.\r\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\r\n   *   Use this object to directly read data off of the stream.\r\n   * @note This object is only available after the {AWS.Request~httpHeaders}\r\n   *   event has fired. This method must be called prior to\r\n   *   {AWS.Request~httpData}.\r\n   * @example Taking control of a stream\r\n   *   request.on('httpHeaders', function(statusCode, headers) {\r\n   *     if (statusCode < 300) {\r\n   *       if (headers.etag === 'xyz') {\r\n   *         // pipe the stream, disabling buffering\r\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\r\n   *         stream.pipe(process.stdout);\r\n   *       } else { // abort this request and set a better error message\r\n   *         this.abort();\r\n   *         this.response.error = new Error('Invalid ETag');\r\n   *       }\r\n   *     }\r\n   *   }).send(console.log);\r\n   */\n  createUnbufferedStream: function createUnbufferedStream() {\n    this.streaming = true;\n    return this.stream;\n  }\n});\nAWS.HttpClient = inherit({});\n/**\r\n * @api private\r\n */\n\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n\n  return this.singleton;\n};","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/http.js"],"names":["AWS","require","inherit","util","Endpoint","constructor","endpoint","config","hideProperties","Error","copy","match","useSSL","sslEnabled","undefined","update","urlParse","port","parseInt","protocol","HttpRequest","region","method","path","headers","body","_userAgent","setUserAgent","getUserAgentHeaderName","userAgent","prefix","isBrowser","appendToUserAgent","agentPartial","getUserAgent","pathname","split","search","query","queryStringParse","queryParamsToString","updateEndpoint","endpointStr","newEndpoint","HttpResponse","statusCode","streaming","stream","createUnbufferedStream","HttpClient","getInstance","singleton"],"mappings":"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","sourcesContent":["var AWS = require('./core');\r\nvar inherit = AWS.util.inherit;\r\n\r\n/**\r\n * The endpoint that a service will talk to, for example,\r\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\r\n * you need to override an endpoint for a service, you can\r\n * set the endpoint on a service by passing the endpoint\r\n * object with the `endpoint` option key:\r\n *\r\n * ```javascript\r\n * var ep = new AWS.Endpoint('awsproxy.example.com');\r\n * var s3 = new AWS.S3({endpoint: ep});\r\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\r\n * ```\r\n *\r\n * Note that if you do not specify a protocol, the protocol will\r\n * be selected based on your current {AWS.config} configuration.\r\n *\r\n * @!attribute protocol\r\n *   @return [String] the protocol (http or https) of the endpoint\r\n *     URL\r\n * @!attribute hostname\r\n *   @return [String] the host portion of the endpoint, e.g.,\r\n *     example.com\r\n * @!attribute host\r\n *   @return [String] the host portion of the endpoint including\r\n *     the port, e.g., example.com:80\r\n * @!attribute port\r\n *   @return [Integer] the port of the endpoint\r\n * @!attribute href\r\n *   @return [String] the full URL of the endpoint\r\n */\r\nAWS.Endpoint = inherit({\r\n\r\n  /**\r\n   * @overload Endpoint(endpoint)\r\n   *   Constructs a new endpoint given an endpoint URL. If the\r\n   *   URL omits a protocol (http or https), the default protocol\r\n   *   set in the global {AWS.config} will be used.\r\n   *   @param endpoint [String] the URL to construct an endpoint from\r\n   */\r\n  constructor: function Endpoint(endpoint, config) {\r\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\r\n\r\n    if (typeof endpoint === 'undefined' || endpoint === null) {\r\n      throw new Error('Invalid endpoint: ' + endpoint);\r\n    } else if (typeof endpoint !== 'string') {\r\n      return AWS.util.copy(endpoint);\r\n    }\r\n\r\n    if (!endpoint.match(/^http/)) {\r\n      var useSSL = config && config.sslEnabled !== undefined ?\r\n        config.sslEnabled : AWS.config.sslEnabled;\r\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\r\n    }\r\n\r\n    AWS.util.update(this, AWS.util.urlParse(endpoint));\r\n\r\n    // Ensure the port property is set as an integer\r\n    if (this.port) {\r\n      this.port = parseInt(this.port, 10);\r\n    } else {\r\n      this.port = this.protocol === 'https:' ? 443 : 80;\r\n    }\r\n  }\r\n\r\n});\r\n\r\n/**\r\n * The low level HTTP request object, encapsulating all HTTP header\r\n * and body data sent by a service request.\r\n *\r\n * @!attribute method\r\n *   @return [String] the HTTP method of the request\r\n * @!attribute path\r\n *   @return [String] the path portion of the URI, e.g.,\r\n *     \"/list/?start=5&num=10\"\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *     a map of header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the request body payload\r\n * @!attribute endpoint\r\n *   @return [AWS.Endpoint] the endpoint for the request\r\n * @!attribute region\r\n *   @api private\r\n *   @return [String] the region, for signing purposes only.\r\n */\r\nAWS.HttpRequest = inherit({\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  constructor: function HttpRequest(endpoint, region) {\r\n    endpoint = new AWS.Endpoint(endpoint);\r\n    this.method = 'POST';\r\n    this.path = endpoint.path || '/';\r\n    this.headers = {};\r\n    this.body = '';\r\n    this.endpoint = endpoint;\r\n    this.region = region;\r\n    this._userAgent = '';\r\n    this.setUserAgent();\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setUserAgent: function setUserAgent() {\r\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\r\n  },\r\n\r\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\r\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\r\n    return prefix + 'User-Agent';\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\r\n    if (typeof agentPartial === 'string' && agentPartial) {\r\n      this._userAgent += ' ' + agentPartial;\r\n    }\r\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getUserAgent: function getUserAgent() {\r\n    return this._userAgent;\r\n  },\r\n\r\n  /**\r\n   * @return [String] the part of the {path} excluding the\r\n   *   query string\r\n   */\r\n  pathname: function pathname() {\r\n    return this.path.split('?', 1)[0];\r\n  },\r\n\r\n  /**\r\n   * @return [String] the query string portion of the {path}\r\n   */\r\n  search: function search() {\r\n    var query = this.path.split('?', 2)[1];\r\n    if (query) {\r\n      query = AWS.util.queryStringParse(query);\r\n      return AWS.util.queryParamsToString(query);\r\n    }\r\n    return '';\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * update httpRequest endpoint with endpoint string\r\n   */\r\n  updateEndpoint: function updateEndpoint(endpointStr) {\r\n    var newEndpoint = new AWS.Endpoint(endpointStr);\r\n    this.endpoint = newEndpoint;\r\n    this.path = newEndpoint.path || '/';\r\n  }\r\n});\r\n\r\n/**\r\n * The low level HTTP response object, encapsulating all HTTP header\r\n * and body data returned from the request.\r\n *\r\n * @!attribute statusCode\r\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *      a map of response header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the response body payload\r\n * @!attribute [r] streaming\r\n *   @return [Boolean] whether this response is being streamed at a low-level.\r\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\r\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\r\n *     instead.\r\n */\r\nAWS.HttpResponse = inherit({\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  constructor: function HttpResponse() {\r\n    this.statusCode = undefined;\r\n    this.headers = {};\r\n    this.body = undefined;\r\n    this.streaming = false;\r\n    this.stream = null;\r\n  },\r\n\r\n  /**\r\n   * Disables buffering on the HTTP response and returns the stream for reading.\r\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\r\n   *   Use this object to directly read data off of the stream.\r\n   * @note This object is only available after the {AWS.Request~httpHeaders}\r\n   *   event has fired. This method must be called prior to\r\n   *   {AWS.Request~httpData}.\r\n   * @example Taking control of a stream\r\n   *   request.on('httpHeaders', function(statusCode, headers) {\r\n   *     if (statusCode < 300) {\r\n   *       if (headers.etag === 'xyz') {\r\n   *         // pipe the stream, disabling buffering\r\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\r\n   *         stream.pipe(process.stdout);\r\n   *       } else { // abort this request and set a better error message\r\n   *         this.abort();\r\n   *         this.response.error = new Error('Invalid ETag');\r\n   *       }\r\n   *     }\r\n   *   }).send(console.log);\r\n   */\r\n  createUnbufferedStream: function createUnbufferedStream() {\r\n    this.streaming = true;\r\n    return this.stream;\r\n  }\r\n});\r\n\r\n\r\nAWS.HttpClient = inherit({});\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.HttpClient.getInstance = function getInstance() {\r\n  if (this.singleton === undefined) {\r\n    this.singleton = new this();\r\n  }\r\n  return this.singleton;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}