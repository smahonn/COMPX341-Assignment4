{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\r\n * @api private\r\n */\n\nAWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {\n  addAuthorization: function addAuthorization(credentials, date) {\n    if (!date) date = AWS.util.date.getDate();\n    var r = this.request;\n    r.params.Timestamp = AWS.util.date.iso8601(date);\n    r.params.SignatureVersion = '2';\n    r.params.SignatureMethod = 'HmacSHA256';\n    r.params.AWSAccessKeyId = credentials.accessKeyId;\n\n    if (credentials.sessionToken) {\n      r.params.SecurityToken = credentials.sessionToken;\n    }\n\n    delete r.params.Signature; // delete old Signature for re-signing\n\n    r.params.Signature = this.signature(credentials);\n    r.body = AWS.util.queryParamsToString(r.params);\n    r.headers['Content-Length'] = r.body.length;\n  },\n  signature: function signature(credentials) {\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');\n  },\n  stringToSign: function stringToSign() {\n    var parts = [];\n    parts.push(this.request.method);\n    parts.push(this.request.endpoint.host.toLowerCase());\n    parts.push(this.request.pathname());\n    parts.push(AWS.util.queryParamsToString(this.request.params));\n    return parts.join('\\n');\n  }\n});\n/**\r\n * @api private\r\n */\n\nmodule.exports = AWS.Signers.V2;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/signers/v2.js"],"names":["AWS","require","inherit","util","Signers","V2","RequestSigner","addAuthorization","credentials","date","getDate","r","request","params","Timestamp","iso8601","SignatureVersion","SignatureMethod","AWSAccessKeyId","accessKeyId","sessionToken","SecurityToken","Signature","signature","body","queryParamsToString","headers","length","crypto","hmac","secretAccessKey","stringToSign","parts","push","method","endpoint","host","toLowerCase","pathname","join","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASD,OAAvB;AAEA;AACA;AACA;;AACAF,GAAG,CAACI,OAAJ,CAAYC,EAAZ,GAAiBH,OAAO,CAACF,GAAG,CAACI,OAAJ,CAAYE,aAAb,EAA4B;AAClDC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,WAA1B,EAAuCC,IAAvC,EAA6C;AAE7D,QAAI,CAACA,IAAL,EAAWA,IAAI,GAAGT,GAAG,CAACG,IAAJ,CAASM,IAAT,CAAcC,OAAd,EAAP;AAEX,QAAIC,CAAC,GAAG,KAAKC,OAAb;AAEAD,IAAAA,CAAC,CAACE,MAAF,CAASC,SAAT,GAAqBd,GAAG,CAACG,IAAJ,CAASM,IAAT,CAAcM,OAAd,CAAsBN,IAAtB,CAArB;AACAE,IAAAA,CAAC,CAACE,MAAF,CAASG,gBAAT,GAA4B,GAA5B;AACAL,IAAAA,CAAC,CAACE,MAAF,CAASI,eAAT,GAA2B,YAA3B;AACAN,IAAAA,CAAC,CAACE,MAAF,CAASK,cAAT,GAA0BV,WAAW,CAACW,WAAtC;;AAEA,QAAIX,WAAW,CAACY,YAAhB,EAA8B;AAC5BT,MAAAA,CAAC,CAACE,MAAF,CAASQ,aAAT,GAAyBb,WAAW,CAACY,YAArC;AACD;;AAED,WAAOT,CAAC,CAACE,MAAF,CAASS,SAAhB,CAf6D,CAelC;;AAC3BX,IAAAA,CAAC,CAACE,MAAF,CAASS,SAAT,GAAqB,KAAKC,SAAL,CAAef,WAAf,CAArB;AAEAG,IAAAA,CAAC,CAACa,IAAF,GAASxB,GAAG,CAACG,IAAJ,CAASsB,mBAAT,CAA6Bd,CAAC,CAACE,MAA/B,CAAT;AACAF,IAAAA,CAAC,CAACe,OAAF,CAAU,gBAAV,IAA8Bf,CAAC,CAACa,IAAF,CAAOG,MAArC;AACD,GArBiD;AAuBlDJ,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBf,WAAnB,EAAgC;AACzC,WAAOR,GAAG,CAACG,IAAJ,CAASyB,MAAT,CAAgBC,IAAhB,CAAqBrB,WAAW,CAACsB,eAAjC,EAAkD,KAAKC,YAAL,EAAlD,EAAuE,QAAvE,CAAP;AACD,GAzBiD;AA2BlDA,EAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,QAAIC,KAAK,GAAG,EAAZ;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKrB,OAAL,CAAasB,MAAxB;AACAF,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKrB,OAAL,CAAauB,QAAb,CAAsBC,IAAtB,CAA2BC,WAA3B,EAAX;AACAL,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKrB,OAAL,CAAa0B,QAAb,EAAX;AACAN,IAAAA,KAAK,CAACC,IAAN,CAAWjC,GAAG,CAACG,IAAJ,CAASsB,mBAAT,CAA6B,KAAKb,OAAL,CAAaC,MAA1C,CAAX;AACA,WAAOmB,KAAK,CAACO,IAAN,CAAW,IAAX,CAAP;AACD;AAlCiD,CAA5B,CAAxB;AAsCA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiBzC,GAAG,CAACI,OAAJ,CAAYC,EAA7B","sourcesContent":["var AWS = require('../core');\r\nvar inherit = AWS.util.inherit;\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {\r\n  addAuthorization: function addAuthorization(credentials, date) {\r\n\r\n    if (!date) date = AWS.util.date.getDate();\r\n\r\n    var r = this.request;\r\n\r\n    r.params.Timestamp = AWS.util.date.iso8601(date);\r\n    r.params.SignatureVersion = '2';\r\n    r.params.SignatureMethod = 'HmacSHA256';\r\n    r.params.AWSAccessKeyId = credentials.accessKeyId;\r\n\r\n    if (credentials.sessionToken) {\r\n      r.params.SecurityToken = credentials.sessionToken;\r\n    }\r\n\r\n    delete r.params.Signature; // delete old Signature for re-signing\r\n    r.params.Signature = this.signature(credentials);\r\n\r\n    r.body = AWS.util.queryParamsToString(r.params);\r\n    r.headers['Content-Length'] = r.body.length;\r\n  },\r\n\r\n  signature: function signature(credentials) {\r\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');\r\n  },\r\n\r\n  stringToSign: function stringToSign() {\r\n    var parts = [];\r\n    parts.push(this.request.method);\r\n    parts.push(this.request.endpoint.host.toLowerCase());\r\n    parts.push(this.request.pathname());\r\n    parts.push(AWS.util.queryParamsToString(this.request.params));\r\n    return parts.join('\\n');\r\n  }\r\n\r\n});\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = AWS.Signers.V2;\r\n"]},"metadata":{},"sourceType":"script"}