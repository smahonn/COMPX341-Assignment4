{"ast":null,"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar DoubleLinkedNode =\n/** @class */\nfunction () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n\n  return DoubleLinkedNode;\n}();\n/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\n\n\nvar CacheList =\n/** @class */\nfunction () {\n  /**\r\n   * initialization\r\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\r\n   * insert node to the head of the list\r\n   *\r\n   * @param node\r\n   */\n\n\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\r\n   * remove node\r\n   *\r\n   * @param node\r\n   */\n\n\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\r\n   * @return true if list is empty\r\n   */\n\n\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\r\n   * refresh node so it is rotated to the head\r\n   *\r\n   * @param key - key of the node\r\n   */\n\n\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\r\n   * insert new node to the head and add it in the hashtable\r\n   *\r\n   * @param key - the key of the node\r\n   */\n\n\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\r\n   * @return the LAST Recently Visited key\r\n   */\n\n\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\r\n   * remove the cache key from the list and hashtable\r\n   * @param key - the key of the node\r\n   */\n\n\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\r\n   * @return length of the list\r\n   */\n\n\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\r\n   * @return true if the key is in the hashtable\r\n   * @param key\r\n   */\n\n\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\r\n   * clean up the list and hashtable\r\n   */\n\n\n  CacheList.prototype.clearList = function () {\n    for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (this.hashtable.hasOwnProperty(key)) {\n        delete this.hashtable[key];\n      }\n    }\n\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\r\n   * @return all keys in the hashtable\r\n   */\n\n\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\r\n   * mainly for test\r\n   *\r\n   * @param key\r\n   * @return true if key is the head node\r\n   */\n\n\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\r\n   * mainly for test\r\n   *\r\n   * @param key\r\n   * @return true if key is the tail node\r\n   */\n\n\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n\n  return CacheList;\n}();\n\nexport default CacheList;","map":{"version":3,"sources":["../../src/Utils/CacheList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar DoubleLinkedNode = /** @class */ (function () {\r\n    function DoubleLinkedNode(keyVal) {\r\n        this.key = keyVal ? keyVal : '';\r\n        this.prevNode = null;\r\n        this.nextNode = null;\r\n    }\r\n    return DoubleLinkedNode;\r\n}());\r\n/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\r\nvar CacheList = /** @class */ (function () {\r\n    /**\r\n     * initialization\r\n     */\r\n    function CacheList() {\r\n        this.head = new DoubleLinkedNode();\r\n        this.tail = new DoubleLinkedNode();\r\n        this.hashtable = {};\r\n        this.length = 0;\r\n        this.head.nextNode = this.tail;\r\n        this.tail.prevNode = this.head;\r\n    }\r\n    /**\r\n     * insert node to the head of the list\r\n     *\r\n     * @param node\r\n     */\r\n    CacheList.prototype.insertNodeToHead = function (node) {\r\n        var tmp = this.head.nextNode;\r\n        this.head.nextNode = node;\r\n        node.nextNode = tmp;\r\n        node.prevNode = this.head;\r\n        tmp.prevNode = node;\r\n        this.length = this.length + 1;\r\n    };\r\n    /**\r\n     * remove node\r\n     *\r\n     * @param node\r\n     */\r\n    CacheList.prototype.removeNode = function (node) {\r\n        node.prevNode.nextNode = node.nextNode;\r\n        node.nextNode.prevNode = node.prevNode;\r\n        node.prevNode = null;\r\n        node.nextNode = null;\r\n        this.length = this.length - 1;\r\n    };\r\n    /**\r\n     * @return true if list is empty\r\n     */\r\n    CacheList.prototype.isEmpty = function () {\r\n        return this.length === 0;\r\n    };\r\n    /**\r\n     * refresh node so it is rotated to the head\r\n     *\r\n     * @param key - key of the node\r\n     */\r\n    CacheList.prototype.refresh = function (key) {\r\n        var node = this.hashtable[key];\r\n        this.removeNode(node);\r\n        this.insertNodeToHead(node);\r\n    };\r\n    /**\r\n     * insert new node to the head and add it in the hashtable\r\n     *\r\n     * @param key - the key of the node\r\n     */\r\n    CacheList.prototype.insertItem = function (key) {\r\n        var node = new DoubleLinkedNode(key);\r\n        this.hashtable[key] = node;\r\n        this.insertNodeToHead(node);\r\n    };\r\n    /**\r\n     * @return the LAST Recently Visited key\r\n     */\r\n    CacheList.prototype.getLastItem = function () {\r\n        return this.tail.prevNode.key;\r\n    };\r\n    /**\r\n     * remove the cache key from the list and hashtable\r\n     * @param key - the key of the node\r\n     */\r\n    CacheList.prototype.removeItem = function (key) {\r\n        var removedItem = this.hashtable[key];\r\n        this.removeNode(removedItem);\r\n        delete this.hashtable[key];\r\n    };\r\n    /**\r\n     * @return length of the list\r\n     */\r\n    CacheList.prototype.getSize = function () {\r\n        return this.length;\r\n    };\r\n    /**\r\n     * @return true if the key is in the hashtable\r\n     * @param key\r\n     */\r\n    CacheList.prototype.containsKey = function (key) {\r\n        return key in this.hashtable;\r\n    };\r\n    /**\r\n     * clean up the list and hashtable\r\n     */\r\n    CacheList.prototype.clearList = function () {\r\n        for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            if (this.hashtable.hasOwnProperty(key)) {\r\n                delete this.hashtable[key];\r\n            }\r\n        }\r\n        this.head.nextNode = this.tail;\r\n        this.tail.prevNode = this.head;\r\n        this.length = 0;\r\n    };\r\n    /**\r\n     * @return all keys in the hashtable\r\n     */\r\n    CacheList.prototype.getKeys = function () {\r\n        return Object.keys(this.hashtable);\r\n    };\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the head node\r\n     */\r\n    CacheList.prototype.isHeadNode = function (key) {\r\n        var node = this.hashtable[key];\r\n        return node.prevNode === this.head;\r\n    };\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the tail node\r\n     */\r\n    CacheList.prototype.isTailNode = function (key) {\r\n        var node = this.hashtable[key];\r\n        return node.nextNode === this.tail;\r\n    };\r\n    return CacheList;\r\n}());\r\nexport default CacheList;\r\n//# sourceMappingURL=CacheList.js.map"]},"metadata":{},"sourceType":"module"}