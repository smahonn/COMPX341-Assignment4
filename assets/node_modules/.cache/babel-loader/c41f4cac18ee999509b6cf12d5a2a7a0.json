{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\r\n * Produces a GraphQL Value AST given a JavaScript value.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * JavaScript values.\r\n *\r\n * | JSON Value    | GraphQL Value        |\r\n * | ------------- | -------------------- |\r\n * | Object        | Input Object         |\r\n * | Array         | List                 |\r\n * | Boolean       | Boolean              |\r\n * | String        | String / Enum Value  |\r\n * | Number        | Int / Float          |\r\n * | Mixed         | Enum Value           |\r\n * | null          | NullValue            |\r\n *\r\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (value === null || _typeof(value) !== 'object') {\n      return null;\n    }\n\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var field = _step.value;\n        var fieldValue = astFromValue(value[field.name], field.type);\n\n        if (fieldValue) {\n          fieldNodes.push({\n            kind: Kind.OBJECT_FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: field.name\n            },\n            value: fieldValue\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n}\n/**\r\n * IntValue:\r\n *   - NegativeSign? 0\r\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\r\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/utilities/astFromValue.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","forEach","isCollection","inspect","isNullish","isInvalid","objectValues","Kind","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","GraphQLID","astFromValue","value","type","astValue","ofType","kind","NULL","itemType","valuesNodes","item","itemNode","push","LIST","values","fields","getFields","fieldNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","_step","next","done","field","fieldValue","name","OBJECT_FIELD","NAME","err","return","OBJECT","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat","Error"],"mappings":"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","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\n/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport { forEach, isCollection } from 'iterall';\r\nimport inspect from '../jsutils/inspect';\r\nimport isNullish from '../jsutils/isNullish';\r\nimport isInvalid from '../jsutils/isInvalid';\r\nimport objectValues from '../jsutils/objectValues';\r\nimport { Kind } from '../language/kinds';\r\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\r\nimport { GraphQLID } from '../type/scalars';\r\n/**\r\n * Produces a GraphQL Value AST given a JavaScript value.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * JavaScript values.\r\n *\r\n * | JSON Value    | GraphQL Value        |\r\n * | ------------- | -------------------- |\r\n * | Object        | Input Object         |\r\n * | Array         | List                 |\r\n * | Boolean       | Boolean              |\r\n * | String        | String / Enum Value  |\r\n * | Number        | Int / Float          |\r\n * | Mixed         | Enum Value           |\r\n * | null          | NullValue            |\r\n *\r\n */\r\n\r\nexport function astFromValue(value, type) {\r\n  if (isNonNullType(type)) {\r\n    var astValue = astFromValue(value, type.ofType);\r\n\r\n    if (astValue && astValue.kind === Kind.NULL) {\r\n      return null;\r\n    }\r\n\r\n    return astValue;\r\n  } // only explicit null, not undefined, NaN\r\n\r\n\r\n  if (value === null) {\r\n    return {\r\n      kind: Kind.NULL\r\n    };\r\n  } // undefined, NaN\r\n\r\n\r\n  if (isInvalid(value)) {\r\n    return null;\r\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\r\n  // the value is not an array, convert the value using the list's item type.\r\n\r\n\r\n  if (isListType(type)) {\r\n    var itemType = type.ofType;\r\n\r\n    if (isCollection(value)) {\r\n      var valuesNodes = [];\r\n      forEach(value, function (item) {\r\n        var itemNode = astFromValue(item, itemType);\r\n\r\n        if (itemNode) {\r\n          valuesNodes.push(itemNode);\r\n        }\r\n      });\r\n      return {\r\n        kind: Kind.LIST,\r\n        values: valuesNodes\r\n      };\r\n    }\r\n\r\n    return astFromValue(value, itemType);\r\n  } // Populate the fields of the input object by creating ASTs from each value\r\n  // in the JavaScript object according to the fields in the input type.\r\n\r\n\r\n  if (isInputObjectType(type)) {\r\n    if (value === null || _typeof(value) !== 'object') {\r\n      return null;\r\n    }\r\n\r\n    var fields = objectValues(type.getFields());\r\n    var fieldNodes = [];\r\n    var _iteratorNormalCompletion = true;\r\n    var _didIteratorError = false;\r\n    var _iteratorError = undefined;\r\n\r\n    try {\r\n      for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\r\n        var field = _step.value;\r\n        var fieldValue = astFromValue(value[field.name], field.type);\r\n\r\n        if (fieldValue) {\r\n          fieldNodes.push({\r\n            kind: Kind.OBJECT_FIELD,\r\n            name: {\r\n              kind: Kind.NAME,\r\n              value: field.name\r\n            },\r\n            value: fieldValue\r\n          });\r\n        }\r\n      }\r\n    } catch (err) {\r\n      _didIteratorError = true;\r\n      _iteratorError = err;\r\n    } finally {\r\n      try {\r\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\r\n          _iterator.return();\r\n        }\r\n      } finally {\r\n        if (_didIteratorError) {\r\n          throw _iteratorError;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      kind: Kind.OBJECT,\r\n      fields: fieldNodes\r\n    };\r\n  }\r\n\r\n  if (isScalarType(type) || isEnumType(type)) {\r\n    // Since value is an internally represented value, it must be serialized\r\n    // to an externally represented value before converting into an AST.\r\n    var serialized = type.serialize(value);\r\n\r\n    if (isNullish(serialized)) {\r\n      return null;\r\n    } // Others serialize based on their corresponding JavaScript scalar types.\r\n\r\n\r\n    if (typeof serialized === 'boolean') {\r\n      return {\r\n        kind: Kind.BOOLEAN,\r\n        value: serialized\r\n      };\r\n    } // JavaScript numbers can be Int or Float values.\r\n\r\n\r\n    if (typeof serialized === 'number') {\r\n      var stringNum = String(serialized);\r\n      return integerStringRegExp.test(stringNum) ? {\r\n        kind: Kind.INT,\r\n        value: stringNum\r\n      } : {\r\n        kind: Kind.FLOAT,\r\n        value: stringNum\r\n      };\r\n    }\r\n\r\n    if (typeof serialized === 'string') {\r\n      // Enum types use Enum literals.\r\n      if (isEnumType(type)) {\r\n        return {\r\n          kind: Kind.ENUM,\r\n          value: serialized\r\n        };\r\n      } // ID types can use Int literals.\r\n\r\n\r\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\r\n        return {\r\n          kind: Kind.INT,\r\n          value: serialized\r\n        };\r\n      }\r\n\r\n      return {\r\n        kind: Kind.STRING,\r\n        value: serialized\r\n      };\r\n    }\r\n\r\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\r\n  }\r\n  /* istanbul ignore next */\r\n\r\n\r\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\r\n}\r\n/**\r\n * IntValue:\r\n *   - NegativeSign? 0\r\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\r\n */\r\n\r\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;"]},"metadata":{},"sourceType":"module"}