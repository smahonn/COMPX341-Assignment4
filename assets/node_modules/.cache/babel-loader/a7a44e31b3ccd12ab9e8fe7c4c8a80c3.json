{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\nimport invariant from '../jsutils/invariant';\nimport { visit, visitInParallel, visitWithTypeInfo } from '../language/visitor';\nimport { assertValidSchema } from '../type/validate';\nimport { TypeInfo } from '../utilities/TypeInfo';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules';\nimport { SDLValidationContext, ValidationContext } from './ValidationContext';\n/**\r\n * Implements the \"Validation\" section of the spec.\r\n *\r\n * Validation runs synchronously, returning an array of encountered errors, or\r\n * an empty array if no errors were encountered and the document is valid.\r\n *\r\n * A list of specific validation rules may be provided. If not provided, the\r\n * default list of rules defined by the GraphQL specification will be used.\r\n *\r\n * Each validation rules is a function which returns a visitor\r\n * (see the language/visitor API). Visitor methods are expected to return\r\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\r\n *\r\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\r\n * will be created from the provided schema.\r\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  !documentAST ? invariant(0, 'Must provide document') : void 0; // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var context = new ValidationContext(schema, documentAST, typeInfo); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n} // @internal\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var context = new SDLValidationContext(documentAST, schemaToExtend);\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return context.getErrors();\n}\n/**\r\n * Utility function which asserts a SDL document is valid by throwing an error\r\n * if it is invalid.\r\n *\r\n * @internal\r\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\r\n * Utility function which asserts a SDL document is valid by throwing an error\r\n * if it is invalid.\r\n *\r\n * @internal\r\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/@aws-amplify/api/node_modules/graphql/validation/validate.mjs"],"names":["invariant","visit","visitInParallel","visitWithTypeInfo","assertValidSchema","TypeInfo","specifiedRules","specifiedSDLRules","SDLValidationContext","ValidationContext","validate","schema","documentAST","rules","arguments","length","undefined","typeInfo","context","visitor","map","rule","getErrors","validateSDL","schemaToExtend","visitors","assertValidSDL","errors","Error","error","message","join","assertValidSDLExtension"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n *  strict\r\n */\r\nimport invariant from '../jsutils/invariant';\r\nimport { visit, visitInParallel, visitWithTypeInfo } from '../language/visitor';\r\nimport { assertValidSchema } from '../type/validate';\r\nimport { TypeInfo } from '../utilities/TypeInfo';\r\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules';\r\nimport { SDLValidationContext, ValidationContext } from './ValidationContext';\r\n/**\r\n * Implements the \"Validation\" section of the spec.\r\n *\r\n * Validation runs synchronously, returning an array of encountered errors, or\r\n * an empty array if no errors were encountered and the document is valid.\r\n *\r\n * A list of specific validation rules may be provided. If not provided, the\r\n * default list of rules defined by the GraphQL specification will be used.\r\n *\r\n * Each validation rules is a function which returns a visitor\r\n * (see the language/visitor API). Visitor methods are expected to return\r\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\r\n *\r\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\r\n * will be created from the provided schema.\r\n */\r\n\r\nexport function validate(schema, documentAST) {\r\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\r\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\r\n  !documentAST ? invariant(0, 'Must provide document') : void 0; // If the schema used for validation is invalid, throw an error.\r\n\r\n  assertValidSchema(schema);\r\n  var context = new ValidationContext(schema, documentAST, typeInfo); // This uses a specialized visitor which runs multiple visitors in parallel,\r\n  // while maintaining the visitor skip and break API.\r\n\r\n  var visitor = visitInParallel(rules.map(function (rule) {\r\n    return rule(context);\r\n  })); // Visit the whole document with each instance of all provided rules.\r\n\r\n  visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\r\n  return context.getErrors();\r\n} // @internal\r\n\r\nexport function validateSDL(documentAST, schemaToExtend) {\r\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\r\n  var context = new SDLValidationContext(documentAST, schemaToExtend);\r\n  var visitors = rules.map(function (rule) {\r\n    return rule(context);\r\n  });\r\n  visit(documentAST, visitInParallel(visitors));\r\n  return context.getErrors();\r\n}\r\n/**\r\n * Utility function which asserts a SDL document is valid by throwing an error\r\n * if it is invalid.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function assertValidSDL(documentAST) {\r\n  var errors = validateSDL(documentAST);\r\n\r\n  if (errors.length !== 0) {\r\n    throw new Error(errors.map(function (error) {\r\n      return error.message;\r\n    }).join('\\n\\n'));\r\n  }\r\n}\r\n/**\r\n * Utility function which asserts a SDL document is valid by throwing an error\r\n * if it is invalid.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function assertValidSDLExtension(documentAST, schema) {\r\n  var errors = validateSDL(documentAST, schema);\r\n\r\n  if (errors.length !== 0) {\r\n    throw new Error(errors.map(function (error) {\r\n      return error.message;\r\n    }).join('\\n\\n'));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}