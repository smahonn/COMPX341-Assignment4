{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n/** @class */\n\nvar CognitoUserPool = function () {\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {object} data.Storage Optional storage object.\r\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n   *        boolean flag indicating if the data collection is enabled\r\n   *        to support cognito advanced security features. By default, this\r\n   *        flag is set to true.\r\n   */\n  function CognitoUserPool(data) {\n    _classCallCheck(this, CognitoUserPool);\n\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint);\n    /**\r\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n     * if no input value is provided.\r\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n  }\n  /**\r\n   * @returns {string} the user pool id\r\n   */\n\n\n  CognitoUserPool.prototype.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  };\n  /**\r\n   * @returns {string} the client id\r\n   */\n\n\n  CognitoUserPool.prototype.getClientId = function getClientId() {\n    return this.clientId;\n  };\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\n\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @returns {void}\r\n   */\n\n\n  CognitoUserPool.prototype.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  };\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */\n\n\n  CognitoUserPool.prototype.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  };\n  /**\r\n   * This method returns the encoded data string used for cognito advanced security feature.\r\n   * This would be generated only when developer has included the JS used for collecting the\r\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n   * features\r\n   * @param {string} username the username for the context data\r\n   * @returns {string} the user context data\r\n   **/\n\n\n  CognitoUserPool.prototype.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport default CognitoUserPool;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Client","CognitoUser","StorageHelper","CognitoUserPool","data","_ref","UserPoolId","ClientId","endpoint","AdvancedSecurityDataCollectionFlag","Error","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","prototype","getUserPoolId","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Client from './Client';\r\nimport CognitoUser from './CognitoUser';\r\nimport StorageHelper from './StorageHelper';\r\n\r\n/** @class */\r\n\r\nvar CognitoUserPool = function () {\r\n\t/**\r\n  * Constructs a new CognitoUserPool object\r\n  * @param {object} data Creation options.\r\n  * @param {string} data.UserPoolId Cognito user pool id.\r\n  * @param {string} data.ClientId User pool application client id.\r\n  * @param {object} data.Storage Optional storage object.\r\n  * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n  *        boolean flag indicating if the data collection is enabled\r\n  *        to support cognito advanced security features. By default, this\r\n  *        flag is set to true.\r\n  */\r\n\tfunction CognitoUserPool(data) {\r\n\t\t_classCallCheck(this, CognitoUserPool);\r\n\r\n\t\tvar _ref = data || {},\r\n\t\t    UserPoolId = _ref.UserPoolId,\r\n\t\t    ClientId = _ref.ClientId,\r\n\t\t    endpoint = _ref.endpoint,\r\n\t\t    AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\r\n\r\n\t\tif (!UserPoolId || !ClientId) {\r\n\t\t\tthrow new Error('Both UserPoolId and ClientId are required.');\r\n\t\t}\r\n\t\tif (!/^[\\w-]+_.+$/.test(UserPoolId)) {\r\n\t\t\tthrow new Error('Invalid UserPoolId format.');\r\n\t\t}\r\n\t\tvar region = UserPoolId.split('_')[0];\r\n\r\n\t\tthis.userPoolId = UserPoolId;\r\n\t\tthis.clientId = ClientId;\r\n\r\n\t\tthis.client = new Client(region, endpoint);\r\n\r\n\t\t/**\r\n   * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n   * if no input value is provided.\r\n   */\r\n\t\tthis.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\r\n\r\n\t\tthis.storage = data.Storage || new StorageHelper().getStorage();\r\n\t}\r\n\r\n\t/**\r\n  * @returns {string} the user pool id\r\n  */\r\n\r\n\r\n\tCognitoUserPool.prototype.getUserPoolId = function getUserPoolId() {\r\n\t\treturn this.userPoolId;\r\n\t};\r\n\r\n\t/**\r\n  * @returns {string} the client id\r\n  */\r\n\r\n\r\n\tCognitoUserPool.prototype.getClientId = function getClientId() {\r\n\t\treturn this.clientId;\r\n\t};\r\n\r\n\t/**\r\n  * @typedef {object} SignUpResult\r\n  * @property {CognitoUser} user New user.\r\n  * @property {bool} userConfirmed If the user is already confirmed.\r\n  */\r\n\t/**\r\n  * method for signing up a user\r\n  * @param {string} username User's username.\r\n  * @param {string} password Plain-text initial password entered by user.\r\n  * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n  * @param {(AttributeArg[])=} validationData Application metadata.\r\n  * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n  * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n  * @returns {void}\r\n  */\r\n\r\n\r\n\tCognitoUserPool.prototype.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\r\n\t\tvar _this = this;\r\n\r\n\t\tvar jsonReq = {\r\n\t\t\tClientId: this.clientId,\r\n\t\t\tUsername: username,\r\n\t\t\tPassword: password,\r\n\t\t\tUserAttributes: userAttributes,\r\n\t\t\tValidationData: validationData,\r\n\t\t\tClientMetadata: clientMetadata\r\n\t\t};\r\n\t\tif (this.getUserContextData(username)) {\r\n\t\t\tjsonReq.UserContextData = this.getUserContextData(username);\r\n\t\t}\r\n\t\tthis.client.request('SignUp', jsonReq, function (err, data) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn callback(err, null);\r\n\t\t\t}\r\n\r\n\t\t\tvar cognitoUser = {\r\n\t\t\t\tUsername: username,\r\n\t\t\t\tPool: _this,\r\n\t\t\t\tStorage: _this.storage\r\n\t\t\t};\r\n\r\n\t\t\tvar returnData = {\r\n\t\t\t\tuser: new CognitoUser(cognitoUser),\r\n\t\t\t\tuserConfirmed: data.UserConfirmed,\r\n\t\t\t\tuserSub: data.UserSub,\r\n\t\t\t\tcodeDeliveryDetails: data.CodeDeliveryDetails\r\n\t\t\t};\r\n\r\n\t\t\treturn callback(null, returnData);\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n  * method for getting the current user of the application from the local storage\r\n  *\r\n  * @returns {CognitoUser} the user retrieved from storage\r\n  */\r\n\r\n\r\n\tCognitoUserPool.prototype.getCurrentUser = function getCurrentUser() {\r\n\t\tvar lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\r\n\r\n\t\tvar lastAuthUser = this.storage.getItem(lastUserKey);\r\n\t\tif (lastAuthUser) {\r\n\t\t\tvar cognitoUser = {\r\n\t\t\t\tUsername: lastAuthUser,\r\n\t\t\t\tPool: this,\r\n\t\t\t\tStorage: this.storage\r\n\t\t\t};\r\n\r\n\t\t\treturn new CognitoUser(cognitoUser);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n  * This method returns the encoded data string used for cognito advanced security feature.\r\n  * This would be generated only when developer has included the JS used for collecting the\r\n  * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n  * features\r\n  * @param {string} username the username for the context data\r\n  * @returns {string} the user context data\r\n  **/\r\n\r\n\r\n\tCognitoUserPool.prototype.getUserContextData = function getUserContextData(username) {\r\n\t\tif (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t/* eslint-disable */\r\n\t\tvar amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\r\n\t\t/* eslint-enable */\r\n\r\n\t\tif (this.advancedSecurityDataCollectionFlag) {\r\n\t\t\tvar advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\r\n\t\t\tif (advancedSecurityData) {\r\n\t\t\t\tvar userContextData = {\r\n\t\t\t\t\tEncodedData: advancedSecurityData\r\n\t\t\t\t};\r\n\t\t\t\treturn userContextData;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {};\r\n\t};\r\n\r\n\treturn CognitoUserPool;\r\n}();\r\n\r\nexport default CognitoUserPool;"]},"metadata":{},"sourceType":"module"}