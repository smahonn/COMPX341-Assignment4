{"ast":null,"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nvar lists = [];\n\nvar MethodEmbed =\n/** @class */\nfunction () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n\n    this.context[this.methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return methodOverride(_this._originalMethod.apply(_this, args));\n    };\n  };\n\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n\n  return MethodEmbed;\n}();\n\nexport default MethodEmbed;\n\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n\n  return instance;\n}","map":{"version":3,"sources":["../../src/utils/MethodEmbed.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AAEH,IAAM,KAAK,GAAkB,EAA7B;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;AAcC,WAAA,WAAA,CAAY,OAAZ,EAAqB,UAArB,EAA+B;AAC9B,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,UAAL,GAAkB,UAAlB;AAEA,SAAK,eAAL,GAAuB,OAAO,CAAC,UAAD,CAAP,CAAoB,IAApB,CAAyB,OAAzB,CAAvB;AACA;;AAbM,EAAA,WAAA,CAAA,GAAA,GAAP,UAAW,OAAX,EAAoB,UAApB,EAAgC,cAAhC,EAA8C;AAC7C,IAAA,WAAW,CAAC,OAAD,EAAU,UAAV,CAAX,CAAiC,GAAjC,CAAqC,cAArC;AACA,GAFM;;AAIA,EAAA,WAAA,CAAA,MAAA,GAAP,UAAc,OAAd,EAAuB,UAAvB,EAAiC;AAChC,IAAA,WAAW,CAAC,OAAD,EAAU,UAAV,CAAX,CAAiC,MAAjC;AACA,GAFM;;AAWA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,cAAX,EAAyB;AAAzB,QAAA,KAAA,GAAA,IAAA;;AACC,SAAK,OAAL,CAAa,KAAK,UAAlB,IAAgC,YAAA;AAAC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAO;AAAP,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAChC,aAAO,cAAc,CAAC,KAAI,CAAC,eAAL,CAAoB,KAApB,CAAA,KAAA,EAAwB,IAAxB,CAAD,CAArB;AACA,KAFD;AAGA,GAJM;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACC,SAAK,OAAL,CAAa,KAAK,UAAlB,IAAgC,KAAK,eAArC;AACA,GAFM;;AAGR,SAAA,WAAA;AAAC,CA9BD,EAAA;;;;AAgCA,SAAS,WAAT,CAAqB,OAArB,EAA8B,UAA9B,EAAwC;AACvC,MAAI,QAAQ,GAAG,KAAK,CAAC,MAAN,CACd,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,OAAF,KAAc,OAAd,IAAyB,CAAC,CAAC,UAAF,KAAzB,UAAA;AAAoD,GAD3C,EAEb,CAFa,CAAf;;AAIA,MAAI,CAAC,QAAL,EAAe;AACd,IAAA,QAAQ,GAAG,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,UAAzB,CAAX;AACA,IAAA,KAAK,CAAC,IAAN,CAAW,QAAX;AACA;;AAED,SAAO,QAAP;AACA","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar lists = [];\r\nvar MethodEmbed = /** @class */ (function () {\r\n    function MethodEmbed(context, methodName) {\r\n        this.context = context;\r\n        this.methodName = methodName;\r\n        this._originalMethod = context[methodName].bind(context);\r\n    }\r\n    MethodEmbed.add = function (context, methodName, methodOverride) {\r\n        getInstance(context, methodName).set(methodOverride);\r\n    };\r\n    MethodEmbed.remove = function (context, methodName) {\r\n        getInstance(context, methodName).remove();\r\n    };\r\n    MethodEmbed.prototype.set = function (methodOverride) {\r\n        var _this = this;\r\n        this.context[this.methodName] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            return methodOverride(_this._originalMethod.apply(_this, args));\r\n        };\r\n    };\r\n    MethodEmbed.prototype.remove = function () {\r\n        this.context[this.methodName] = this._originalMethod;\r\n    };\r\n    return MethodEmbed;\r\n}());\r\nexport default MethodEmbed;\r\nfunction getInstance(context, methodName) {\r\n    var instance = lists.filter(function (h) { return h.context === context && h.methodName === methodName; })[0];\r\n    if (!instance) {\r\n        instance = new MethodEmbed(context, methodName);\r\n        lists.push(instance);\r\n    }\r\n    return instance;\r\n}\r\n//# sourceMappingURL=MethodEmbed.js.map"]},"metadata":{},"sourceType":"module"}