{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\n\nvar Interactions =\n/** @class */\nfunction () {\n  /**\r\n   * Initialize PubSub with AWS configurations\r\n   *\r\n   * @param {InteractionsOptions} options - Configuration object for Interactions\r\n   */\n  function Interactions(options) {\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n\n  Interactions.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\r\n   *\r\n   * @param {InteractionsOptions} options - Configuration object for Interactions\r\n   * @return {Object} - The current configuration\r\n   */\n\n\n  Interactions.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    } // Check if AWSLex provider is already on pluggables\n\n\n    if (!this._pluggables.AWSLexProvider && bots_config && Object.keys(bots_config).map(function (key) {\n      return bots_config[key];\n    }).find(function (bot) {\n      return !bot.providerName || bot.providerName === 'AWSLexProvider';\n    })) {\n      this._pluggables.AWSLexProvider = new AWSLexProvider();\n    }\n\n    Object.keys(this._pluggables).map(function (key) {\n      _this._pluggables[key].configure(_this._options.bots);\n    });\n    return this._options;\n  };\n\n  Interactions.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        pluggable.configure(this._options.bots);\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Bot ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n\n  Interactions.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              throw new Error('Bot ' + botname + ' does not exist');\n            }\n\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n            if (!this._pluggables[botProvider]) {\n              throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n            }\n\n            return [4\n            /*yield*/\n            , this._pluggables[botProvider].sendMessage(botname, message)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  Interactions.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n\n  return Interactions;\n}();\n\nexport default Interactions;","map":{"version":3,"sources":["../src/Interactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\nimport { AWSLexProvider } from './Providers';\r\nvar logger = new Logger('Interactions');\r\nvar Interactions = /** @class */ (function () {\r\n    /**\r\n     * Initialize PubSub with AWS configurations\r\n     *\r\n     * @param {InteractionsOptions} options - Configuration object for Interactions\r\n     */\r\n    function Interactions(options) {\r\n        this._options = options;\r\n        logger.debug('Interactions Options', this._options);\r\n        this._pluggables = {};\r\n    }\r\n    Interactions.prototype.getModuleName = function () {\r\n        return 'Interactions';\r\n    };\r\n    /**\r\n     *\r\n     * @param {InteractionsOptions} options - Configuration object for Interactions\r\n     * @return {Object} - The current configuration\r\n     */\r\n    Interactions.prototype.configure = function (options) {\r\n        var _this = this;\r\n        var opt = options ? options.Interactions || options : {};\r\n        logger.debug('configure Interactions', { opt: opt });\r\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\r\n        var aws_bots_config = this._options.aws_bots_config;\r\n        var bots_config = this._options.bots;\r\n        if (!Object.keys(bots_config).length && aws_bots_config) {\r\n            // Convert aws_bots_config to bots object\r\n            if (Array.isArray(aws_bots_config)) {\r\n                aws_bots_config.forEach(function (bot) {\r\n                    _this._options.bots[bot.name] = bot;\r\n                });\r\n            }\r\n        }\r\n        // Check if AWSLex provider is already on pluggables\r\n        if (!this._pluggables.AWSLexProvider &&\r\n            bots_config &&\r\n            Object.keys(bots_config)\r\n                .map(function (key) { return bots_config[key]; })\r\n                .find(function (bot) { return !bot.providerName || bot.providerName === 'AWSLexProvider'; })) {\r\n            this._pluggables.AWSLexProvider = new AWSLexProvider();\r\n        }\r\n        Object.keys(this._pluggables).map(function (key) {\r\n            _this._pluggables[key].configure(_this._options.bots);\r\n        });\r\n        return this._options;\r\n    };\r\n    Interactions.prototype.addPluggable = function (pluggable) {\r\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\r\n            if (!this._pluggables[pluggable.getProviderName()]) {\r\n                pluggable.configure(this._options.bots);\r\n                this._pluggables[pluggable.getProviderName()] = pluggable;\r\n                return;\r\n            }\r\n            else {\r\n                throw new Error('Bot ' + pluggable.getProviderName() + ' already plugged');\r\n            }\r\n        }\r\n    };\r\n    Interactions.prototype.send = function (botname, message) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var botProvider;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this._options.bots || !this._options.bots[botname]) {\r\n                            throw new Error('Bot ' + botname + ' does not exist');\r\n                        }\r\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\r\n                        if (!this._pluggables[botProvider]) {\r\n                            throw new Error('Bot ' +\r\n                                botProvider +\r\n                                ' does not have valid pluggin did you try addPluggable first?');\r\n                        }\r\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Interactions.prototype.onComplete = function (botname, callback) {\r\n        if (!this._options.bots || !this._options.bots[botname]) {\r\n            throw new Error('Bot ' + botname + ' does not exist');\r\n        }\r\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\r\n        if (!this._pluggables[botProvider]) {\r\n            throw new Error('Bot ' +\r\n                botProvider +\r\n                ' does not have valid pluggin did you try addPluggable first?');\r\n        }\r\n        this._pluggables[botProvider].onComplete(botname, callback);\r\n    };\r\n    return Interactions;\r\n}());\r\nexport default Interactions;\r\n//# sourceMappingURL=Interactions.js.map"]},"metadata":{},"sourceType":"module"}