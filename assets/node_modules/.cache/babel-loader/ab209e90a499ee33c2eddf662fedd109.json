{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\r\n * @api private\r\n */\n\nAWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {\n  addAuthorization: function addAuthorization(credentials, date) {\n    var datetime = AWS.util.date.rfc822(date);\n    this.request.headers['X-Amz-Date'] = datetime;\n\n    if (credentials.sessionToken) {\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n\n    this.request.headers['X-Amzn-Authorization'] = this.authorization(credentials, datetime);\n  },\n  authorization: function authorization(credentials) {\n    return 'AWS3 ' + 'AWSAccessKeyId=' + credentials.accessKeyId + ',' + 'Algorithm=HmacSHA256,' + 'SignedHeaders=' + this.signedHeaders() + ',' + 'Signature=' + this.signature(credentials);\n  },\n  signedHeaders: function signedHeaders() {\n    var headers = [];\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {\n      headers.push(h.toLowerCase());\n    });\n    return headers.sort().join(';');\n  },\n  canonicalHeaders: function canonicalHeaders() {\n    var headers = this.request.headers;\n    var parts = [];\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {\n      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());\n    });\n    return parts.sort().join('\\n') + '\\n';\n  },\n  headersToSign: function headersToSign() {\n    var headers = [];\n    AWS.util.each(this.request.headers, function iterator(k) {\n      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {\n        headers.push(k);\n      }\n    });\n    return headers;\n  },\n  signature: function signature(credentials) {\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');\n  },\n  stringToSign: function stringToSign() {\n    var parts = [];\n    parts.push(this.request.method);\n    parts.push('/');\n    parts.push('');\n    parts.push(this.canonicalHeaders());\n    parts.push(this.request.body);\n    return AWS.util.crypto.sha256(parts.join('\\n'));\n  }\n});\n/**\r\n * @api private\r\n */\n\nmodule.exports = AWS.Signers.V3;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/signers/v3.js"],"names":["AWS","require","inherit","util","Signers","V3","RequestSigner","addAuthorization","credentials","date","datetime","rfc822","request","headers","sessionToken","authorization","accessKeyId","signedHeaders","signature","arrayEach","headersToSign","iterator","h","push","toLowerCase","sort","join","canonicalHeaders","parts","trim","String","each","k","match","crypto","hmac","secretAccessKey","stringToSign","method","body","sha256","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\r\nvar inherit = AWS.util.inherit;\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {\r\n  addAuthorization: function addAuthorization(credentials, date) {\r\n\r\n    var datetime = AWS.util.date.rfc822(date);\r\n\r\n    this.request.headers['X-Amz-Date'] = datetime;\r\n\r\n    if (credentials.sessionToken) {\r\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\r\n    }\r\n\r\n    this.request.headers['X-Amzn-Authorization'] =\r\n      this.authorization(credentials, datetime);\r\n\r\n  },\r\n\r\n  authorization: function authorization(credentials) {\r\n    return 'AWS3 ' +\r\n      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +\r\n      'Algorithm=HmacSHA256,' +\r\n      'SignedHeaders=' + this.signedHeaders() + ',' +\r\n      'Signature=' + this.signature(credentials);\r\n  },\r\n\r\n  signedHeaders: function signedHeaders() {\r\n    var headers = [];\r\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {\r\n      headers.push(h.toLowerCase());\r\n    });\r\n    return headers.sort().join(';');\r\n  },\r\n\r\n  canonicalHeaders: function canonicalHeaders() {\r\n    var headers = this.request.headers;\r\n    var parts = [];\r\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {\r\n      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());\r\n    });\r\n    return parts.sort().join('\\n') + '\\n';\r\n  },\r\n\r\n  headersToSign: function headersToSign() {\r\n    var headers = [];\r\n    AWS.util.each(this.request.headers, function iterator(k) {\r\n      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {\r\n        headers.push(k);\r\n      }\r\n    });\r\n    return headers;\r\n  },\r\n\r\n  signature: function signature(credentials) {\r\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');\r\n  },\r\n\r\n  stringToSign: function stringToSign() {\r\n    var parts = [];\r\n    parts.push(this.request.method);\r\n    parts.push('/');\r\n    parts.push('');\r\n    parts.push(this.canonicalHeaders());\r\n    parts.push(this.request.body);\r\n    return AWS.util.crypto.sha256(parts.join('\\n'));\r\n  }\r\n\r\n});\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = AWS.Signers.V3;\r\n"]},"metadata":{},"sourceType":"script"}