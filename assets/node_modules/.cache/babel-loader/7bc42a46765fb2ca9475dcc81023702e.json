{"ast":null,"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport Amplify from '../Amplify';\nvar logger = new Logger('I18n');\nvar _config = null;\nvar _i18n = null;\n/**\r\n * Export I18n APIs\r\n */\n\nvar I18n =\n/** @class */\nfunction () {\n  function I18n() {}\n  /**\r\n   * @static\r\n   * @method\r\n   * Configure I18n part\r\n   * @param {Object} config - Configuration of the I18n\r\n   */\n\n\n  I18n.configure = function (config) {\n    logger.debug('configure I18n');\n\n    if (!config) {\n      return _config;\n    }\n\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  };\n\n  I18n.getModuleName = function () {\n    return 'I18n';\n  };\n  /**\r\n   * @static\r\n   * @method\r\n   * Create an instance of I18n for the library\r\n   */\n\n\n  I18n.createInstance = function () {\n    logger.debug('create I18n instance');\n\n    if (_i18n) {\n      return;\n    }\n\n    _i18n = new I18nClass(_config);\n  };\n  /**\r\n   * @static @method\r\n   * Explicitly setting language\r\n   * @param {String} lang\r\n   */\n\n\n  I18n.setLanguage = function (lang) {\n    I18n.checkConfig();\n    return _i18n.setLanguage(lang);\n  };\n  /**\r\n   * @static @method\r\n   * Get value\r\n   * @param {String} key\r\n   * @param {String} defVal - Default value\r\n   */\n\n\n  I18n.get = function (key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n\n    return _i18n.get(key, defVal);\n  };\n  /**\r\n   * @static\r\n   * @method\r\n   * Add vocabularies for one language\r\n   * @param {String} langurage - Language of the dictionary\r\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\r\n   */\n\n\n  I18n.putVocabulariesForLanguage = function (language, vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabulariesForLanguage(language, vocabularies);\n  };\n  /**\r\n   * @static\r\n   * @method\r\n   * Add vocabularies for one language\r\n   * @param {Object} vocabularies - Object that has language as key,\r\n   *                                vocabularies of each language as value\r\n   */\n\n\n  I18n.putVocabularies = function (vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabularies(vocabularies);\n  };\n\n  I18n.checkConfig = function () {\n    if (!_i18n) {\n      _i18n = new I18nClass(_config);\n    }\n\n    return true;\n  };\n\n  return I18n;\n}();\n\nAmplify.register(I18n);\nexport default I18n;","map":{"version":3,"sources":["../../src/I18n/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AAEH,SAAS,IAAI,IAAI,SAAjB,QAAkC,QAAlC;AAEA,SAAS,aAAa,IAAI,MAA1B,QAAwC,WAAxC;AACA,OAAO,OAAP,MAAoB,YAApB;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,MAAX,CAAf;AAEA,IAAI,OAAO,GAAG,IAAd;AACA,IAAI,KAAK,GAAG,IAAZ;AAEA;;AAEG;;AACH,IAAA,IAAA;AAAA;AAAA,YAAA;AAAA,WAAA,IAAA,GAAA,CA+FC;AA9FA;;;;;AAKG;;;AACI,EAAA,IAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAuB;AACtB,IAAA,MAAM,CAAC,KAAP,CAAa,gBAAb;;AACA,QAAI,CAAC,MAAL,EAAa;AACZ,aAAO,OAAP;AACA;;AAED,IAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,OAAlB,EAA2B,MAAM,CAAC,IAAP,IAAe,MAA1C,CAAV;AAEA,IAAA,IAAI,CAAC,cAAL;AAEA,WAAO,OAAP;AACA,GAXM;;AAaA,EAAA,IAAA,CAAA,aAAA,GAAP,YAAA;AACC,WAAO,MAAP;AACA,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,IAAA,CAAA,cAAA,GAAP,YAAA;AACC,IAAA,MAAM,CAAC,KAAP,CAAa,sBAAb;;AACA,QAAI,KAAJ,EAAW;AACV;AACA;;AACD,IAAA,KAAK,GAAG,IAAI,SAAJ,CAAc,OAAd,CAAR;AACA,GANM;AAQP;;;;AAIG;;;AACI,EAAA,IAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAAuB;AACtB,IAAA,IAAI,CAAC,WAAL;AAEA,WAAO,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAP;AACA,GAJM;AAMP;;;;;AAKG;;;AACI,EAAA,IAAA,CAAA,GAAA,GAAP,UAAW,GAAX,EAAgB,MAAhB,EAAuB;AACtB,QAAI,CAAC,IAAI,CAAC,WAAL,EAAL,EAAyB;AACxB,aAAO,OAAO,MAAP,KAAkB,WAAlB,GAAgC,GAAhC,GAAsC,MAA7C;AACA;;AAED,WAAO,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe,MAAf,CAAP;AACA,GANM;AAQP;;;;;;AAMG;;;AACI,EAAA,IAAA,CAAA,0BAAA,GAAP,UAAkC,QAAlC,EAA4C,YAA5C,EAAwD;AACvD,IAAA,IAAI,CAAC,WAAL;AAEA,WAAO,KAAK,CAAC,0BAAN,CAAiC,QAAjC,EAA2C,YAA3C,CAAP;AACA,GAJM;AAMP;;;;;;AAMG;;;AACI,EAAA,IAAA,CAAA,eAAA,GAAP,UAAuB,YAAvB,EAAmC;AAClC,IAAA,IAAI,CAAC,WAAL;AAEA,WAAO,KAAK,CAAC,eAAN,CAAsB,YAAtB,CAAP;AACA,GAJM;;AAMO,EAAA,IAAA,CAAA,WAAA,GAAd,YAAA;AACC,QAAI,CAAC,KAAL,EAAY;AACX,MAAA,KAAK,GAAG,IAAI,SAAJ,CAAc,OAAd,CAAR;AACA;;AAED,WAAO,IAAP;AACA,GANa;;AAOf,SAAA,IAAA;AAAC,CA/FD,EAAA;;AAiGA,OAAO,CAAC,QAAR,CAAiB,IAAjB;AACA,eAAe,IAAf","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport { I18n as I18nClass } from './I18n';\r\nimport { ConsoleLogger as Logger } from '../Logger';\r\nimport Amplify from '../Amplify';\r\nvar logger = new Logger('I18n');\r\nvar _config = null;\r\nvar _i18n = null;\r\n/**\r\n * Export I18n APIs\r\n */\r\nvar I18n = /** @class */ (function () {\r\n    function I18n() {\r\n    }\r\n    /**\r\n     * @static\r\n     * @method\r\n     * Configure I18n part\r\n     * @param {Object} config - Configuration of the I18n\r\n     */\r\n    I18n.configure = function (config) {\r\n        logger.debug('configure I18n');\r\n        if (!config) {\r\n            return _config;\r\n        }\r\n        _config = Object.assign({}, _config, config.I18n || config);\r\n        I18n.createInstance();\r\n        return _config;\r\n    };\r\n    I18n.getModuleName = function () {\r\n        return 'I18n';\r\n    };\r\n    /**\r\n     * @static\r\n     * @method\r\n     * Create an instance of I18n for the library\r\n     */\r\n    I18n.createInstance = function () {\r\n        logger.debug('create I18n instance');\r\n        if (_i18n) {\r\n            return;\r\n        }\r\n        _i18n = new I18nClass(_config);\r\n    };\r\n    /**\r\n     * @static @method\r\n     * Explicitly setting language\r\n     * @param {String} lang\r\n     */\r\n    I18n.setLanguage = function (lang) {\r\n        I18n.checkConfig();\r\n        return _i18n.setLanguage(lang);\r\n    };\r\n    /**\r\n     * @static @method\r\n     * Get value\r\n     * @param {String} key\r\n     * @param {String} defVal - Default value\r\n     */\r\n    I18n.get = function (key, defVal) {\r\n        if (!I18n.checkConfig()) {\r\n            return typeof defVal === 'undefined' ? key : defVal;\r\n        }\r\n        return _i18n.get(key, defVal);\r\n    };\r\n    /**\r\n     * @static\r\n     * @method\r\n     * Add vocabularies for one language\r\n     * @param {String} langurage - Language of the dictionary\r\n     * @param {Object} vocabularies - Object that has key-value as dictionary entry\r\n     */\r\n    I18n.putVocabulariesForLanguage = function (language, vocabularies) {\r\n        I18n.checkConfig();\r\n        return _i18n.putVocabulariesForLanguage(language, vocabularies);\r\n    };\r\n    /**\r\n     * @static\r\n     * @method\r\n     * Add vocabularies for one language\r\n     * @param {Object} vocabularies - Object that has language as key,\r\n     *                                vocabularies of each language as value\r\n     */\r\n    I18n.putVocabularies = function (vocabularies) {\r\n        I18n.checkConfig();\r\n        return _i18n.putVocabularies(vocabularies);\r\n    };\r\n    I18n.checkConfig = function () {\r\n        if (!_i18n) {\r\n            _i18n = new I18nClass(_config);\r\n        }\r\n        return true;\r\n    };\r\n    return I18n;\r\n}());\r\nAmplify.register(I18n);\r\nexport default I18n;\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}