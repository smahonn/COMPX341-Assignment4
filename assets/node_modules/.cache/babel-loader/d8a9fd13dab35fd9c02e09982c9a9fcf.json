{"ast":null,"code":"var AWS = require('../core');\n\nvar util = AWS.util;\n\nvar typeOf = require('./types').typeOf;\n\nvar DynamoDBSet = require('./set');\n\nvar NumberValue = require('./numberValue');\n\nAWS.DynamoDB.Converter = {\n  /**\r\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\r\n   *\r\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\n  input: function convertInput(data, options) {\n    options = options || {};\n    var type = typeOf(data);\n\n    if (type === 'Object') {\n      return formatMap(data, options);\n    } else if (type === 'Array') {\n      return formatList(data, options);\n    } else if (type === 'Set') {\n      return formatSet(data, options);\n    } else if (type === 'String') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n\n      return {\n        S: data\n      };\n    } else if (type === 'Number' || type === 'NumberValue') {\n      return {\n        N: data.toString()\n      };\n    } else if (type === 'Binary') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n\n      return {\n        B: data\n      };\n    } else if (type === 'Boolean') {\n      return {\n        BOOL: data\n      };\n    } else if (type === 'null') {\n      return {\n        NULL: true\n      };\n    } else if (type !== 'undefined' && type !== 'Function') {\n      // this value has a custom constructor\n      return formatMap(data, options);\n    }\n  },\n\n  /**\r\n   * Convert a JavaScript object into a DynamoDB record.\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object in the DynamoDB record format.\r\n   *\r\n   * @example Convert a JavaScript object into a DynamoDB record\r\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\r\n   *    string: 'foo',\r\n   *    list: ['fizz', 'buzz', 'pop'],\r\n   *    map: {\r\n   *      nestedMap: {\r\n   *        key: 'value',\r\n   *      }\r\n   *    },\r\n   *    number: 123,\r\n   *    nullValue: null,\r\n   *    boolValue: true,\r\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\r\n   *  });\r\n   */\n  marshall: function marshallItem(data, options) {\n    return AWS.DynamoDB.Converter.input(data, options).M;\n  },\n\n  /**\r\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\r\n   *\r\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [Object|Array|String|Number|Boolean|null]\r\n   *\r\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\n  output: function convertOutput(data, options) {\n    options = options || {};\n    var list, map, i;\n\n    for (var type in data) {\n      var values = data[type];\n\n      if (type === 'M') {\n        map = {};\n\n        for (var key in values) {\n          map[key] = convertOutput(values[key], options);\n        }\n\n        return map;\n      } else if (type === 'L') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(convertOutput(values[i], options));\n        }\n\n        return list;\n      } else if (type === 'SS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(values[i] + '');\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'NS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(convertNumber(values[i], options.wrapNumbers));\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'BS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(AWS.util.buffer.toBuffer(values[i]));\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'S') {\n        return values + '';\n      } else if (type === 'N') {\n        return convertNumber(values, options.wrapNumbers);\n      } else if (type === 'B') {\n        return util.buffer.toBuffer(values);\n      } else if (type === 'BOOL') {\n        return values === 'true' || values === 'TRUE' || values === true;\n      } else if (type === 'NULL') {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * Convert a DynamoDB record into a JavaScript object.\r\n   *\r\n   * @param data [any] The DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object whose properties have been converted from\r\n   *    DynamoDB's AttributeValue format into their corresponding native\r\n   *    JavaScript types.\r\n   *\r\n   * @example Convert a record received from a DynamoDB stream\r\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\r\n   *    string: {S: 'foo'},\r\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\r\n   *    map: {\r\n   *      M: {\r\n   *        nestedMap: {\r\n   *          M: {\r\n   *            key: {S: 'value'}\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    },\r\n   *    number: {N: '123'},\r\n   *    nullValue: {NULL: true},\r\n   *    boolValue: {BOOL: true}\r\n   *  });\r\n   */\n  unmarshall: function unmarshall(data, options) {\n    return AWS.DynamoDB.Converter.output({\n      M: data\n    }, options);\n  }\n};\n/**\r\n * @api private\r\n * @param data [Array]\r\n * @param options [map]\r\n */\n\nfunction formatList(data, options) {\n  var list = {\n    L: []\n  };\n\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n  }\n\n  return list;\n}\n/**\r\n * @api private\r\n * @param value [String]\r\n * @param wrapNumbers [Boolean]\r\n */\n\n\nfunction convertNumber(value, wrapNumbers) {\n  return wrapNumbers ? new NumberValue(value) : Number(value);\n}\n/**\r\n * @api private\r\n * @param data [map]\r\n * @param options [map]\r\n */\n\n\nfunction formatMap(data, options) {\n  var map = {\n    M: {}\n  };\n\n  for (var key in data) {\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n\n  return map;\n}\n/**\r\n * @api private\r\n */\n\n\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n\n    if (values.length === 0) {\n      return AWS.DynamoDB.Converter.input(null);\n    }\n  }\n\n  var map = {};\n\n  switch (data.type) {\n    case 'String':\n      map['SS'] = values;\n      break;\n\n    case 'Binary':\n      map['BS'] = values;\n      break;\n\n    case 'Number':\n      map['NS'] = values.map(function (value) {\n        return value.toString();\n      });\n  }\n\n  return map;\n}\n/**\r\n * @api private\r\n */\n\n\nfunction filterEmptySetValues(set) {\n  var nonEmptyValues = [];\n  var potentiallyEmptyTypes = {\n    String: true,\n    Binary: true,\n    Number: false\n  };\n\n  if (potentiallyEmptyTypes[set.type]) {\n    for (var i = 0; i < set.values.length; i++) {\n      if (set.values[i].length === 0) {\n        continue;\n      }\n\n      nonEmptyValues.push(set.values[i]);\n    }\n\n    return nonEmptyValues;\n  }\n\n  return set.values;\n}\n/**\r\n * @api private\r\n */\n\n\nmodule.exports = AWS.DynamoDB.Converter;","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/dynamodb/converter.js"],"names":["AWS","require","util","typeOf","DynamoDBSet","NumberValue","DynamoDB","Converter","input","convertInput","data","options","type","formatMap","formatList","formatSet","length","convertEmptyValues","S","N","toString","B","BOOL","NULL","marshall","marshallItem","M","output","convertOutput","list","map","i","values","key","push","convertNumber","wrapNumbers","buffer","toBuffer","unmarshall","L","value","Number","formatted","filterEmptySetValues","set","nonEmptyValues","potentiallyEmptyTypes","String","Binary","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\r\nvar util = AWS.util;\r\nvar typeOf = require('./types').typeOf;\r\nvar DynamoDBSet = require('./set');\r\nvar NumberValue = require('./numberValue');\r\n\r\nAWS.DynamoDB.Converter = {\r\n  /**\r\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\r\n   *\r\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\r\n  input: function convertInput(data, options) {\r\n    options = options || {};\r\n    var type = typeOf(data);\r\n    if (type === 'Object') {\r\n      return formatMap(data, options);\r\n    } else if (type === 'Array') {\r\n      return formatList(data, options);\r\n    } else if (type === 'Set') {\r\n      return formatSet(data, options);\r\n    } else if (type === 'String') {\r\n      if (data.length === 0 && options.convertEmptyValues) {\r\n        return convertInput(null);\r\n      }\r\n      return { S: data };\r\n    } else if (type === 'Number' || type === 'NumberValue') {\r\n      return { N: data.toString() };\r\n    } else if (type === 'Binary') {\r\n      if (data.length === 0 && options.convertEmptyValues) {\r\n        return convertInput(null);\r\n      }\r\n      return { B: data };\r\n    } else if (type === 'Boolean') {\r\n      return { BOOL: data };\r\n    } else if (type === 'null') {\r\n      return { NULL: true };\r\n    } else if (type !== 'undefined' && type !== 'Function') {\r\n      // this value has a custom constructor\r\n      return formatMap(data, options);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Convert a JavaScript object into a DynamoDB record.\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object in the DynamoDB record format.\r\n   *\r\n   * @example Convert a JavaScript object into a DynamoDB record\r\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\r\n   *    string: 'foo',\r\n   *    list: ['fizz', 'buzz', 'pop'],\r\n   *    map: {\r\n   *      nestedMap: {\r\n   *        key: 'value',\r\n   *      }\r\n   *    },\r\n   *    number: 123,\r\n   *    nullValue: null,\r\n   *    boolValue: true,\r\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\r\n   *  });\r\n   */\r\n  marshall: function marshallItem(data, options) {\r\n    return AWS.DynamoDB.Converter.input(data, options).M;\r\n  },\r\n\r\n  /**\r\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\r\n   *\r\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [Object|Array|String|Number|Boolean|null]\r\n   *\r\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\r\n  output: function convertOutput(data, options) {\r\n    options = options || {};\r\n    var list, map, i;\r\n    for (var type in data) {\r\n      var values = data[type];\r\n      if (type === 'M') {\r\n        map = {};\r\n        for (var key in values) {\r\n          map[key] = convertOutput(values[key], options);\r\n        }\r\n        return map;\r\n      } else if (type === 'L') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(convertOutput(values[i], options));\r\n        }\r\n        return list;\r\n      } else if (type === 'SS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(values[i] + '');\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'NS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(convertNumber(values[i], options.wrapNumbers));\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'BS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(AWS.util.buffer.toBuffer(values[i]));\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'S') {\r\n        return values + '';\r\n      } else if (type === 'N') {\r\n        return convertNumber(values, options.wrapNumbers);\r\n      } else if (type === 'B') {\r\n        return util.buffer.toBuffer(values);\r\n      } else if (type === 'BOOL') {\r\n        return (values === 'true' || values === 'TRUE' || values === true);\r\n      } else if (type === 'NULL') {\r\n        return null;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Convert a DynamoDB record into a JavaScript object.\r\n   *\r\n   * @param data [any] The DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object whose properties have been converted from\r\n   *    DynamoDB's AttributeValue format into their corresponding native\r\n   *    JavaScript types.\r\n   *\r\n   * @example Convert a record received from a DynamoDB stream\r\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\r\n   *    string: {S: 'foo'},\r\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\r\n   *    map: {\r\n   *      M: {\r\n   *        nestedMap: {\r\n   *          M: {\r\n   *            key: {S: 'value'}\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    },\r\n   *    number: {N: '123'},\r\n   *    nullValue: {NULL: true},\r\n   *    boolValue: {BOOL: true}\r\n   *  });\r\n   */\r\n  unmarshall: function unmarshall(data, options) {\r\n    return AWS.DynamoDB.Converter.output({M: data}, options);\r\n  }\r\n};\r\n\r\n/**\r\n * @api private\r\n * @param data [Array]\r\n * @param options [map]\r\n */\r\nfunction formatList(data, options) {\r\n  var list = {L: []};\r\n  for (var i = 0; i < data.length; i++) {\r\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\r\n  }\r\n  return list;\r\n}\r\n\r\n/**\r\n * @api private\r\n * @param value [String]\r\n * @param wrapNumbers [Boolean]\r\n */\r\nfunction convertNumber(value, wrapNumbers) {\r\n  return wrapNumbers ? new NumberValue(value) : Number(value);\r\n}\r\n\r\n/**\r\n * @api private\r\n * @param data [map]\r\n * @param options [map]\r\n */\r\nfunction formatMap(data, options) {\r\n  var map = {M: {}};\r\n  for (var key in data) {\r\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\r\n    if (formatted !== void 0) {\r\n      map['M'][key] = formatted;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nfunction formatSet(data, options) {\r\n  options = options || {};\r\n  var values = data.values;\r\n  if (options.convertEmptyValues) {\r\n    values = filterEmptySetValues(data);\r\n    if (values.length === 0) {\r\n      return AWS.DynamoDB.Converter.input(null);\r\n    }\r\n  }\r\n\r\n  var map = {};\r\n  switch (data.type) {\r\n    case 'String': map['SS'] = values; break;\r\n    case 'Binary': map['BS'] = values; break;\r\n    case 'Number': map['NS'] = values.map(function (value) {\r\n      return value.toString();\r\n    });\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nfunction filterEmptySetValues(set) {\r\n    var nonEmptyValues = [];\r\n    var potentiallyEmptyTypes = {\r\n        String: true,\r\n        Binary: true,\r\n        Number: false\r\n    };\r\n    if (potentiallyEmptyTypes[set.type]) {\r\n        for (var i = 0; i < set.values.length; i++) {\r\n            if (set.values[i].length === 0) {\r\n                continue;\r\n            }\r\n            nonEmptyValues.push(set.values[i]);\r\n        }\r\n\r\n        return nonEmptyValues;\r\n    }\r\n\r\n    return set.values;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = AWS.DynamoDB.Converter;\r\n"]},"metadata":{},"sourceType":"script"}