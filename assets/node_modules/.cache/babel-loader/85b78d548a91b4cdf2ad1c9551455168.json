{"ast":null,"code":"var AWS = require('../core');\n/**\r\n * Creates a credential provider chain that searches for AWS credentials\r\n * in a list of credential providers specified by the {providers} property.\r\n *\r\n * By default, the chain will use the {defaultProviders} to resolve credentials.\r\n * These providers will look in the environment using the\r\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\r\n *\r\n * ## Setting Providers\r\n *\r\n * Each provider in the {providers} list should be a function that returns\r\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\r\n * form allows for delayed execution of the credential construction.\r\n *\r\n * ## Resolving Credentials from a Chain\r\n *\r\n * Call {resolve} to return the first valid credential object that can be\r\n * loaded by the provider chain.\r\n *\r\n * For example, to resolve a chain with a custom provider that checks a file\r\n * on disk after the set of {defaultProviders}:\r\n *\r\n * ```javascript\r\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\r\n * var chain = new AWS.CredentialProviderChain();\r\n * chain.providers.push(diskProvider);\r\n * chain.resolve();\r\n * ```\r\n *\r\n * The above code will return the `diskProvider` object if the\r\n * file contains credentials and the `defaultProviders` do not contain\r\n * any credential settings.\r\n *\r\n * @!attribute providers\r\n *   @return [Array<AWS.Credentials, Function>]\r\n *     a list of credentials objects or functions that return credentials\r\n *     objects. If the provider is a function, the function will be\r\n *     executed lazily when the provider needs to be checked for valid\r\n *     credentials. By default, this object will be set to the\r\n *     {defaultProviders}.\r\n *   @see defaultProviders\r\n */\n\n\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new CredentialProviderChain with a default set of providers\r\n   * specified by {defaultProviders}.\r\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n\n    this.resolveCallbacks = [];\n  },\n\n  /**\r\n   * @!method  resolvePromise()\r\n   *   Returns a 'thenable' promise.\r\n   *   Resolves the provider chain by searching for the first set of\r\n   *   credentials in {providers}.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function(credentials)\r\n   *     Called if the promise is fulfilled and the provider resolves the chain\r\n   *     to a credentials object\r\n   *     @param credentials [AWS.Credentials] the credentials object resolved\r\n   *       by the provider chain.\r\n   *   @callback rejectedCallback function(error)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] the error object returned if no credentials are found.\r\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\r\n   *   @example Calling the `resolvePromise` method.\r\n   *     var promise = chain.resolvePromise();\r\n   *     promise.then(function(credentials) { ... }, function(err) { ... });\r\n   */\n\n  /**\r\n   * Resolves the provider chain by searching for the first set of\r\n   * credentials in {providers}.\r\n   *\r\n   * @callback callback function(err, credentials)\r\n   *   Called when the provider resolves the chain to a credentials object\r\n   *   or null if no credentials can be found.\r\n   *\r\n   *   @param err [Error] the error object returned if no credentials are\r\n   *     found.\r\n   *   @param credentials [AWS.Credentials] the credentials object resolved\r\n   *     by the provider chain.\r\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\r\n   */\n  resolve: function resolve(callback) {\n    var self = this;\n\n    if (self.providers.length === 0) {\n      callback(new Error('No providers'));\n      return self;\n    }\n\n    if (self.resolveCallbacks.push(callback) === 1) {\n      var resolveNext = function resolveNext(err, creds) {\n        if (!err && creds || index === providers.length) {\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\n            callback(err, creds);\n          });\n          self.resolveCallbacks.length = 0;\n          return;\n        }\n\n        var provider = providers[index++];\n\n        if (typeof provider === 'function') {\n          creds = provider.call();\n        } else {\n          creds = provider;\n        }\n\n        if (creds.get) {\n          creds.get(function (getErr) {\n            resolveNext(getErr, getErr ? null : creds);\n          });\n        } else {\n          resolveNext(null, creds);\n        }\n      };\n\n      var index = 0;\n      var providers = self.providers.slice(0);\n      resolveNext();\n    }\n\n    return self;\n  }\n});\n/**\r\n * The default set of providers used by a vanilla CredentialProviderChain.\r\n *\r\n * In the browser:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = []\r\n * ```\r\n *\r\n * In Node.js:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = [\r\n *   function () { return new AWS.EnvironmentCredentials('AWS'); },\r\n *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\r\n *   function () { return new AWS.SharedIniFileCredentials(); },\r\n *   function () { return new AWS.ECSCredentials(); },\r\n *   function () { return new AWS.ProcessCredentials(); },\r\n *   function () { return new AWS.EC2MetadataCredentials() }\r\n * ]\r\n * ```\r\n */\n\nAWS.CredentialProviderChain.defaultProviders = [];\n/**\r\n * @api private\r\n */\n\nAWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\n};\n/**\r\n * @api private\r\n */\n\n\nAWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.resolvePromise;\n};\n\nAWS.util.addPromises(AWS.CredentialProviderChain);","map":{"version":3,"sources":["C:/Users/Shutt/Documents/COMPX341/COMPX341-Assignment4/assets/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"],"names":["AWS","require","CredentialProviderChain","util","inherit","Credentials","constructor","providers","defaultProviders","slice","resolveCallbacks","resolve","callback","self","length","Error","push","resolveNext","err","creds","index","arrayEach","provider","call","get","getErr","addPromisesToClass","PromiseDependency","prototype","resolvePromise","promisifyMethod","deletePromisesFromClass","addPromises"],"mappings":"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","sourcesContent":["var AWS = require('../core');\r\n\r\n/**\r\n * Creates a credential provider chain that searches for AWS credentials\r\n * in a list of credential providers specified by the {providers} property.\r\n *\r\n * By default, the chain will use the {defaultProviders} to resolve credentials.\r\n * These providers will look in the environment using the\r\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\r\n *\r\n * ## Setting Providers\r\n *\r\n * Each provider in the {providers} list should be a function that returns\r\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\r\n * form allows for delayed execution of the credential construction.\r\n *\r\n * ## Resolving Credentials from a Chain\r\n *\r\n * Call {resolve} to return the first valid credential object that can be\r\n * loaded by the provider chain.\r\n *\r\n * For example, to resolve a chain with a custom provider that checks a file\r\n * on disk after the set of {defaultProviders}:\r\n *\r\n * ```javascript\r\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\r\n * var chain = new AWS.CredentialProviderChain();\r\n * chain.providers.push(diskProvider);\r\n * chain.resolve();\r\n * ```\r\n *\r\n * The above code will return the `diskProvider` object if the\r\n * file contains credentials and the `defaultProviders` do not contain\r\n * any credential settings.\r\n *\r\n * @!attribute providers\r\n *   @return [Array<AWS.Credentials, Function>]\r\n *     a list of credentials objects or functions that return credentials\r\n *     objects. If the provider is a function, the function will be\r\n *     executed lazily when the provider needs to be checked for valid\r\n *     credentials. By default, this object will be set to the\r\n *     {defaultProviders}.\r\n *   @see defaultProviders\r\n */\r\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\r\n\r\n  /**\r\n   * Creates a new CredentialProviderChain with a default set of providers\r\n   * specified by {defaultProviders}.\r\n   */\r\n  constructor: function CredentialProviderChain(providers) {\r\n    if (providers) {\r\n      this.providers = providers;\r\n    } else {\r\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\r\n    }\r\n    this.resolveCallbacks = [];\r\n  },\r\n\r\n  /**\r\n   * @!method  resolvePromise()\r\n   *   Returns a 'thenable' promise.\r\n   *   Resolves the provider chain by searching for the first set of\r\n   *   credentials in {providers}.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function(credentials)\r\n   *     Called if the promise is fulfilled and the provider resolves the chain\r\n   *     to a credentials object\r\n   *     @param credentials [AWS.Credentials] the credentials object resolved\r\n   *       by the provider chain.\r\n   *   @callback rejectedCallback function(error)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] the error object returned if no credentials are found.\r\n   *   @return [Promise] A promise that represents the state of the `resolve` method call.\r\n   *   @example Calling the `resolvePromise` method.\r\n   *     var promise = chain.resolvePromise();\r\n   *     promise.then(function(credentials) { ... }, function(err) { ... });\r\n   */\r\n\r\n  /**\r\n   * Resolves the provider chain by searching for the first set of\r\n   * credentials in {providers}.\r\n   *\r\n   * @callback callback function(err, credentials)\r\n   *   Called when the provider resolves the chain to a credentials object\r\n   *   or null if no credentials can be found.\r\n   *\r\n   *   @param err [Error] the error object returned if no credentials are\r\n   *     found.\r\n   *   @param credentials [AWS.Credentials] the credentials object resolved\r\n   *     by the provider chain.\r\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\r\n   */\r\n  resolve: function resolve(callback) {\r\n    var self = this;\r\n    if (self.providers.length === 0) {\r\n      callback(new Error('No providers'));\r\n      return self;\r\n    }\r\n\r\n    if (self.resolveCallbacks.push(callback) === 1) {\r\n      var index = 0;\r\n      var providers = self.providers.slice(0);\r\n\r\n      function resolveNext(err, creds) {\r\n        if ((!err && creds) || index === providers.length) {\r\n          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {\r\n            callback(err, creds);\r\n          });\r\n          self.resolveCallbacks.length = 0;\r\n          return;\r\n        }\r\n\r\n        var provider = providers[index++];\r\n        if (typeof provider === 'function') {\r\n          creds = provider.call();\r\n        } else {\r\n          creds = provider;\r\n        }\r\n\r\n        if (creds.get) {\r\n          creds.get(function (getErr) {\r\n            resolveNext(getErr, getErr ? null : creds);\r\n          });\r\n        } else {\r\n          resolveNext(null, creds);\r\n        }\r\n      }\r\n\r\n      resolveNext();\r\n    }\r\n\r\n    return self;\r\n  }\r\n});\r\n\r\n/**\r\n * The default set of providers used by a vanilla CredentialProviderChain.\r\n *\r\n * In the browser:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = []\r\n * ```\r\n *\r\n * In Node.js:\r\n *\r\n * ```javascript\r\n * AWS.CredentialProviderChain.defaultProviders = [\r\n *   function () { return new AWS.EnvironmentCredentials('AWS'); },\r\n *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },\r\n *   function () { return new AWS.SharedIniFileCredentials(); },\r\n *   function () { return new AWS.ECSCredentials(); },\r\n *   function () { return new AWS.ProcessCredentials(); },\r\n *   function () { return new AWS.EC2MetadataCredentials() }\r\n * ]\r\n * ```\r\n */\r\nAWS.CredentialProviderChain.defaultProviders = [];\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\r\n  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);\r\n};\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {\r\n  delete this.prototype.resolvePromise;\r\n};\r\n\r\nAWS.util.addPromises(AWS.CredentialProviderChain);\r\n"]},"metadata":{},"sourceType":"script"}